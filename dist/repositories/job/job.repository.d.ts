import { Prisma } from "../../generated/prisma";
export declare class JobRepository {
    static getCompany(companyId: string | number): Promise<{
        name: string;
        address: string | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        slug: string;
        description: string | null;
        logoUrl: string | null;
        bannerUrl: string | null;
        website: string | null;
        locationCity: string | null;
        locationProvince: string | null;
        locationCountry: string | null;
        socials: Prisma.JsonValue | null;
        ownerAdminId: number | null;
    } | null>;
    static createJob(companyId: string | number, data: {
        title: string;
        description: string;
        banner?: string | null;
        category: string;
        city: string;
        salaryMin?: number | null;
        salaryMax?: number | null;
        tags: string[];
        deadline?: Date | null;
        isPublished?: boolean;
    }): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    }>;
    static updateJob(companyId: string | number, jobId: string | number, data: Partial<{
        title: string;
        description: string;
        banner?: string | null;
        category: string;
        city: string;
        salaryMin?: number | null;
        salaryMax?: number | null;
        tags: string[];
        deadline?: Date | null;
        isPublished?: boolean;
    }>): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    }>;
    static getJobById(companyId: string | number, jobId: string | number): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    } | null>;
    static togglePublish(jobId: string | number, isPublished: boolean): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    }>;
    static deleteJob(companyId: string | number, jobId: string | number): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    }>;
    static listJobs(params: {
        companyId: string | number;
        title?: string;
        category?: string;
        sortBy?: "createdAt" | "deadline";
        sortOrder?: "asc" | "desc";
        limit?: number;
        offset?: number;
    }): Promise<{
        items: {
            city: string;
            createdAt: Date;
            updatedAt: Date;
            id: number;
            companyId: number;
            slug: string;
            description: string;
            bannerUrl: string | null;
            title: string;
            category: string;
            employmentType: string | null;
            experienceLevel: string | null;
            province: string | null;
            salaryMin: number | null;
            salaryMax: number | null;
            salaryCurrency: string | null;
            tags: string[];
            applyDeadline: Date | null;
            isPublished: boolean;
            publishedAt: Date | null;
        }[];
        total: number;
        limit: number;
        offset: number;
    }>;
    static listPublishedJobs(params: {
        title?: string;
        category?: string;
        city?: string;
        sortBy?: "createdAt" | "deadline";
        sortOrder?: "asc" | "desc";
        limit?: number;
        offset?: number;
    }): Promise<{
        items: {
            city: string;
            createdAt: Date;
            updatedAt: Date;
            id: number;
            companyId: number;
            slug: string;
            description: string;
            bannerUrl: string | null;
            title: string;
            category: string;
            employmentType: string | null;
            experienceLevel: string | null;
            province: string | null;
            salaryMin: number | null;
            salaryMax: number | null;
            salaryCurrency: string | null;
            tags: string[];
            applyDeadline: Date | null;
            isPublished: boolean;
            publishedAt: Date | null;
        }[];
        total: number;
        limit: number;
        offset: number;
    }>;
    static getJobPublic(jobId: string | number): Promise<{
        city: string;
        createdAt: Date;
        updatedAt: Date;
        id: number;
        companyId: number;
        slug: string;
        description: string;
        bannerUrl: string | null;
        title: string;
        category: string;
        employmentType: string | null;
        experienceLevel: string | null;
        province: string | null;
        salaryMin: number | null;
        salaryMax: number | null;
        salaryCurrency: string | null;
        tags: string[];
        applyDeadline: Date | null;
        isPublished: boolean;
        publishedAt: Date | null;
    } | null>;
    static listApplicantsForJob(params: {
        companyId: string | number;
        jobId: string | number;
        name?: string;
        education?: string;
        ageMin?: number;
        ageMax?: number;
        expectedSalaryMin?: number;
        expectedSalaryMax?: number;
        sortBy?: "appliedAt" | "expectedSalary" | "age";
        sortOrder?: "asc" | "desc";
        limit?: number;
        offset?: number;
    }): Promise<{
        items: ({
            user: {
                role: import("../../generated/prisma").$Enums.UserRole;
                email: string;
                passwordHash: string | null;
                name: string | null;
                phone: string | null;
                gender: string | null;
                dob: Date | null;
                education: string | null;
                address: string | null;
                city: string | null;
                profilePicture: string | null;
                emailVerifiedAt: Date | null;
                verificationToken: string | null;
                verificationTokenExpiresAt: Date | null;
                passwordResetToken: string | null;
                passwordResetExpiresAt: Date | null;
                emailChangeToken: string | null;
                emailChangeNewEmail: string | null;
                emailChangeExpiresAt: Date | null;
                lastLoginAt: Date | null;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                id: number;
            };
        } & {
            createdAt: Date;
            updatedAt: Date;
            id: number;
            userId: number;
            status: import("../../generated/prisma").$Enums.ApplicationStatus;
            jobId: number;
            cvUrl: string;
            cvFileName: string | null;
            cvFileSize: number | null;
            expectedSalary: number | null;
            expectedSalaryCurrency: string | null;
            reviewNote: string | null;
            reviewUpdatedAt: Date | null;
            referralSource: string | null;
        })[];
        total: number;
        limit: number;
        offset: number;
    }>;
}
//# sourceMappingURL=job.repository.d.ts.map