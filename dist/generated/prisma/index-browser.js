
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  phone: 'phone',
  gender: 'gender',
  dob: 'dob',
  education: 'education',
  address: 'address',
  profilePicture: 'profilePicture',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProviderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  location: 'location',
  description: 'description',
  website: 'website',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  adminId: 'adminId'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  title: 'title',
  description: 'description',
  category: 'category',
  city: 'city',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  tags: 'tags',
  banner: 'banner',
  deadline: 'deadline',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  cvFile: 'cvFile',
  expectedSalary: 'expectedSalary',
  status: 'status',
  reviewNote: 'reviewNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  createdAt: 'createdAt'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  scheduleDate: 'scheduleDate',
  locationOrLink: 'locationOrLink',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reminderSentAt: 'reminderSentAt'
};

exports.Prisma.PreselectionTestScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  isActive: 'isActive',
  passingScore: 'passingScore',
  createdAt: 'createdAt'
};

exports.Prisma.PreselectionQuestionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  question: 'question',
  options: 'options',
  answer: 'answer'
};

exports.Prisma.PreselectionResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  testId: 'testId',
  score: 'score',
  createdAt: 'createdAt'
};

exports.Prisma.ApplicantAnswerScalarFieldEnum = {
  id: 'id',
  resultId: 'resultId',
  questionId: 'questionId',
  selected: 'selected',
  isCorrect: 'isCorrect'
};

exports.Prisma.SkillAssessmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SkillQuestionScalarFieldEnum = {
  id: 'id',
  assessmentId: 'assessmentId',
  question: 'question',
  options: 'options',
  answer: 'answer'
};

exports.Prisma.SkillResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assessmentId: 'assessmentId',
  score: 'score',
  isPassed: 'isPassed',
  certificateUrl: 'certificateUrl',
  certificateCode: 'certificateCode',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeName: 'badgeName',
  badgeIcon: 'badgeIcon',
  awardedAt: 'awardedAt'
};

exports.Prisma.GeneratedCVScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileUrl: 'fileUrl',
  templateUsed: 'templateUsed',
  additionalInfo: 'additionalInfo',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  planName: 'planName',
  planPrice: 'planPrice',
  planDescription: 'planDescription'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriptionPlanId: 'subscriptionPlanId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  paymentMethod: 'paymentMethod',
  paymentProof: 'paymentProof',
  status: 'status',
  amount: 'amount',
  approvedAt: 'approvedAt',
  gatewayTransactionId: 'gatewayTransactionId',
  createdAt: 'createdAt',
  expiredAt: 'expiredAt'
};

exports.Prisma.EmploymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyReviewScalarFieldEnum = {
  id: 'id',
  employmentId: 'employmentId',
  position: 'position',
  salaryEstimate: 'salaryEstimate',
  cultureRating: 'cultureRating',
  worklifeRating: 'worklifeRating',
  facilityRating: 'facilityRating',
  careerRating: 'careerRating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.JobShareScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  platform: 'platform',
  sharedUrl: 'sharedUrl',
  customMessage: 'customMessage',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  DEVELOPER: 'DEVELOPER'
};

exports.ProviderType = exports.$Enums.ProviderType = {
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  SUBMITTED: 'SUBMITTED',
  IN_REVIEW: 'IN_REVIEW',
  INTERVIEW: 'INTERVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.InterviewStatus = exports.$Enums.InterviewStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  TRANSFER: 'TRANSFER',
  GATEWAY: 'GATEWAY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.SharePlatform = exports.$Enums.SharePlatform = {
  LINKEDIN: 'LINKEDIN',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER',
  WHATSAPP: 'WHATSAPP'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProvider: 'UserProvider',
  Company: 'Company',
  Job: 'Job',
  Application: 'Application',
  SavedJob: 'SavedJob',
  Interview: 'Interview',
  PreselectionTest: 'PreselectionTest',
  PreselectionQuestion: 'PreselectionQuestion',
  PreselectionResult: 'PreselectionResult',
  ApplicantAnswer: 'ApplicantAnswer',
  SkillAssessment: 'SkillAssessment',
  SkillQuestion: 'SkillQuestion',
  SkillResult: 'SkillResult',
  UserBadge: 'UserBadge',
  GeneratedCV: 'GeneratedCV',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  Payment: 'Payment',
  Employment: 'Employment',
  CompanyReview: 'CompanyReview',
  JobShare: 'JobShare'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
