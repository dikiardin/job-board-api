
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProvider
 * 
 */
export type UserProvider = $Result.DefaultSelection<Prisma.$UserProviderPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model SavedJob
 * 
 */
export type SavedJob = $Result.DefaultSelection<Prisma.$SavedJobPayload>
/**
 * Model Interview
 * 
 */
export type Interview = $Result.DefaultSelection<Prisma.$InterviewPayload>
/**
 * Model PreselectionTest
 * 
 */
export type PreselectionTest = $Result.DefaultSelection<Prisma.$PreselectionTestPayload>
/**
 * Model PreselectionQuestion
 * 
 */
export type PreselectionQuestion = $Result.DefaultSelection<Prisma.$PreselectionQuestionPayload>
/**
 * Model PreselectionResult
 * 
 */
export type PreselectionResult = $Result.DefaultSelection<Prisma.$PreselectionResultPayload>
/**
 * Model ApplicantAnswer
 * 
 */
export type ApplicantAnswer = $Result.DefaultSelection<Prisma.$ApplicantAnswerPayload>
/**
 * Model SkillAssessment
 * 
 */
export type SkillAssessment = $Result.DefaultSelection<Prisma.$SkillAssessmentPayload>
/**
 * Model SkillQuestion
 * 
 */
export type SkillQuestion = $Result.DefaultSelection<Prisma.$SkillQuestionPayload>
/**
 * Model SkillResult
 * 
 */
export type SkillResult = $Result.DefaultSelection<Prisma.$SkillResultPayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model GeneratedCV
 * 
 */
export type GeneratedCV = $Result.DefaultSelection<Prisma.$GeneratedCVPayload>
/**
 * Model SubscriptionPlan
 * 
 */
export type SubscriptionPlan = $Result.DefaultSelection<Prisma.$SubscriptionPlanPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Employment
 * 
 */
export type Employment = $Result.DefaultSelection<Prisma.$EmploymentPayload>
/**
 * Model CompanyReview
 * 
 */
export type CompanyReview = $Result.DefaultSelection<Prisma.$CompanyReviewPayload>
/**
 * Model JobShare
 * 
 */
export type JobShare = $Result.DefaultSelection<Prisma.$JobSharePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  DEVELOPER: 'DEVELOPER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ApplicationStatus: {
  SUBMITTED: 'SUBMITTED',
  IN_REVIEW: 'IN_REVIEW',
  INTERVIEW: 'INTERVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const InterviewStatus: {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

export type InterviewStatus = (typeof InterviewStatus)[keyof typeof InterviewStatus]


export const PaymentStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentMethod: {
  TRANSFER: 'TRANSFER',
  GATEWAY: 'GATEWAY'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const SharePlatform: {
  LINKEDIN: 'LINKEDIN',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER',
  WHATSAPP: 'WHATSAPP'
};

export type SharePlatform = (typeof SharePlatform)[keyof typeof SharePlatform]


export const ProviderType: {
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK'
};

export type ProviderType = (typeof ProviderType)[keyof typeof ProviderType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type InterviewStatus = $Enums.InterviewStatus

export const InterviewStatus: typeof $Enums.InterviewStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type SharePlatform = $Enums.SharePlatform

export const SharePlatform: typeof $Enums.SharePlatform

export type ProviderType = $Enums.ProviderType

export const ProviderType: typeof $Enums.ProviderType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProvider`: Exposes CRUD operations for the **UserProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProviders
    * const userProviders = await prisma.userProvider.findMany()
    * ```
    */
  get userProvider(): Prisma.UserProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.savedJob`: Exposes CRUD operations for the **SavedJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedJobs
    * const savedJobs = await prisma.savedJob.findMany()
    * ```
    */
  get savedJob(): Prisma.SavedJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interview`: Exposes CRUD operations for the **Interview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interviews
    * const interviews = await prisma.interview.findMany()
    * ```
    */
  get interview(): Prisma.InterviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preselectionTest`: Exposes CRUD operations for the **PreselectionTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreselectionTests
    * const preselectionTests = await prisma.preselectionTest.findMany()
    * ```
    */
  get preselectionTest(): Prisma.PreselectionTestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preselectionQuestion`: Exposes CRUD operations for the **PreselectionQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreselectionQuestions
    * const preselectionQuestions = await prisma.preselectionQuestion.findMany()
    * ```
    */
  get preselectionQuestion(): Prisma.PreselectionQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preselectionResult`: Exposes CRUD operations for the **PreselectionResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreselectionResults
    * const preselectionResults = await prisma.preselectionResult.findMany()
    * ```
    */
  get preselectionResult(): Prisma.PreselectionResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicantAnswer`: Exposes CRUD operations for the **ApplicantAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicantAnswers
    * const applicantAnswers = await prisma.applicantAnswer.findMany()
    * ```
    */
  get applicantAnswer(): Prisma.ApplicantAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skillAssessment`: Exposes CRUD operations for the **SkillAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillAssessments
    * const skillAssessments = await prisma.skillAssessment.findMany()
    * ```
    */
  get skillAssessment(): Prisma.SkillAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skillQuestion`: Exposes CRUD operations for the **SkillQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillQuestions
    * const skillQuestions = await prisma.skillQuestion.findMany()
    * ```
    */
  get skillQuestion(): Prisma.SkillQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skillResult`: Exposes CRUD operations for the **SkillResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillResults
    * const skillResults = await prisma.skillResult.findMany()
    * ```
    */
  get skillResult(): Prisma.SkillResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generatedCV`: Exposes CRUD operations for the **GeneratedCV** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneratedCVS
    * const generatedCVS = await prisma.generatedCV.findMany()
    * ```
    */
  get generatedCV(): Prisma.GeneratedCVDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionPlan`: Exposes CRUD operations for the **SubscriptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPlans
    * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
    * ```
    */
  get subscriptionPlan(): Prisma.SubscriptionPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employment`: Exposes CRUD operations for the **Employment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employments
    * const employments = await prisma.employment.findMany()
    * ```
    */
  get employment(): Prisma.EmploymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyReview`: Exposes CRUD operations for the **CompanyReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyReviews
    * const companyReviews = await prisma.companyReview.findMany()
    * ```
    */
  get companyReview(): Prisma.CompanyReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobShare`: Exposes CRUD operations for the **JobShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobShares
    * const jobShares = await prisma.jobShare.findMany()
    * ```
    */
  get jobShare(): Prisma.JobShareDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProvider: 'UserProvider',
    Company: 'Company',
    Job: 'Job',
    Application: 'Application',
    SavedJob: 'SavedJob',
    Interview: 'Interview',
    PreselectionTest: 'PreselectionTest',
    PreselectionQuestion: 'PreselectionQuestion',
    PreselectionResult: 'PreselectionResult',
    ApplicantAnswer: 'ApplicantAnswer',
    SkillAssessment: 'SkillAssessment',
    SkillQuestion: 'SkillQuestion',
    SkillResult: 'SkillResult',
    UserBadge: 'UserBadge',
    GeneratedCV: 'GeneratedCV',
    SubscriptionPlan: 'SubscriptionPlan',
    Subscription: 'Subscription',
    Payment: 'Payment',
    Employment: 'Employment',
    CompanyReview: 'CompanyReview',
    JobShare: 'JobShare'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userProvider" | "company" | "job" | "application" | "savedJob" | "interview" | "preselectionTest" | "preselectionQuestion" | "preselectionResult" | "applicantAnswer" | "skillAssessment" | "skillQuestion" | "skillResult" | "userBadge" | "generatedCV" | "subscriptionPlan" | "subscription" | "payment" | "employment" | "companyReview" | "jobShare"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProvider: {
        payload: Prisma.$UserProviderPayload<ExtArgs>
        fields: Prisma.UserProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          findFirst: {
            args: Prisma.UserProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          findMany: {
            args: Prisma.UserProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>[]
          }
          create: {
            args: Prisma.UserProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          createMany: {
            args: Prisma.UserProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>[]
          }
          delete: {
            args: Prisma.UserProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          update: {
            args: Prisma.UserProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          deleteMany: {
            args: Prisma.UserProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>[]
          }
          upsert: {
            args: Prisma.UserProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProviderPayload>
          }
          aggregate: {
            args: Prisma.UserProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProvider>
          }
          groupBy: {
            args: Prisma.UserProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProviderCountArgs<ExtArgs>
            result: $Utils.Optional<UserProviderCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      SavedJob: {
        payload: Prisma.$SavedJobPayload<ExtArgs>
        fields: Prisma.SavedJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          findFirst: {
            args: Prisma.SavedJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          findMany: {
            args: Prisma.SavedJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>[]
          }
          create: {
            args: Prisma.SavedJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          createMany: {
            args: Prisma.SavedJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>[]
          }
          delete: {
            args: Prisma.SavedJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          update: {
            args: Prisma.SavedJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          deleteMany: {
            args: Prisma.SavedJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SavedJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>[]
          }
          upsert: {
            args: Prisma.SavedJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedJobPayload>
          }
          aggregate: {
            args: Prisma.SavedJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedJob>
          }
          groupBy: {
            args: Prisma.SavedJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedJobCountArgs<ExtArgs>
            result: $Utils.Optional<SavedJobCountAggregateOutputType> | number
          }
        }
      }
      Interview: {
        payload: Prisma.$InterviewPayload<ExtArgs>
        fields: Prisma.InterviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findFirst: {
            args: Prisma.InterviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findMany: {
            args: Prisma.InterviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          create: {
            args: Prisma.InterviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          createMany: {
            args: Prisma.InterviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          delete: {
            args: Prisma.InterviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          update: {
            args: Prisma.InterviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          deleteMany: {
            args: Prisma.InterviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          upsert: {
            args: Prisma.InterviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          aggregate: {
            args: Prisma.InterviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterview>
          }
          groupBy: {
            args: Prisma.InterviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterviewCountArgs<ExtArgs>
            result: $Utils.Optional<InterviewCountAggregateOutputType> | number
          }
        }
      }
      PreselectionTest: {
        payload: Prisma.$PreselectionTestPayload<ExtArgs>
        fields: Prisma.PreselectionTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreselectionTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreselectionTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          findFirst: {
            args: Prisma.PreselectionTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreselectionTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          findMany: {
            args: Prisma.PreselectionTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>[]
          }
          create: {
            args: Prisma.PreselectionTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          createMany: {
            args: Prisma.PreselectionTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreselectionTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>[]
          }
          delete: {
            args: Prisma.PreselectionTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          update: {
            args: Prisma.PreselectionTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          deleteMany: {
            args: Prisma.PreselectionTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreselectionTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreselectionTestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>[]
          }
          upsert: {
            args: Prisma.PreselectionTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionTestPayload>
          }
          aggregate: {
            args: Prisma.PreselectionTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreselectionTest>
          }
          groupBy: {
            args: Prisma.PreselectionTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreselectionTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreselectionTestCountArgs<ExtArgs>
            result: $Utils.Optional<PreselectionTestCountAggregateOutputType> | number
          }
        }
      }
      PreselectionQuestion: {
        payload: Prisma.$PreselectionQuestionPayload<ExtArgs>
        fields: Prisma.PreselectionQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreselectionQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreselectionQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          findFirst: {
            args: Prisma.PreselectionQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreselectionQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          findMany: {
            args: Prisma.PreselectionQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>[]
          }
          create: {
            args: Prisma.PreselectionQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          createMany: {
            args: Prisma.PreselectionQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreselectionQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>[]
          }
          delete: {
            args: Prisma.PreselectionQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          update: {
            args: Prisma.PreselectionQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          deleteMany: {
            args: Prisma.PreselectionQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreselectionQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreselectionQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>[]
          }
          upsert: {
            args: Prisma.PreselectionQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionQuestionPayload>
          }
          aggregate: {
            args: Prisma.PreselectionQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreselectionQuestion>
          }
          groupBy: {
            args: Prisma.PreselectionQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreselectionQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreselectionQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<PreselectionQuestionCountAggregateOutputType> | number
          }
        }
      }
      PreselectionResult: {
        payload: Prisma.$PreselectionResultPayload<ExtArgs>
        fields: Prisma.PreselectionResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreselectionResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreselectionResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          findFirst: {
            args: Prisma.PreselectionResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreselectionResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          findMany: {
            args: Prisma.PreselectionResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>[]
          }
          create: {
            args: Prisma.PreselectionResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          createMany: {
            args: Prisma.PreselectionResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreselectionResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>[]
          }
          delete: {
            args: Prisma.PreselectionResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          update: {
            args: Prisma.PreselectionResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          deleteMany: {
            args: Prisma.PreselectionResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreselectionResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreselectionResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>[]
          }
          upsert: {
            args: Prisma.PreselectionResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreselectionResultPayload>
          }
          aggregate: {
            args: Prisma.PreselectionResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreselectionResult>
          }
          groupBy: {
            args: Prisma.PreselectionResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreselectionResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreselectionResultCountArgs<ExtArgs>
            result: $Utils.Optional<PreselectionResultCountAggregateOutputType> | number
          }
        }
      }
      ApplicantAnswer: {
        payload: Prisma.$ApplicantAnswerPayload<ExtArgs>
        fields: Prisma.ApplicantAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicantAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicantAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          findFirst: {
            args: Prisma.ApplicantAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicantAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          findMany: {
            args: Prisma.ApplicantAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>[]
          }
          create: {
            args: Prisma.ApplicantAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          createMany: {
            args: Prisma.ApplicantAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicantAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>[]
          }
          delete: {
            args: Prisma.ApplicantAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          update: {
            args: Prisma.ApplicantAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          deleteMany: {
            args: Prisma.ApplicantAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicantAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicantAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>[]
          }
          upsert: {
            args: Prisma.ApplicantAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantAnswerPayload>
          }
          aggregate: {
            args: Prisma.ApplicantAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicantAnswer>
          }
          groupBy: {
            args: Prisma.ApplicantAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicantAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicantAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicantAnswerCountAggregateOutputType> | number
          }
        }
      }
      SkillAssessment: {
        payload: Prisma.$SkillAssessmentPayload<ExtArgs>
        fields: Prisma.SkillAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          findFirst: {
            args: Prisma.SkillAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          findMany: {
            args: Prisma.SkillAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>[]
          }
          create: {
            args: Prisma.SkillAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          createMany: {
            args: Prisma.SkillAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>[]
          }
          delete: {
            args: Prisma.SkillAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          update: {
            args: Prisma.SkillAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.SkillAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.SkillAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillAssessmentPayload>
          }
          aggregate: {
            args: Prisma.SkillAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillAssessment>
          }
          groupBy: {
            args: Prisma.SkillAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<SkillAssessmentCountAggregateOutputType> | number
          }
        }
      }
      SkillQuestion: {
        payload: Prisma.$SkillQuestionPayload<ExtArgs>
        fields: Prisma.SkillQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          findFirst: {
            args: Prisma.SkillQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          findMany: {
            args: Prisma.SkillQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>[]
          }
          create: {
            args: Prisma.SkillQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          createMany: {
            args: Prisma.SkillQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>[]
          }
          delete: {
            args: Prisma.SkillQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          update: {
            args: Prisma.SkillQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          deleteMany: {
            args: Prisma.SkillQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>[]
          }
          upsert: {
            args: Prisma.SkillQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillQuestionPayload>
          }
          aggregate: {
            args: Prisma.SkillQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillQuestion>
          }
          groupBy: {
            args: Prisma.SkillQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<SkillQuestionCountAggregateOutputType> | number
          }
        }
      }
      SkillResult: {
        payload: Prisma.$SkillResultPayload<ExtArgs>
        fields: Prisma.SkillResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          findFirst: {
            args: Prisma.SkillResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          findMany: {
            args: Prisma.SkillResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>[]
          }
          create: {
            args: Prisma.SkillResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          createMany: {
            args: Prisma.SkillResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>[]
          }
          delete: {
            args: Prisma.SkillResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          update: {
            args: Prisma.SkillResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          deleteMany: {
            args: Prisma.SkillResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>[]
          }
          upsert: {
            args: Prisma.SkillResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillResultPayload>
          }
          aggregate: {
            args: Prisma.SkillResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillResult>
          }
          groupBy: {
            args: Prisma.SkillResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillResultCountArgs<ExtArgs>
            result: $Utils.Optional<SkillResultCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserBadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      GeneratedCV: {
        payload: Prisma.$GeneratedCVPayload<ExtArgs>
        fields: Prisma.GeneratedCVFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneratedCVFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneratedCVFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          findFirst: {
            args: Prisma.GeneratedCVFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneratedCVFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          findMany: {
            args: Prisma.GeneratedCVFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>[]
          }
          create: {
            args: Prisma.GeneratedCVCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          createMany: {
            args: Prisma.GeneratedCVCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneratedCVCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>[]
          }
          delete: {
            args: Prisma.GeneratedCVDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          update: {
            args: Prisma.GeneratedCVUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          deleteMany: {
            args: Prisma.GeneratedCVDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneratedCVUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneratedCVUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>[]
          }
          upsert: {
            args: Prisma.GeneratedCVUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneratedCVPayload>
          }
          aggregate: {
            args: Prisma.GeneratedCVAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneratedCV>
          }
          groupBy: {
            args: Prisma.GeneratedCVGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneratedCVGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneratedCVCountArgs<ExtArgs>
            result: $Utils.Optional<GeneratedCVCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPlan: {
        payload: Prisma.$SubscriptionPlanPayload<ExtArgs>
        fields: Prisma.SubscriptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          update: {
            args: Prisma.SubscriptionPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionPlan>
          }
          groupBy: {
            args: Prisma.SubscriptionPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPlanCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Employment: {
        payload: Prisma.$EmploymentPayload<ExtArgs>
        fields: Prisma.EmploymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmploymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmploymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          findFirst: {
            args: Prisma.EmploymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmploymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          findMany: {
            args: Prisma.EmploymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          create: {
            args: Prisma.EmploymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          createMany: {
            args: Prisma.EmploymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmploymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          delete: {
            args: Prisma.EmploymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          update: {
            args: Prisma.EmploymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          deleteMany: {
            args: Prisma.EmploymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmploymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmploymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          upsert: {
            args: Prisma.EmploymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          aggregate: {
            args: Prisma.EmploymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployment>
          }
          groupBy: {
            args: Prisma.EmploymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmploymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmploymentCountArgs<ExtArgs>
            result: $Utils.Optional<EmploymentCountAggregateOutputType> | number
          }
        }
      }
      CompanyReview: {
        payload: Prisma.$CompanyReviewPayload<ExtArgs>
        fields: Prisma.CompanyReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          findFirst: {
            args: Prisma.CompanyReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          findMany: {
            args: Prisma.CompanyReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>[]
          }
          create: {
            args: Prisma.CompanyReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          createMany: {
            args: Prisma.CompanyReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>[]
          }
          delete: {
            args: Prisma.CompanyReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          update: {
            args: Prisma.CompanyReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          deleteMany: {
            args: Prisma.CompanyReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>[]
          }
          upsert: {
            args: Prisma.CompanyReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyReviewPayload>
          }
          aggregate: {
            args: Prisma.CompanyReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyReview>
          }
          groupBy: {
            args: Prisma.CompanyReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyReviewCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyReviewCountAggregateOutputType> | number
          }
        }
      }
      JobShare: {
        payload: Prisma.$JobSharePayload<ExtArgs>
        fields: Prisma.JobShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          findFirst: {
            args: Prisma.JobShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          findMany: {
            args: Prisma.JobShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>[]
          }
          create: {
            args: Prisma.JobShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          createMany: {
            args: Prisma.JobShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>[]
          }
          delete: {
            args: Prisma.JobShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          update: {
            args: Prisma.JobShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          deleteMany: {
            args: Prisma.JobShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>[]
          }
          upsert: {
            args: Prisma.JobShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSharePayload>
          }
          aggregate: {
            args: Prisma.JobShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobShare>
          }
          groupBy: {
            args: Prisma.JobShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobShareCountArgs<ExtArgs>
            result: $Utils.Optional<JobShareCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userProvider?: UserProviderOmit
    company?: CompanyOmit
    job?: JobOmit
    application?: ApplicationOmit
    savedJob?: SavedJobOmit
    interview?: InterviewOmit
    preselectionTest?: PreselectionTestOmit
    preselectionQuestion?: PreselectionQuestionOmit
    preselectionResult?: PreselectionResultOmit
    applicantAnswer?: ApplicantAnswerOmit
    skillAssessment?: SkillAssessmentOmit
    skillQuestion?: SkillQuestionOmit
    skillResult?: SkillResultOmit
    userBadge?: UserBadgeOmit
    generatedCV?: GeneratedCVOmit
    subscriptionPlan?: SubscriptionPlanOmit
    subscription?: SubscriptionOmit
    payment?: PaymentOmit
    employment?: EmploymentOmit
    companyReview?: CompanyReviewOmit
    jobShare?: JobShareOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    providers: number
    employments: number
    applications: number
    preselectionResults: number
    skillResults: number
    createdAssessments: number
    userBadges: number
    generatedCvs: number
    subscriptions: number
    savedJobs: number
    jobShares: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    providers?: boolean | UserCountOutputTypeCountProvidersArgs
    employments?: boolean | UserCountOutputTypeCountEmploymentsArgs
    applications?: boolean | UserCountOutputTypeCountApplicationsArgs
    preselectionResults?: boolean | UserCountOutputTypeCountPreselectionResultsArgs
    skillResults?: boolean | UserCountOutputTypeCountSkillResultsArgs
    createdAssessments?: boolean | UserCountOutputTypeCountCreatedAssessmentsArgs
    userBadges?: boolean | UserCountOutputTypeCountUserBadgesArgs
    generatedCvs?: boolean | UserCountOutputTypeCountGeneratedCvsArgs
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    savedJobs?: boolean | UserCountOutputTypeCountSavedJobsArgs
    jobShares?: boolean | UserCountOutputTypeCountJobSharesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProviderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmploymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmploymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPreselectionResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSkillResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillAssessmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGeneratedCvsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedCVWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSavedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobShareWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    jobs: number
    employments: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | CompanyCountOutputTypeCountJobsArgs
    employments?: boolean | CompanyCountOutputTypeCountEmploymentsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmploymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmploymentWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    applications: number
    preselectionTests: number
    savedBy: number
    shares: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobCountOutputTypeCountApplicationsArgs
    preselectionTests?: boolean | JobCountOutputTypeCountPreselectionTestsArgs
    savedBy?: boolean | JobCountOutputTypeCountSavedByArgs
    shares?: boolean | JobCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountPreselectionTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionTestWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountSavedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobShareWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    interviews: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interviews?: boolean | ApplicationCountOutputTypeCountInterviewsArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }


  /**
   * Count Type PreselectionTestCountOutputType
   */

  export type PreselectionTestCountOutputType = {
    questions: number
    results: number
  }

  export type PreselectionTestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | PreselectionTestCountOutputTypeCountQuestionsArgs
    results?: boolean | PreselectionTestCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * PreselectionTestCountOutputType without action
   */
  export type PreselectionTestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTestCountOutputType
     */
    select?: PreselectionTestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreselectionTestCountOutputType without action
   */
  export type PreselectionTestCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionQuestionWhereInput
  }

  /**
   * PreselectionTestCountOutputType without action
   */
  export type PreselectionTestCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionResultWhereInput
  }


  /**
   * Count Type PreselectionQuestionCountOutputType
   */

  export type PreselectionQuestionCountOutputType = {
    answers: number
  }

  export type PreselectionQuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | PreselectionQuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * PreselectionQuestionCountOutputType without action
   */
  export type PreselectionQuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestionCountOutputType
     */
    select?: PreselectionQuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreselectionQuestionCountOutputType without action
   */
  export type PreselectionQuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantAnswerWhereInput
  }


  /**
   * Count Type PreselectionResultCountOutputType
   */

  export type PreselectionResultCountOutputType = {
    answers: number
  }

  export type PreselectionResultCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | PreselectionResultCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * PreselectionResultCountOutputType without action
   */
  export type PreselectionResultCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResultCountOutputType
     */
    select?: PreselectionResultCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreselectionResultCountOutputType without action
   */
  export type PreselectionResultCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantAnswerWhereInput
  }


  /**
   * Count Type SkillAssessmentCountOutputType
   */

  export type SkillAssessmentCountOutputType = {
    questions: number
    results: number
  }

  export type SkillAssessmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SkillAssessmentCountOutputTypeCountQuestionsArgs
    results?: boolean | SkillAssessmentCountOutputTypeCountResultsArgs
  }

  // Custom InputTypes
  /**
   * SkillAssessmentCountOutputType without action
   */
  export type SkillAssessmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessmentCountOutputType
     */
    select?: SkillAssessmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillAssessmentCountOutputType without action
   */
  export type SkillAssessmentCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillQuestionWhereInput
  }

  /**
   * SkillAssessmentCountOutputType without action
   */
  export type SkillAssessmentCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillResultWhereInput
  }


  /**
   * Count Type SubscriptionPlanCountOutputType
   */

  export type SubscriptionPlanCountOutputType = {
    subscriptions: number
  }

  export type SubscriptionPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlanCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlanCountOutputType
     */
    select?: SubscriptionPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type SubscriptionCountOutputType
   */

  export type SubscriptionCountOutputType = {
    payments: number
  }

  export type SubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | SubscriptionCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionCountOutputType
     */
    select?: SubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type EmploymentCountOutputType
   */

  export type EmploymentCountOutputType = {
    reviews: number
  }

  export type EmploymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | EmploymentCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * EmploymentCountOutputType without action
   */
  export type EmploymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmploymentCountOutputType
     */
    select?: EmploymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmploymentCountOutputType without action
   */
  export type EmploymentCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    role: $Enums.UserRole | null
    name: string | null
    email: string | null
    passwordHash: string | null
    phone: string | null
    gender: string | null
    dob: Date | null
    education: string | null
    address: string | null
    profilePicture: string | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    role: $Enums.UserRole | null
    name: string | null
    email: string | null
    passwordHash: string | null
    phone: string | null
    gender: string | null
    dob: Date | null
    education: string | null
    address: string | null
    profilePicture: string | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    role: number
    name: number
    email: number
    passwordHash: number
    phone: number
    gender: number
    dob: number
    education: number
    address: number
    profilePicture: number
    isVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    role?: true
    name?: true
    email?: true
    passwordHash?: true
    phone?: true
    gender?: true
    dob?: true
    education?: true
    address?: true
    profilePicture?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    role?: true
    name?: true
    email?: true
    passwordHash?: true
    phone?: true
    gender?: true
    dob?: true
    education?: true
    address?: true
    profilePicture?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    role?: true
    name?: true
    email?: true
    passwordHash?: true
    phone?: true
    gender?: true
    dob?: true
    education?: true
    address?: true
    profilePicture?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    role: $Enums.UserRole
    name: string
    email: string
    passwordHash: string | null
    phone: string | null
    gender: string | null
    dob: Date | null
    education: string | null
    address: string | null
    profilePicture: string | null
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    gender?: boolean
    dob?: boolean
    education?: boolean
    address?: boolean
    profilePicture?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    providers?: boolean | User$providersArgs<ExtArgs>
    adminOf?: boolean | User$adminOfArgs<ExtArgs>
    employments?: boolean | User$employmentsArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    preselectionResults?: boolean | User$preselectionResultsArgs<ExtArgs>
    skillResults?: boolean | User$skillResultsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    generatedCvs?: boolean | User$generatedCvsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    savedJobs?: boolean | User$savedJobsArgs<ExtArgs>
    jobShares?: boolean | User$jobSharesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    gender?: boolean
    dob?: boolean
    education?: boolean
    address?: boolean
    profilePicture?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    gender?: boolean
    dob?: boolean
    education?: boolean
    address?: boolean
    profilePicture?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    role?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    gender?: boolean
    dob?: boolean
    education?: boolean
    address?: boolean
    profilePicture?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "name" | "email" | "passwordHash" | "phone" | "gender" | "dob" | "education" | "address" | "profilePicture" | "isVerified" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    providers?: boolean | User$providersArgs<ExtArgs>
    adminOf?: boolean | User$adminOfArgs<ExtArgs>
    employments?: boolean | User$employmentsArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    preselectionResults?: boolean | User$preselectionResultsArgs<ExtArgs>
    skillResults?: boolean | User$skillResultsArgs<ExtArgs>
    createdAssessments?: boolean | User$createdAssessmentsArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    generatedCvs?: boolean | User$generatedCvsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    savedJobs?: boolean | User$savedJobsArgs<ExtArgs>
    jobShares?: boolean | User$jobSharesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      providers: Prisma.$UserProviderPayload<ExtArgs>[]
      adminOf: Prisma.$CompanyPayload<ExtArgs> | null
      employments: Prisma.$EmploymentPayload<ExtArgs>[]
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      preselectionResults: Prisma.$PreselectionResultPayload<ExtArgs>[]
      skillResults: Prisma.$SkillResultPayload<ExtArgs>[]
      createdAssessments: Prisma.$SkillAssessmentPayload<ExtArgs>[]
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
      generatedCvs: Prisma.$GeneratedCVPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      savedJobs: Prisma.$SavedJobPayload<ExtArgs>[]
      jobShares: Prisma.$JobSharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: $Enums.UserRole
      name: string
      email: string
      passwordHash: string | null
      phone: string | null
      gender: string | null
      dob: Date | null
      education: string | null
      address: string | null
      profilePicture: string | null
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    providers<T extends User$providersArgs<ExtArgs> = {}>(args?: Subset<T, User$providersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminOf<T extends User$adminOfArgs<ExtArgs> = {}>(args?: Subset<T, User$adminOfArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employments<T extends User$employmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$employmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends User$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preselectionResults<T extends User$preselectionResultsArgs<ExtArgs> = {}>(args?: Subset<T, User$preselectionResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skillResults<T extends User$skillResultsArgs<ExtArgs> = {}>(args?: Subset<T, User$skillResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdAssessments<T extends User$createdAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userBadges<T extends User$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, User$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    generatedCvs<T extends User$generatedCvsArgs<ExtArgs> = {}>(args?: Subset<T, User$generatedCvsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedJobs<T extends User$savedJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$savedJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobShares<T extends User$jobSharesArgs<ExtArgs> = {}>(args?: Subset<T, User$jobSharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'String'>
    readonly dob: FieldRef<"User", 'DateTime'>
    readonly education: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly profilePicture: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.providers
   */
  export type User$providersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    where?: UserProviderWhereInput
    orderBy?: UserProviderOrderByWithRelationInput | UserProviderOrderByWithRelationInput[]
    cursor?: UserProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProviderScalarFieldEnum | UserProviderScalarFieldEnum[]
  }

  /**
   * User.adminOf
   */
  export type User$adminOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.employments
   */
  export type User$employmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    where?: EmploymentWhereInput
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    cursor?: EmploymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * User.applications
   */
  export type User$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * User.preselectionResults
   */
  export type User$preselectionResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    where?: PreselectionResultWhereInput
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    cursor?: PreselectionResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreselectionResultScalarFieldEnum | PreselectionResultScalarFieldEnum[]
  }

  /**
   * User.skillResults
   */
  export type User$skillResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    where?: SkillResultWhereInput
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    cursor?: SkillResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillResultScalarFieldEnum | SkillResultScalarFieldEnum[]
  }

  /**
   * User.createdAssessments
   */
  export type User$createdAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    where?: SkillAssessmentWhereInput
    orderBy?: SkillAssessmentOrderByWithRelationInput | SkillAssessmentOrderByWithRelationInput[]
    cursor?: SkillAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillAssessmentScalarFieldEnum | SkillAssessmentScalarFieldEnum[]
  }

  /**
   * User.userBadges
   */
  export type User$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.generatedCvs
   */
  export type User$generatedCvsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    where?: GeneratedCVWhereInput
    orderBy?: GeneratedCVOrderByWithRelationInput | GeneratedCVOrderByWithRelationInput[]
    cursor?: GeneratedCVWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneratedCVScalarFieldEnum | GeneratedCVScalarFieldEnum[]
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.savedJobs
   */
  export type User$savedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    where?: SavedJobWhereInput
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    cursor?: SavedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedJobScalarFieldEnum | SavedJobScalarFieldEnum[]
  }

  /**
   * User.jobShares
   */
  export type User$jobSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    where?: JobShareWhereInput
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    cursor?: JobShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobShareScalarFieldEnum | JobShareScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProvider
   */

  export type AggregateUserProvider = {
    _count: UserProviderCountAggregateOutputType | null
    _avg: UserProviderAvgAggregateOutputType | null
    _sum: UserProviderSumAggregateOutputType | null
    _min: UserProviderMinAggregateOutputType | null
    _max: UserProviderMaxAggregateOutputType | null
  }

  export type UserProviderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserProviderSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserProviderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    provider: $Enums.ProviderType | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    createdAt: Date | null
  }

  export type UserProviderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    provider: $Enums.ProviderType | null
    providerId: string | null
    accessToken: string | null
    refreshToken: string | null
    createdAt: Date | null
  }

  export type UserProviderCountAggregateOutputType = {
    id: number
    userId: number
    provider: number
    providerId: number
    accessToken: number
    refreshToken: number
    createdAt: number
    _all: number
  }


  export type UserProviderAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserProviderSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserProviderMinAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    createdAt?: true
  }

  export type UserProviderMaxAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    createdAt?: true
  }

  export type UserProviderCountAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    providerId?: true
    accessToken?: true
    refreshToken?: true
    createdAt?: true
    _all?: true
  }

  export type UserProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProvider to aggregate.
     */
    where?: UserProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProviders to fetch.
     */
    orderBy?: UserProviderOrderByWithRelationInput | UserProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProviders
    **/
    _count?: true | UserProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProviderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProviderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProviderMaxAggregateInputType
  }

  export type GetUserProviderAggregateType<T extends UserProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProvider[P]>
      : GetScalarType<T[P], AggregateUserProvider[P]>
  }




  export type UserProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProviderWhereInput
    orderBy?: UserProviderOrderByWithAggregationInput | UserProviderOrderByWithAggregationInput[]
    by: UserProviderScalarFieldEnum[] | UserProviderScalarFieldEnum
    having?: UserProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProviderCountAggregateInputType | true
    _avg?: UserProviderAvgAggregateInputType
    _sum?: UserProviderSumAggregateInputType
    _min?: UserProviderMinAggregateInputType
    _max?: UserProviderMaxAggregateInputType
  }

  export type UserProviderGroupByOutputType = {
    id: number
    userId: number
    provider: $Enums.ProviderType
    providerId: string
    accessToken: string | null
    refreshToken: string | null
    createdAt: Date
    _count: UserProviderCountAggregateOutputType | null
    _avg: UserProviderAvgAggregateOutputType | null
    _sum: UserProviderSumAggregateOutputType | null
    _min: UserProviderMinAggregateOutputType | null
    _max: UserProviderMaxAggregateOutputType | null
  }

  type GetUserProviderGroupByPayload<T extends UserProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProviderGroupByOutputType[P]>
            : GetScalarType<T[P], UserProviderGroupByOutputType[P]>
        }
      >
    >


  export type UserProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProvider"]>

  export type UserProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProvider"]>

  export type UserProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProvider"]>

  export type UserProviderSelectScalar = {
    id?: boolean
    userId?: boolean
    provider?: boolean
    providerId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    createdAt?: boolean
  }

  export type UserProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "provider" | "providerId" | "accessToken" | "refreshToken" | "createdAt", ExtArgs["result"]["userProvider"]>
  export type UserProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProvider"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      provider: $Enums.ProviderType
      providerId: string
      accessToken: string | null
      refreshToken: string | null
      createdAt: Date
    }, ExtArgs["result"]["userProvider"]>
    composites: {}
  }

  type UserProviderGetPayload<S extends boolean | null | undefined | UserProviderDefaultArgs> = $Result.GetResult<Prisma.$UserProviderPayload, S>

  type UserProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProviderCountAggregateInputType | true
    }

  export interface UserProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProvider'], meta: { name: 'UserProvider' } }
    /**
     * Find zero or one UserProvider that matches the filter.
     * @param {UserProviderFindUniqueArgs} args - Arguments to find a UserProvider
     * @example
     * // Get one UserProvider
     * const userProvider = await prisma.userProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProviderFindUniqueArgs>(args: SelectSubset<T, UserProviderFindUniqueArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProviderFindUniqueOrThrowArgs} args - Arguments to find a UserProvider
     * @example
     * // Get one UserProvider
     * const userProvider = await prisma.userProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderFindFirstArgs} args - Arguments to find a UserProvider
     * @example
     * // Get one UserProvider
     * const userProvider = await prisma.userProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProviderFindFirstArgs>(args?: SelectSubset<T, UserProviderFindFirstArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderFindFirstOrThrowArgs} args - Arguments to find a UserProvider
     * @example
     * // Get one UserProvider
     * const userProvider = await prisma.userProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProviders
     * const userProviders = await prisma.userProvider.findMany()
     * 
     * // Get first 10 UserProviders
     * const userProviders = await prisma.userProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProviderWithIdOnly = await prisma.userProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProviderFindManyArgs>(args?: SelectSubset<T, UserProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProvider.
     * @param {UserProviderCreateArgs} args - Arguments to create a UserProvider.
     * @example
     * // Create one UserProvider
     * const UserProvider = await prisma.userProvider.create({
     *   data: {
     *     // ... data to create a UserProvider
     *   }
     * })
     * 
     */
    create<T extends UserProviderCreateArgs>(args: SelectSubset<T, UserProviderCreateArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProviders.
     * @param {UserProviderCreateManyArgs} args - Arguments to create many UserProviders.
     * @example
     * // Create many UserProviders
     * const userProvider = await prisma.userProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProviderCreateManyArgs>(args?: SelectSubset<T, UserProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProviders and returns the data saved in the database.
     * @param {UserProviderCreateManyAndReturnArgs} args - Arguments to create many UserProviders.
     * @example
     * // Create many UserProviders
     * const userProvider = await prisma.userProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProviders and only return the `id`
     * const userProviderWithIdOnly = await prisma.userProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProvider.
     * @param {UserProviderDeleteArgs} args - Arguments to delete one UserProvider.
     * @example
     * // Delete one UserProvider
     * const UserProvider = await prisma.userProvider.delete({
     *   where: {
     *     // ... filter to delete one UserProvider
     *   }
     * })
     * 
     */
    delete<T extends UserProviderDeleteArgs>(args: SelectSubset<T, UserProviderDeleteArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProvider.
     * @param {UserProviderUpdateArgs} args - Arguments to update one UserProvider.
     * @example
     * // Update one UserProvider
     * const userProvider = await prisma.userProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProviderUpdateArgs>(args: SelectSubset<T, UserProviderUpdateArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProviders.
     * @param {UserProviderDeleteManyArgs} args - Arguments to filter UserProviders to delete.
     * @example
     * // Delete a few UserProviders
     * const { count } = await prisma.userProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProviderDeleteManyArgs>(args?: SelectSubset<T, UserProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProviders
     * const userProvider = await prisma.userProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProviderUpdateManyArgs>(args: SelectSubset<T, UserProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProviders and returns the data updated in the database.
     * @param {UserProviderUpdateManyAndReturnArgs} args - Arguments to update many UserProviders.
     * @example
     * // Update many UserProviders
     * const userProvider = await prisma.userProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProviders and only return the `id`
     * const userProviderWithIdOnly = await prisma.userProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProvider.
     * @param {UserProviderUpsertArgs} args - Arguments to update or create a UserProvider.
     * @example
     * // Update or create a UserProvider
     * const userProvider = await prisma.userProvider.upsert({
     *   create: {
     *     // ... data to create a UserProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProvider we want to update
     *   }
     * })
     */
    upsert<T extends UserProviderUpsertArgs>(args: SelectSubset<T, UserProviderUpsertArgs<ExtArgs>>): Prisma__UserProviderClient<$Result.GetResult<Prisma.$UserProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderCountArgs} args - Arguments to filter UserProviders to count.
     * @example
     * // Count the number of UserProviders
     * const count = await prisma.userProvider.count({
     *   where: {
     *     // ... the filter for the UserProviders we want to count
     *   }
     * })
    **/
    count<T extends UserProviderCountArgs>(
      args?: Subset<T, UserProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProviderAggregateArgs>(args: Subset<T, UserProviderAggregateArgs>): Prisma.PrismaPromise<GetUserProviderAggregateType<T>>

    /**
     * Group by UserProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProviderGroupByArgs['orderBy'] }
        : { orderBy?: UserProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProvider model
   */
  readonly fields: UserProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProvider model
   */
  interface UserProviderFieldRefs {
    readonly id: FieldRef<"UserProvider", 'Int'>
    readonly userId: FieldRef<"UserProvider", 'Int'>
    readonly provider: FieldRef<"UserProvider", 'ProviderType'>
    readonly providerId: FieldRef<"UserProvider", 'String'>
    readonly accessToken: FieldRef<"UserProvider", 'String'>
    readonly refreshToken: FieldRef<"UserProvider", 'String'>
    readonly createdAt: FieldRef<"UserProvider", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProvider findUnique
   */
  export type UserProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter, which UserProvider to fetch.
     */
    where: UserProviderWhereUniqueInput
  }

  /**
   * UserProvider findUniqueOrThrow
   */
  export type UserProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter, which UserProvider to fetch.
     */
    where: UserProviderWhereUniqueInput
  }

  /**
   * UserProvider findFirst
   */
  export type UserProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter, which UserProvider to fetch.
     */
    where?: UserProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProviders to fetch.
     */
    orderBy?: UserProviderOrderByWithRelationInput | UserProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProviders.
     */
    cursor?: UserProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProviders.
     */
    distinct?: UserProviderScalarFieldEnum | UserProviderScalarFieldEnum[]
  }

  /**
   * UserProvider findFirstOrThrow
   */
  export type UserProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter, which UserProvider to fetch.
     */
    where?: UserProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProviders to fetch.
     */
    orderBy?: UserProviderOrderByWithRelationInput | UserProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProviders.
     */
    cursor?: UserProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProviders.
     */
    distinct?: UserProviderScalarFieldEnum | UserProviderScalarFieldEnum[]
  }

  /**
   * UserProvider findMany
   */
  export type UserProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter, which UserProviders to fetch.
     */
    where?: UserProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProviders to fetch.
     */
    orderBy?: UserProviderOrderByWithRelationInput | UserProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProviders.
     */
    cursor?: UserProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProviders.
     */
    skip?: number
    distinct?: UserProviderScalarFieldEnum | UserProviderScalarFieldEnum[]
  }

  /**
   * UserProvider create
   */
  export type UserProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProvider.
     */
    data: XOR<UserProviderCreateInput, UserProviderUncheckedCreateInput>
  }

  /**
   * UserProvider createMany
   */
  export type UserProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProviders.
     */
    data: UserProviderCreateManyInput | UserProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProvider createManyAndReturn
   */
  export type UserProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * The data used to create many UserProviders.
     */
    data: UserProviderCreateManyInput | UserProviderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProvider update
   */
  export type UserProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProvider.
     */
    data: XOR<UserProviderUpdateInput, UserProviderUncheckedUpdateInput>
    /**
     * Choose, which UserProvider to update.
     */
    where: UserProviderWhereUniqueInput
  }

  /**
   * UserProvider updateMany
   */
  export type UserProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProviders.
     */
    data: XOR<UserProviderUpdateManyMutationInput, UserProviderUncheckedUpdateManyInput>
    /**
     * Filter which UserProviders to update
     */
    where?: UserProviderWhereInput
    /**
     * Limit how many UserProviders to update.
     */
    limit?: number
  }

  /**
   * UserProvider updateManyAndReturn
   */
  export type UserProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * The data used to update UserProviders.
     */
    data: XOR<UserProviderUpdateManyMutationInput, UserProviderUncheckedUpdateManyInput>
    /**
     * Filter which UserProviders to update
     */
    where?: UserProviderWhereInput
    /**
     * Limit how many UserProviders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProvider upsert
   */
  export type UserProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProvider to update in case it exists.
     */
    where: UserProviderWhereUniqueInput
    /**
     * In case the UserProvider found by the `where` argument doesn't exist, create a new UserProvider with this data.
     */
    create: XOR<UserProviderCreateInput, UserProviderUncheckedCreateInput>
    /**
     * In case the UserProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProviderUpdateInput, UserProviderUncheckedUpdateInput>
  }

  /**
   * UserProvider delete
   */
  export type UserProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
    /**
     * Filter which UserProvider to delete.
     */
    where: UserProviderWhereUniqueInput
  }

  /**
   * UserProvider deleteMany
   */
  export type UserProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProviders to delete
     */
    where?: UserProviderWhereInput
    /**
     * Limit how many UserProviders to delete.
     */
    limit?: number
  }

  /**
   * UserProvider without action
   */
  export type UserProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProvider
     */
    select?: UserProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProvider
     */
    omit?: UserProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProviderInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    location: string | null
    description: string | null
    website: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    location: string | null
    description: string | null
    website: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    location: number
    description: number
    website: number
    logo: number
    createdAt: number
    updatedAt: number
    adminId: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    location?: true
    description?: true
    website?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    location?: true
    description?: true
    website?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    location?: true
    description?: true
    website?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    location: string | null
    description: string | null
    website: string | null
    logo: string | null
    createdAt: Date
    updatedAt: Date
    adminId: number | null
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    location?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    admin?: boolean | Company$adminArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    employments?: boolean | Company$employmentsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    location?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    admin?: boolean | Company$adminArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    location?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    admin?: boolean | Company$adminArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    location?: boolean
    description?: boolean
    website?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "location" | "description" | "website" | "logo" | "createdAt" | "updatedAt" | "adminId", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | Company$adminArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    employments?: boolean | Company$employmentsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | Company$adminArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | Company$adminArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs> | null
      jobs: Prisma.$JobPayload<ExtArgs>[]
      employments: Prisma.$EmploymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      location: string | null
      description: string | null
      website: string | null
      logo: string | null
      createdAt: Date
      updatedAt: Date
      adminId: number | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends Company$adminArgs<ExtArgs> = {}>(args?: Subset<T, Company$adminArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    jobs<T extends Company$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employments<T extends Company$employmentsArgs<ExtArgs> = {}>(args?: Subset<T, Company$employmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly name: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly location: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly logo: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly adminId: FieldRef<"Company", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.admin
   */
  export type Company$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Company.jobs
   */
  export type Company$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Company.employments
   */
  export type Company$employmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    where?: EmploymentWhereInput
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    cursor?: EmploymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    salaryMin: number | null
    salaryMax: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    salaryMin: number | null
    salaryMax: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    title: string | null
    description: string | null
    category: string | null
    city: string | null
    salaryMin: number | null
    salaryMax: number | null
    banner: string | null
    deadline: Date | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    title: string | null
    description: string | null
    category: string | null
    city: string | null
    salaryMin: number | null
    salaryMax: number | null
    banner: string | null
    deadline: Date | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    companyId: number
    title: number
    description: number
    category: number
    city: number
    salaryMin: number
    salaryMax: number
    tags: number
    banner: number
    deadline: number
    isPublished: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    companyId?: true
    salaryMin?: true
    salaryMax?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    companyId?: true
    salaryMin?: true
    salaryMax?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    category?: true
    city?: true
    salaryMin?: true
    salaryMax?: true
    banner?: true
    deadline?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    category?: true
    city?: true
    salaryMin?: true
    salaryMax?: true
    banner?: true
    deadline?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    description?: true
    category?: true
    city?: true
    salaryMin?: true
    salaryMax?: true
    tags?: true
    banner?: true
    deadline?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin: number | null
    salaryMax: number | null
    tags: string[]
    banner: string | null
    deadline: Date | null
    isPublished: boolean
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    city?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    tags?: boolean
    banner?: boolean
    deadline?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    preselectionTests?: boolean | Job$preselectionTestsArgs<ExtArgs>
    savedBy?: boolean | Job$savedByArgs<ExtArgs>
    shares?: boolean | Job$sharesArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    city?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    tags?: boolean
    banner?: boolean
    deadline?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    city?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    tags?: boolean
    banner?: boolean
    deadline?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    companyId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    city?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    tags?: boolean
    banner?: boolean
    deadline?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "title" | "description" | "category" | "city" | "salaryMin" | "salaryMax" | "tags" | "banner" | "deadline" | "isPublished" | "createdAt" | "updatedAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    preselectionTests?: boolean | Job$preselectionTestsArgs<ExtArgs>
    savedBy?: boolean | Job$savedByArgs<ExtArgs>
    shares?: boolean | Job$sharesArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      preselectionTests: Prisma.$PreselectionTestPayload<ExtArgs>[]
      savedBy: Prisma.$SavedJobPayload<ExtArgs>[]
      shares: Prisma.$JobSharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      title: string
      description: string
      category: string
      city: string
      salaryMin: number | null
      salaryMax: number | null
      tags: string[]
      banner: string | null
      deadline: Date | null
      isPublished: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends Job$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Job$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preselectionTests<T extends Job$preselectionTestsArgs<ExtArgs> = {}>(args?: Subset<T, Job$preselectionTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedBy<T extends Job$savedByArgs<ExtArgs> = {}>(args?: Subset<T, Job$savedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shares<T extends Job$sharesArgs<ExtArgs> = {}>(args?: Subset<T, Job$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'Int'>
    readonly companyId: FieldRef<"Job", 'Int'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly category: FieldRef<"Job", 'String'>
    readonly city: FieldRef<"Job", 'String'>
    readonly salaryMin: FieldRef<"Job", 'Int'>
    readonly salaryMax: FieldRef<"Job", 'Int'>
    readonly tags: FieldRef<"Job", 'String[]'>
    readonly banner: FieldRef<"Job", 'String'>
    readonly deadline: FieldRef<"Job", 'DateTime'>
    readonly isPublished: FieldRef<"Job", 'Boolean'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.applications
   */
  export type Job$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Job.preselectionTests
   */
  export type Job$preselectionTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    where?: PreselectionTestWhereInput
    orderBy?: PreselectionTestOrderByWithRelationInput | PreselectionTestOrderByWithRelationInput[]
    cursor?: PreselectionTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreselectionTestScalarFieldEnum | PreselectionTestScalarFieldEnum[]
  }

  /**
   * Job.savedBy
   */
  export type Job$savedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    where?: SavedJobWhereInput
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    cursor?: SavedJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedJobScalarFieldEnum | SavedJobScalarFieldEnum[]
  }

  /**
   * Job.shares
   */
  export type Job$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    where?: JobShareWhereInput
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    cursor?: JobShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobShareScalarFieldEnum | JobShareScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    expectedSalary: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    expectedSalary: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    cvFile: string | null
    expectedSalary: number | null
    status: $Enums.ApplicationStatus | null
    reviewNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    cvFile: string | null
    expectedSalary: number | null
    status: $Enums.ApplicationStatus | null
    reviewNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    userId: number
    jobId: number
    cvFile: number
    expectedSalary: number
    status: number
    reviewNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    expectedSalary?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    expectedSalary?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    cvFile?: true
    expectedSalary?: true
    status?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    cvFile?: true
    expectedSalary?: true
    status?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    cvFile?: true
    expectedSalary?: true
    status?: true
    reviewNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: number
    userId: number
    jobId: number
    cvFile: string
    expectedSalary: number | null
    status: $Enums.ApplicationStatus
    reviewNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    cvFile?: boolean
    expectedSalary?: boolean
    status?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    interviews?: boolean | Application$interviewsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    cvFile?: boolean
    expectedSalary?: boolean
    status?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    cvFile?: boolean
    expectedSalary?: boolean
    status?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    userId?: boolean
    jobId?: boolean
    cvFile?: boolean
    expectedSalary?: boolean
    status?: boolean
    reviewNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "jobId" | "cvFile" | "expectedSalary" | "status" | "reviewNote" | "createdAt" | "updatedAt", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
    interviews?: boolean | Application$interviewsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      jobId: number
      cvFile: string
      expectedSalary: number | null
      status: $Enums.ApplicationStatus
      reviewNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications and returns the data updated in the database.
     * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interviews<T extends Application$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Application$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'Int'>
    readonly userId: FieldRef<"Application", 'Int'>
    readonly jobId: FieldRef<"Application", 'Int'>
    readonly cvFile: FieldRef<"Application", 'String'>
    readonly expectedSalary: FieldRef<"Application", 'Int'>
    readonly status: FieldRef<"Application", 'ApplicationStatus'>
    readonly reviewNote: FieldRef<"Application", 'String'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application updateManyAndReturn
   */
  export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.interviews
   */
  export type Application$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model SavedJob
   */

  export type AggregateSavedJob = {
    _count: SavedJobCountAggregateOutputType | null
    _avg: SavedJobAvgAggregateOutputType | null
    _sum: SavedJobSumAggregateOutputType | null
    _min: SavedJobMinAggregateOutputType | null
    _max: SavedJobMaxAggregateOutputType | null
  }

  export type SavedJobAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
  }

  export type SavedJobSumAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
  }

  export type SavedJobMinAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    createdAt: Date | null
  }

  export type SavedJobMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    createdAt: Date | null
  }

  export type SavedJobCountAggregateOutputType = {
    id: number
    userId: number
    jobId: number
    createdAt: number
    _all: number
  }


  export type SavedJobAvgAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
  }

  export type SavedJobSumAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
  }

  export type SavedJobMinAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    createdAt?: true
  }

  export type SavedJobMaxAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    createdAt?: true
  }

  export type SavedJobCountAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    createdAt?: true
    _all?: true
  }

  export type SavedJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedJob to aggregate.
     */
    where?: SavedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedJobs
    **/
    _count?: true | SavedJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavedJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavedJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedJobMaxAggregateInputType
  }

  export type GetSavedJobAggregateType<T extends SavedJobAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedJob[P]>
      : GetScalarType<T[P], AggregateSavedJob[P]>
  }




  export type SavedJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedJobWhereInput
    orderBy?: SavedJobOrderByWithAggregationInput | SavedJobOrderByWithAggregationInput[]
    by: SavedJobScalarFieldEnum[] | SavedJobScalarFieldEnum
    having?: SavedJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedJobCountAggregateInputType | true
    _avg?: SavedJobAvgAggregateInputType
    _sum?: SavedJobSumAggregateInputType
    _min?: SavedJobMinAggregateInputType
    _max?: SavedJobMaxAggregateInputType
  }

  export type SavedJobGroupByOutputType = {
    id: number
    userId: number
    jobId: number
    createdAt: Date
    _count: SavedJobCountAggregateOutputType | null
    _avg: SavedJobAvgAggregateOutputType | null
    _sum: SavedJobSumAggregateOutputType | null
    _min: SavedJobMinAggregateOutputType | null
    _max: SavedJobMaxAggregateOutputType | null
  }

  type GetSavedJobGroupByPayload<T extends SavedJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedJobGroupByOutputType[P]>
            : GetScalarType<T[P], SavedJobGroupByOutputType[P]>
        }
      >
    >


  export type SavedJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedJob"]>

  export type SavedJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedJob"]>

  export type SavedJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedJob"]>

  export type SavedJobSelectScalar = {
    id?: boolean
    userId?: boolean
    jobId?: boolean
    createdAt?: boolean
  }

  export type SavedJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "jobId" | "createdAt", ExtArgs["result"]["savedJob"]>
  export type SavedJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type SavedJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type SavedJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $SavedJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedJob"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      jobId: number
      createdAt: Date
    }, ExtArgs["result"]["savedJob"]>
    composites: {}
  }

  type SavedJobGetPayload<S extends boolean | null | undefined | SavedJobDefaultArgs> = $Result.GetResult<Prisma.$SavedJobPayload, S>

  type SavedJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SavedJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SavedJobCountAggregateInputType | true
    }

  export interface SavedJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedJob'], meta: { name: 'SavedJob' } }
    /**
     * Find zero or one SavedJob that matches the filter.
     * @param {SavedJobFindUniqueArgs} args - Arguments to find a SavedJob
     * @example
     * // Get one SavedJob
     * const savedJob = await prisma.savedJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedJobFindUniqueArgs>(args: SelectSubset<T, SavedJobFindUniqueArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SavedJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SavedJobFindUniqueOrThrowArgs} args - Arguments to find a SavedJob
     * @example
     * // Get one SavedJob
     * const savedJob = await prisma.savedJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedJobFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobFindFirstArgs} args - Arguments to find a SavedJob
     * @example
     * // Get one SavedJob
     * const savedJob = await prisma.savedJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedJobFindFirstArgs>(args?: SelectSubset<T, SavedJobFindFirstArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobFindFirstOrThrowArgs} args - Arguments to find a SavedJob
     * @example
     * // Get one SavedJob
     * const savedJob = await prisma.savedJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedJobFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SavedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedJobs
     * const savedJobs = await prisma.savedJob.findMany()
     * 
     * // Get first 10 SavedJobs
     * const savedJobs = await prisma.savedJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedJobWithIdOnly = await prisma.savedJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedJobFindManyArgs>(args?: SelectSubset<T, SavedJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SavedJob.
     * @param {SavedJobCreateArgs} args - Arguments to create a SavedJob.
     * @example
     * // Create one SavedJob
     * const SavedJob = await prisma.savedJob.create({
     *   data: {
     *     // ... data to create a SavedJob
     *   }
     * })
     * 
     */
    create<T extends SavedJobCreateArgs>(args: SelectSubset<T, SavedJobCreateArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SavedJobs.
     * @param {SavedJobCreateManyArgs} args - Arguments to create many SavedJobs.
     * @example
     * // Create many SavedJobs
     * const savedJob = await prisma.savedJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedJobCreateManyArgs>(args?: SelectSubset<T, SavedJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedJobs and returns the data saved in the database.
     * @param {SavedJobCreateManyAndReturnArgs} args - Arguments to create many SavedJobs.
     * @example
     * // Create many SavedJobs
     * const savedJob = await prisma.savedJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedJobs and only return the `id`
     * const savedJobWithIdOnly = await prisma.savedJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedJobCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SavedJob.
     * @param {SavedJobDeleteArgs} args - Arguments to delete one SavedJob.
     * @example
     * // Delete one SavedJob
     * const SavedJob = await prisma.savedJob.delete({
     *   where: {
     *     // ... filter to delete one SavedJob
     *   }
     * })
     * 
     */
    delete<T extends SavedJobDeleteArgs>(args: SelectSubset<T, SavedJobDeleteArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SavedJob.
     * @param {SavedJobUpdateArgs} args - Arguments to update one SavedJob.
     * @example
     * // Update one SavedJob
     * const savedJob = await prisma.savedJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedJobUpdateArgs>(args: SelectSubset<T, SavedJobUpdateArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SavedJobs.
     * @param {SavedJobDeleteManyArgs} args - Arguments to filter SavedJobs to delete.
     * @example
     * // Delete a few SavedJobs
     * const { count } = await prisma.savedJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedJobDeleteManyArgs>(args?: SelectSubset<T, SavedJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedJobs
     * const savedJob = await prisma.savedJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedJobUpdateManyArgs>(args: SelectSubset<T, SavedJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedJobs and returns the data updated in the database.
     * @param {SavedJobUpdateManyAndReturnArgs} args - Arguments to update many SavedJobs.
     * @example
     * // Update many SavedJobs
     * const savedJob = await prisma.savedJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SavedJobs and only return the `id`
     * const savedJobWithIdOnly = await prisma.savedJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SavedJobUpdateManyAndReturnArgs>(args: SelectSubset<T, SavedJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SavedJob.
     * @param {SavedJobUpsertArgs} args - Arguments to update or create a SavedJob.
     * @example
     * // Update or create a SavedJob
     * const savedJob = await prisma.savedJob.upsert({
     *   create: {
     *     // ... data to create a SavedJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedJob we want to update
     *   }
     * })
     */
    upsert<T extends SavedJobUpsertArgs>(args: SelectSubset<T, SavedJobUpsertArgs<ExtArgs>>): Prisma__SavedJobClient<$Result.GetResult<Prisma.$SavedJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SavedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobCountArgs} args - Arguments to filter SavedJobs to count.
     * @example
     * // Count the number of SavedJobs
     * const count = await prisma.savedJob.count({
     *   where: {
     *     // ... the filter for the SavedJobs we want to count
     *   }
     * })
    **/
    count<T extends SavedJobCountArgs>(
      args?: Subset<T, SavedJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedJobAggregateArgs>(args: Subset<T, SavedJobAggregateArgs>): Prisma.PrismaPromise<GetSavedJobAggregateType<T>>

    /**
     * Group by SavedJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedJobGroupByArgs['orderBy'] }
        : { orderBy?: SavedJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedJob model
   */
  readonly fields: SavedJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedJob model
   */
  interface SavedJobFieldRefs {
    readonly id: FieldRef<"SavedJob", 'Int'>
    readonly userId: FieldRef<"SavedJob", 'Int'>
    readonly jobId: FieldRef<"SavedJob", 'Int'>
    readonly createdAt: FieldRef<"SavedJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SavedJob findUnique
   */
  export type SavedJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter, which SavedJob to fetch.
     */
    where: SavedJobWhereUniqueInput
  }

  /**
   * SavedJob findUniqueOrThrow
   */
  export type SavedJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter, which SavedJob to fetch.
     */
    where: SavedJobWhereUniqueInput
  }

  /**
   * SavedJob findFirst
   */
  export type SavedJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter, which SavedJob to fetch.
     */
    where?: SavedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedJobs.
     */
    cursor?: SavedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedJobs.
     */
    distinct?: SavedJobScalarFieldEnum | SavedJobScalarFieldEnum[]
  }

  /**
   * SavedJob findFirstOrThrow
   */
  export type SavedJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter, which SavedJob to fetch.
     */
    where?: SavedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedJobs.
     */
    cursor?: SavedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedJobs.
     */
    distinct?: SavedJobScalarFieldEnum | SavedJobScalarFieldEnum[]
  }

  /**
   * SavedJob findMany
   */
  export type SavedJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter, which SavedJobs to fetch.
     */
    where?: SavedJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedJobs to fetch.
     */
    orderBy?: SavedJobOrderByWithRelationInput | SavedJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedJobs.
     */
    cursor?: SavedJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedJobs.
     */
    skip?: number
    distinct?: SavedJobScalarFieldEnum | SavedJobScalarFieldEnum[]
  }

  /**
   * SavedJob create
   */
  export type SavedJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedJob.
     */
    data: XOR<SavedJobCreateInput, SavedJobUncheckedCreateInput>
  }

  /**
   * SavedJob createMany
   */
  export type SavedJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedJobs.
     */
    data: SavedJobCreateManyInput | SavedJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedJob createManyAndReturn
   */
  export type SavedJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * The data used to create many SavedJobs.
     */
    data: SavedJobCreateManyInput | SavedJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedJob update
   */
  export type SavedJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedJob.
     */
    data: XOR<SavedJobUpdateInput, SavedJobUncheckedUpdateInput>
    /**
     * Choose, which SavedJob to update.
     */
    where: SavedJobWhereUniqueInput
  }

  /**
   * SavedJob updateMany
   */
  export type SavedJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedJobs.
     */
    data: XOR<SavedJobUpdateManyMutationInput, SavedJobUncheckedUpdateManyInput>
    /**
     * Filter which SavedJobs to update
     */
    where?: SavedJobWhereInput
    /**
     * Limit how many SavedJobs to update.
     */
    limit?: number
  }

  /**
   * SavedJob updateManyAndReturn
   */
  export type SavedJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * The data used to update SavedJobs.
     */
    data: XOR<SavedJobUpdateManyMutationInput, SavedJobUncheckedUpdateManyInput>
    /**
     * Filter which SavedJobs to update
     */
    where?: SavedJobWhereInput
    /**
     * Limit how many SavedJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedJob upsert
   */
  export type SavedJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedJob to update in case it exists.
     */
    where: SavedJobWhereUniqueInput
    /**
     * In case the SavedJob found by the `where` argument doesn't exist, create a new SavedJob with this data.
     */
    create: XOR<SavedJobCreateInput, SavedJobUncheckedCreateInput>
    /**
     * In case the SavedJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedJobUpdateInput, SavedJobUncheckedUpdateInput>
  }

  /**
   * SavedJob delete
   */
  export type SavedJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
    /**
     * Filter which SavedJob to delete.
     */
    where: SavedJobWhereUniqueInput
  }

  /**
   * SavedJob deleteMany
   */
  export type SavedJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedJobs to delete
     */
    where?: SavedJobWhereInput
    /**
     * Limit how many SavedJobs to delete.
     */
    limit?: number
  }

  /**
   * SavedJob without action
   */
  export type SavedJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedJob
     */
    select?: SavedJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedJob
     */
    omit?: SavedJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedJobInclude<ExtArgs> | null
  }


  /**
   * Model Interview
   */

  export type AggregateInterview = {
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  export type InterviewAvgAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type InterviewSumAggregateOutputType = {
    id: number | null
    applicationId: number | null
  }

  export type InterviewMinAggregateOutputType = {
    id: number | null
    applicationId: number | null
    scheduleDate: Date | null
    locationOrLink: string | null
    notes: string | null
    status: $Enums.InterviewStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    reminderSentAt: Date | null
  }

  export type InterviewMaxAggregateOutputType = {
    id: number | null
    applicationId: number | null
    scheduleDate: Date | null
    locationOrLink: string | null
    notes: string | null
    status: $Enums.InterviewStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    reminderSentAt: Date | null
  }

  export type InterviewCountAggregateOutputType = {
    id: number
    applicationId: number
    scheduleDate: number
    locationOrLink: number
    notes: number
    status: number
    createdAt: number
    updatedAt: number
    reminderSentAt: number
    _all: number
  }


  export type InterviewAvgAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type InterviewSumAggregateInputType = {
    id?: true
    applicationId?: true
  }

  export type InterviewMinAggregateInputType = {
    id?: true
    applicationId?: true
    scheduleDate?: true
    locationOrLink?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    reminderSentAt?: true
  }

  export type InterviewMaxAggregateInputType = {
    id?: true
    applicationId?: true
    scheduleDate?: true
    locationOrLink?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    reminderSentAt?: true
  }

  export type InterviewCountAggregateInputType = {
    id?: true
    applicationId?: true
    scheduleDate?: true
    locationOrLink?: true
    notes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    reminderSentAt?: true
    _all?: true
  }

  export type InterviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interview to aggregate.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interviews
    **/
    _count?: true | InterviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewMaxAggregateInputType
  }

  export type GetInterviewAggregateType<T extends InterviewAggregateArgs> = {
        [P in keyof T & keyof AggregateInterview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterview[P]>
      : GetScalarType<T[P], AggregateInterview[P]>
  }




  export type InterviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithAggregationInput | InterviewOrderByWithAggregationInput[]
    by: InterviewScalarFieldEnum[] | InterviewScalarFieldEnum
    having?: InterviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewCountAggregateInputType | true
    _avg?: InterviewAvgAggregateInputType
    _sum?: InterviewSumAggregateInputType
    _min?: InterviewMinAggregateInputType
    _max?: InterviewMaxAggregateInputType
  }

  export type InterviewGroupByOutputType = {
    id: number
    applicationId: number
    scheduleDate: Date
    locationOrLink: string | null
    notes: string | null
    status: $Enums.InterviewStatus
    createdAt: Date
    updatedAt: Date
    reminderSentAt: Date | null
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  type GetInterviewGroupByPayload<T extends InterviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewGroupByOutputType[P]>
        }
      >
    >


  export type InterviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    scheduleDate?: boolean
    locationOrLink?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reminderSentAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    scheduleDate?: boolean
    locationOrLink?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reminderSentAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    scheduleDate?: boolean
    locationOrLink?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reminderSentAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>

  export type InterviewSelectScalar = {
    id?: boolean
    applicationId?: boolean
    scheduleDate?: boolean
    locationOrLink?: boolean
    notes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reminderSentAt?: boolean
  }

  export type InterviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "scheduleDate" | "locationOrLink" | "notes" | "status" | "createdAt" | "updatedAt" | "reminderSentAt", ExtArgs["result"]["interview"]>
  export type InterviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type InterviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type InterviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $InterviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interview"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      applicationId: number
      scheduleDate: Date
      locationOrLink: string | null
      notes: string | null
      status: $Enums.InterviewStatus
      createdAt: Date
      updatedAt: Date
      reminderSentAt: Date | null
    }, ExtArgs["result"]["interview"]>
    composites: {}
  }

  type InterviewGetPayload<S extends boolean | null | undefined | InterviewDefaultArgs> = $Result.GetResult<Prisma.$InterviewPayload, S>

  type InterviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterviewCountAggregateInputType | true
    }

  export interface InterviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interview'], meta: { name: 'Interview' } }
    /**
     * Find zero or one Interview that matches the filter.
     * @param {InterviewFindUniqueArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterviewFindUniqueArgs>(args: SelectSubset<T, InterviewFindUniqueArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterviewFindUniqueOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterviewFindUniqueOrThrowArgs>(args: SelectSubset<T, InterviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterviewFindFirstArgs>(args?: SelectSubset<T, InterviewFindFirstArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterviewFindFirstOrThrowArgs>(args?: SelectSubset<T, InterviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interviews
     * const interviews = await prisma.interview.findMany()
     * 
     * // Get first 10 Interviews
     * const interviews = await prisma.interview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewWithIdOnly = await prisma.interview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterviewFindManyArgs>(args?: SelectSubset<T, InterviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interview.
     * @param {InterviewCreateArgs} args - Arguments to create a Interview.
     * @example
     * // Create one Interview
     * const Interview = await prisma.interview.create({
     *   data: {
     *     // ... data to create a Interview
     *   }
     * })
     * 
     */
    create<T extends InterviewCreateArgs>(args: SelectSubset<T, InterviewCreateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interviews.
     * @param {InterviewCreateManyArgs} args - Arguments to create many Interviews.
     * @example
     * // Create many Interviews
     * const interview = await prisma.interview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterviewCreateManyArgs>(args?: SelectSubset<T, InterviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interviews and returns the data saved in the database.
     * @param {InterviewCreateManyAndReturnArgs} args - Arguments to create many Interviews.
     * @example
     * // Create many Interviews
     * const interview = await prisma.interview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interviews and only return the `id`
     * const interviewWithIdOnly = await prisma.interview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterviewCreateManyAndReturnArgs>(args?: SelectSubset<T, InterviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Interview.
     * @param {InterviewDeleteArgs} args - Arguments to delete one Interview.
     * @example
     * // Delete one Interview
     * const Interview = await prisma.interview.delete({
     *   where: {
     *     // ... filter to delete one Interview
     *   }
     * })
     * 
     */
    delete<T extends InterviewDeleteArgs>(args: SelectSubset<T, InterviewDeleteArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interview.
     * @param {InterviewUpdateArgs} args - Arguments to update one Interview.
     * @example
     * // Update one Interview
     * const interview = await prisma.interview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterviewUpdateArgs>(args: SelectSubset<T, InterviewUpdateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interviews.
     * @param {InterviewDeleteManyArgs} args - Arguments to filter Interviews to delete.
     * @example
     * // Delete a few Interviews
     * const { count } = await prisma.interview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterviewDeleteManyArgs>(args?: SelectSubset<T, InterviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterviewUpdateManyArgs>(args: SelectSubset<T, InterviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews and returns the data updated in the database.
     * @param {InterviewUpdateManyAndReturnArgs} args - Arguments to update many Interviews.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Interviews and only return the `id`
     * const interviewWithIdOnly = await prisma.interview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterviewUpdateManyAndReturnArgs>(args: SelectSubset<T, InterviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Interview.
     * @param {InterviewUpsertArgs} args - Arguments to update or create a Interview.
     * @example
     * // Update or create a Interview
     * const interview = await prisma.interview.upsert({
     *   create: {
     *     // ... data to create a Interview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interview we want to update
     *   }
     * })
     */
    upsert<T extends InterviewUpsertArgs>(args: SelectSubset<T, InterviewUpsertArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewCountArgs} args - Arguments to filter Interviews to count.
     * @example
     * // Count the number of Interviews
     * const count = await prisma.interview.count({
     *   where: {
     *     // ... the filter for the Interviews we want to count
     *   }
     * })
    **/
    count<T extends InterviewCountArgs>(
      args?: Subset<T, InterviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewAggregateArgs>(args: Subset<T, InterviewAggregateArgs>): Prisma.PrismaPromise<GetInterviewAggregateType<T>>

    /**
     * Group by Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewGroupByArgs['orderBy'] }
        : { orderBy?: InterviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interview model
   */
  readonly fields: InterviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interview model
   */
  interface InterviewFieldRefs {
    readonly id: FieldRef<"Interview", 'Int'>
    readonly applicationId: FieldRef<"Interview", 'Int'>
    readonly scheduleDate: FieldRef<"Interview", 'DateTime'>
    readonly locationOrLink: FieldRef<"Interview", 'String'>
    readonly notes: FieldRef<"Interview", 'String'>
    readonly status: FieldRef<"Interview", 'InterviewStatus'>
    readonly createdAt: FieldRef<"Interview", 'DateTime'>
    readonly updatedAt: FieldRef<"Interview", 'DateTime'>
    readonly reminderSentAt: FieldRef<"Interview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interview findUnique
   */
  export type InterviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findUniqueOrThrow
   */
  export type InterviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findFirst
   */
  export type InterviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findFirstOrThrow
   */
  export type InterviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findMany
   */
  export type InterviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interviews to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview create
   */
  export type InterviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Interview.
     */
    data: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
  }

  /**
   * Interview createMany
   */
  export type InterviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interviews.
     */
    data: InterviewCreateManyInput | InterviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interview createManyAndReturn
   */
  export type InterviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * The data used to create many Interviews.
     */
    data: InterviewCreateManyInput | InterviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interview update
   */
  export type InterviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Interview.
     */
    data: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
    /**
     * Choose, which Interview to update.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview updateMany
   */
  export type InterviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to update.
     */
    limit?: number
  }

  /**
   * Interview updateManyAndReturn
   */
  export type InterviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interview upsert
   */
  export type InterviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Interview to update in case it exists.
     */
    where: InterviewWhereUniqueInput
    /**
     * In case the Interview found by the `where` argument doesn't exist, create a new Interview with this data.
     */
    create: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
    /**
     * In case the Interview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
  }

  /**
   * Interview delete
   */
  export type InterviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter which Interview to delete.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview deleteMany
   */
  export type InterviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interviews to delete
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to delete.
     */
    limit?: number
  }

  /**
   * Interview without action
   */
  export type InterviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
  }


  /**
   * Model PreselectionTest
   */

  export type AggregatePreselectionTest = {
    _count: PreselectionTestCountAggregateOutputType | null
    _avg: PreselectionTestAvgAggregateOutputType | null
    _sum: PreselectionTestSumAggregateOutputType | null
    _min: PreselectionTestMinAggregateOutputType | null
    _max: PreselectionTestMaxAggregateOutputType | null
  }

  export type PreselectionTestAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    passingScore: number | null
  }

  export type PreselectionTestSumAggregateOutputType = {
    id: number | null
    jobId: number | null
    passingScore: number | null
  }

  export type PreselectionTestMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    isActive: boolean | null
    passingScore: number | null
    createdAt: Date | null
  }

  export type PreselectionTestMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    isActive: boolean | null
    passingScore: number | null
    createdAt: Date | null
  }

  export type PreselectionTestCountAggregateOutputType = {
    id: number
    jobId: number
    isActive: number
    passingScore: number
    createdAt: number
    _all: number
  }


  export type PreselectionTestAvgAggregateInputType = {
    id?: true
    jobId?: true
    passingScore?: true
  }

  export type PreselectionTestSumAggregateInputType = {
    id?: true
    jobId?: true
    passingScore?: true
  }

  export type PreselectionTestMinAggregateInputType = {
    id?: true
    jobId?: true
    isActive?: true
    passingScore?: true
    createdAt?: true
  }

  export type PreselectionTestMaxAggregateInputType = {
    id?: true
    jobId?: true
    isActive?: true
    passingScore?: true
    createdAt?: true
  }

  export type PreselectionTestCountAggregateInputType = {
    id?: true
    jobId?: true
    isActive?: true
    passingScore?: true
    createdAt?: true
    _all?: true
  }

  export type PreselectionTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionTest to aggregate.
     */
    where?: PreselectionTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionTests to fetch.
     */
    orderBy?: PreselectionTestOrderByWithRelationInput | PreselectionTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreselectionTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreselectionTests
    **/
    _count?: true | PreselectionTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreselectionTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreselectionTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreselectionTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreselectionTestMaxAggregateInputType
  }

  export type GetPreselectionTestAggregateType<T extends PreselectionTestAggregateArgs> = {
        [P in keyof T & keyof AggregatePreselectionTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreselectionTest[P]>
      : GetScalarType<T[P], AggregatePreselectionTest[P]>
  }




  export type PreselectionTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionTestWhereInput
    orderBy?: PreselectionTestOrderByWithAggregationInput | PreselectionTestOrderByWithAggregationInput[]
    by: PreselectionTestScalarFieldEnum[] | PreselectionTestScalarFieldEnum
    having?: PreselectionTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreselectionTestCountAggregateInputType | true
    _avg?: PreselectionTestAvgAggregateInputType
    _sum?: PreselectionTestSumAggregateInputType
    _min?: PreselectionTestMinAggregateInputType
    _max?: PreselectionTestMaxAggregateInputType
  }

  export type PreselectionTestGroupByOutputType = {
    id: number
    jobId: number
    isActive: boolean
    passingScore: number | null
    createdAt: Date
    _count: PreselectionTestCountAggregateOutputType | null
    _avg: PreselectionTestAvgAggregateOutputType | null
    _sum: PreselectionTestSumAggregateOutputType | null
    _min: PreselectionTestMinAggregateOutputType | null
    _max: PreselectionTestMaxAggregateOutputType | null
  }

  type GetPreselectionTestGroupByPayload<T extends PreselectionTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreselectionTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreselectionTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreselectionTestGroupByOutputType[P]>
            : GetScalarType<T[P], PreselectionTestGroupByOutputType[P]>
        }
      >
    >


  export type PreselectionTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isActive?: boolean
    passingScore?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    questions?: boolean | PreselectionTest$questionsArgs<ExtArgs>
    results?: boolean | PreselectionTest$resultsArgs<ExtArgs>
    _count?: boolean | PreselectionTestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionTest"]>

  export type PreselectionTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isActive?: boolean
    passingScore?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionTest"]>

  export type PreselectionTestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isActive?: boolean
    passingScore?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionTest"]>

  export type PreselectionTestSelectScalar = {
    id?: boolean
    jobId?: boolean
    isActive?: boolean
    passingScore?: boolean
    createdAt?: boolean
  }

  export type PreselectionTestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "isActive" | "passingScore" | "createdAt", ExtArgs["result"]["preselectionTest"]>
  export type PreselectionTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    questions?: boolean | PreselectionTest$questionsArgs<ExtArgs>
    results?: boolean | PreselectionTest$resultsArgs<ExtArgs>
    _count?: boolean | PreselectionTestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreselectionTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type PreselectionTestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $PreselectionTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreselectionTest"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      questions: Prisma.$PreselectionQuestionPayload<ExtArgs>[]
      results: Prisma.$PreselectionResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      isActive: boolean
      passingScore: number | null
      createdAt: Date
    }, ExtArgs["result"]["preselectionTest"]>
    composites: {}
  }

  type PreselectionTestGetPayload<S extends boolean | null | undefined | PreselectionTestDefaultArgs> = $Result.GetResult<Prisma.$PreselectionTestPayload, S>

  type PreselectionTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreselectionTestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreselectionTestCountAggregateInputType | true
    }

  export interface PreselectionTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreselectionTest'], meta: { name: 'PreselectionTest' } }
    /**
     * Find zero or one PreselectionTest that matches the filter.
     * @param {PreselectionTestFindUniqueArgs} args - Arguments to find a PreselectionTest
     * @example
     * // Get one PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreselectionTestFindUniqueArgs>(args: SelectSubset<T, PreselectionTestFindUniqueArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreselectionTest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreselectionTestFindUniqueOrThrowArgs} args - Arguments to find a PreselectionTest
     * @example
     * // Get one PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreselectionTestFindUniqueOrThrowArgs>(args: SelectSubset<T, PreselectionTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestFindFirstArgs} args - Arguments to find a PreselectionTest
     * @example
     * // Get one PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreselectionTestFindFirstArgs>(args?: SelectSubset<T, PreselectionTestFindFirstArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestFindFirstOrThrowArgs} args - Arguments to find a PreselectionTest
     * @example
     * // Get one PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreselectionTestFindFirstOrThrowArgs>(args?: SelectSubset<T, PreselectionTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreselectionTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreselectionTests
     * const preselectionTests = await prisma.preselectionTest.findMany()
     * 
     * // Get first 10 PreselectionTests
     * const preselectionTests = await prisma.preselectionTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preselectionTestWithIdOnly = await prisma.preselectionTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreselectionTestFindManyArgs>(args?: SelectSubset<T, PreselectionTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreselectionTest.
     * @param {PreselectionTestCreateArgs} args - Arguments to create a PreselectionTest.
     * @example
     * // Create one PreselectionTest
     * const PreselectionTest = await prisma.preselectionTest.create({
     *   data: {
     *     // ... data to create a PreselectionTest
     *   }
     * })
     * 
     */
    create<T extends PreselectionTestCreateArgs>(args: SelectSubset<T, PreselectionTestCreateArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreselectionTests.
     * @param {PreselectionTestCreateManyArgs} args - Arguments to create many PreselectionTests.
     * @example
     * // Create many PreselectionTests
     * const preselectionTest = await prisma.preselectionTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreselectionTestCreateManyArgs>(args?: SelectSubset<T, PreselectionTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreselectionTests and returns the data saved in the database.
     * @param {PreselectionTestCreateManyAndReturnArgs} args - Arguments to create many PreselectionTests.
     * @example
     * // Create many PreselectionTests
     * const preselectionTest = await prisma.preselectionTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreselectionTests and only return the `id`
     * const preselectionTestWithIdOnly = await prisma.preselectionTest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreselectionTestCreateManyAndReturnArgs>(args?: SelectSubset<T, PreselectionTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreselectionTest.
     * @param {PreselectionTestDeleteArgs} args - Arguments to delete one PreselectionTest.
     * @example
     * // Delete one PreselectionTest
     * const PreselectionTest = await prisma.preselectionTest.delete({
     *   where: {
     *     // ... filter to delete one PreselectionTest
     *   }
     * })
     * 
     */
    delete<T extends PreselectionTestDeleteArgs>(args: SelectSubset<T, PreselectionTestDeleteArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreselectionTest.
     * @param {PreselectionTestUpdateArgs} args - Arguments to update one PreselectionTest.
     * @example
     * // Update one PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreselectionTestUpdateArgs>(args: SelectSubset<T, PreselectionTestUpdateArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreselectionTests.
     * @param {PreselectionTestDeleteManyArgs} args - Arguments to filter PreselectionTests to delete.
     * @example
     * // Delete a few PreselectionTests
     * const { count } = await prisma.preselectionTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreselectionTestDeleteManyArgs>(args?: SelectSubset<T, PreselectionTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreselectionTests
     * const preselectionTest = await prisma.preselectionTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreselectionTestUpdateManyArgs>(args: SelectSubset<T, PreselectionTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionTests and returns the data updated in the database.
     * @param {PreselectionTestUpdateManyAndReturnArgs} args - Arguments to update many PreselectionTests.
     * @example
     * // Update many PreselectionTests
     * const preselectionTest = await prisma.preselectionTest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreselectionTests and only return the `id`
     * const preselectionTestWithIdOnly = await prisma.preselectionTest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreselectionTestUpdateManyAndReturnArgs>(args: SelectSubset<T, PreselectionTestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreselectionTest.
     * @param {PreselectionTestUpsertArgs} args - Arguments to update or create a PreselectionTest.
     * @example
     * // Update or create a PreselectionTest
     * const preselectionTest = await prisma.preselectionTest.upsert({
     *   create: {
     *     // ... data to create a PreselectionTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreselectionTest we want to update
     *   }
     * })
     */
    upsert<T extends PreselectionTestUpsertArgs>(args: SelectSubset<T, PreselectionTestUpsertArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreselectionTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestCountArgs} args - Arguments to filter PreselectionTests to count.
     * @example
     * // Count the number of PreselectionTests
     * const count = await prisma.preselectionTest.count({
     *   where: {
     *     // ... the filter for the PreselectionTests we want to count
     *   }
     * })
    **/
    count<T extends PreselectionTestCountArgs>(
      args?: Subset<T, PreselectionTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreselectionTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreselectionTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreselectionTestAggregateArgs>(args: Subset<T, PreselectionTestAggregateArgs>): Prisma.PrismaPromise<GetPreselectionTestAggregateType<T>>

    /**
     * Group by PreselectionTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreselectionTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreselectionTestGroupByArgs['orderBy'] }
        : { orderBy?: PreselectionTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreselectionTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreselectionTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreselectionTest model
   */
  readonly fields: PreselectionTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreselectionTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreselectionTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends PreselectionTest$questionsArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionTest$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    results<T extends PreselectionTest$resultsArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionTest$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreselectionTest model
   */
  interface PreselectionTestFieldRefs {
    readonly id: FieldRef<"PreselectionTest", 'Int'>
    readonly jobId: FieldRef<"PreselectionTest", 'Int'>
    readonly isActive: FieldRef<"PreselectionTest", 'Boolean'>
    readonly passingScore: FieldRef<"PreselectionTest", 'Int'>
    readonly createdAt: FieldRef<"PreselectionTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PreselectionTest findUnique
   */
  export type PreselectionTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionTest to fetch.
     */
    where: PreselectionTestWhereUniqueInput
  }

  /**
   * PreselectionTest findUniqueOrThrow
   */
  export type PreselectionTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionTest to fetch.
     */
    where: PreselectionTestWhereUniqueInput
  }

  /**
   * PreselectionTest findFirst
   */
  export type PreselectionTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionTest to fetch.
     */
    where?: PreselectionTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionTests to fetch.
     */
    orderBy?: PreselectionTestOrderByWithRelationInput | PreselectionTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionTests.
     */
    cursor?: PreselectionTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionTests.
     */
    distinct?: PreselectionTestScalarFieldEnum | PreselectionTestScalarFieldEnum[]
  }

  /**
   * PreselectionTest findFirstOrThrow
   */
  export type PreselectionTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionTest to fetch.
     */
    where?: PreselectionTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionTests to fetch.
     */
    orderBy?: PreselectionTestOrderByWithRelationInput | PreselectionTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionTests.
     */
    cursor?: PreselectionTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionTests.
     */
    distinct?: PreselectionTestScalarFieldEnum | PreselectionTestScalarFieldEnum[]
  }

  /**
   * PreselectionTest findMany
   */
  export type PreselectionTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionTests to fetch.
     */
    where?: PreselectionTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionTests to fetch.
     */
    orderBy?: PreselectionTestOrderByWithRelationInput | PreselectionTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreselectionTests.
     */
    cursor?: PreselectionTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionTests.
     */
    skip?: number
    distinct?: PreselectionTestScalarFieldEnum | PreselectionTestScalarFieldEnum[]
  }

  /**
   * PreselectionTest create
   */
  export type PreselectionTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * The data needed to create a PreselectionTest.
     */
    data: XOR<PreselectionTestCreateInput, PreselectionTestUncheckedCreateInput>
  }

  /**
   * PreselectionTest createMany
   */
  export type PreselectionTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreselectionTests.
     */
    data: PreselectionTestCreateManyInput | PreselectionTestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreselectionTest createManyAndReturn
   */
  export type PreselectionTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * The data used to create many PreselectionTests.
     */
    data: PreselectionTestCreateManyInput | PreselectionTestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionTest update
   */
  export type PreselectionTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * The data needed to update a PreselectionTest.
     */
    data: XOR<PreselectionTestUpdateInput, PreselectionTestUncheckedUpdateInput>
    /**
     * Choose, which PreselectionTest to update.
     */
    where: PreselectionTestWhereUniqueInput
  }

  /**
   * PreselectionTest updateMany
   */
  export type PreselectionTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreselectionTests.
     */
    data: XOR<PreselectionTestUpdateManyMutationInput, PreselectionTestUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionTests to update
     */
    where?: PreselectionTestWhereInput
    /**
     * Limit how many PreselectionTests to update.
     */
    limit?: number
  }

  /**
   * PreselectionTest updateManyAndReturn
   */
  export type PreselectionTestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * The data used to update PreselectionTests.
     */
    data: XOR<PreselectionTestUpdateManyMutationInput, PreselectionTestUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionTests to update
     */
    where?: PreselectionTestWhereInput
    /**
     * Limit how many PreselectionTests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionTest upsert
   */
  export type PreselectionTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * The filter to search for the PreselectionTest to update in case it exists.
     */
    where: PreselectionTestWhereUniqueInput
    /**
     * In case the PreselectionTest found by the `where` argument doesn't exist, create a new PreselectionTest with this data.
     */
    create: XOR<PreselectionTestCreateInput, PreselectionTestUncheckedCreateInput>
    /**
     * In case the PreselectionTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreselectionTestUpdateInput, PreselectionTestUncheckedUpdateInput>
  }

  /**
   * PreselectionTest delete
   */
  export type PreselectionTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
    /**
     * Filter which PreselectionTest to delete.
     */
    where: PreselectionTestWhereUniqueInput
  }

  /**
   * PreselectionTest deleteMany
   */
  export type PreselectionTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionTests to delete
     */
    where?: PreselectionTestWhereInput
    /**
     * Limit how many PreselectionTests to delete.
     */
    limit?: number
  }

  /**
   * PreselectionTest.questions
   */
  export type PreselectionTest$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    where?: PreselectionQuestionWhereInput
    orderBy?: PreselectionQuestionOrderByWithRelationInput | PreselectionQuestionOrderByWithRelationInput[]
    cursor?: PreselectionQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreselectionQuestionScalarFieldEnum | PreselectionQuestionScalarFieldEnum[]
  }

  /**
   * PreselectionTest.results
   */
  export type PreselectionTest$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    where?: PreselectionResultWhereInput
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    cursor?: PreselectionResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreselectionResultScalarFieldEnum | PreselectionResultScalarFieldEnum[]
  }

  /**
   * PreselectionTest without action
   */
  export type PreselectionTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionTest
     */
    select?: PreselectionTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionTest
     */
    omit?: PreselectionTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionTestInclude<ExtArgs> | null
  }


  /**
   * Model PreselectionQuestion
   */

  export type AggregatePreselectionQuestion = {
    _count: PreselectionQuestionCountAggregateOutputType | null
    _avg: PreselectionQuestionAvgAggregateOutputType | null
    _sum: PreselectionQuestionSumAggregateOutputType | null
    _min: PreselectionQuestionMinAggregateOutputType | null
    _max: PreselectionQuestionMaxAggregateOutputType | null
  }

  export type PreselectionQuestionAvgAggregateOutputType = {
    id: number | null
    testId: number | null
  }

  export type PreselectionQuestionSumAggregateOutputType = {
    id: number | null
    testId: number | null
  }

  export type PreselectionQuestionMinAggregateOutputType = {
    id: number | null
    testId: number | null
    question: string | null
    answer: string | null
  }

  export type PreselectionQuestionMaxAggregateOutputType = {
    id: number | null
    testId: number | null
    question: string | null
    answer: string | null
  }

  export type PreselectionQuestionCountAggregateOutputType = {
    id: number
    testId: number
    question: number
    options: number
    answer: number
    _all: number
  }


  export type PreselectionQuestionAvgAggregateInputType = {
    id?: true
    testId?: true
  }

  export type PreselectionQuestionSumAggregateInputType = {
    id?: true
    testId?: true
  }

  export type PreselectionQuestionMinAggregateInputType = {
    id?: true
    testId?: true
    question?: true
    answer?: true
  }

  export type PreselectionQuestionMaxAggregateInputType = {
    id?: true
    testId?: true
    question?: true
    answer?: true
  }

  export type PreselectionQuestionCountAggregateInputType = {
    id?: true
    testId?: true
    question?: true
    options?: true
    answer?: true
    _all?: true
  }

  export type PreselectionQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionQuestion to aggregate.
     */
    where?: PreselectionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionQuestions to fetch.
     */
    orderBy?: PreselectionQuestionOrderByWithRelationInput | PreselectionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreselectionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreselectionQuestions
    **/
    _count?: true | PreselectionQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreselectionQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreselectionQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreselectionQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreselectionQuestionMaxAggregateInputType
  }

  export type GetPreselectionQuestionAggregateType<T extends PreselectionQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregatePreselectionQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreselectionQuestion[P]>
      : GetScalarType<T[P], AggregatePreselectionQuestion[P]>
  }




  export type PreselectionQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionQuestionWhereInput
    orderBy?: PreselectionQuestionOrderByWithAggregationInput | PreselectionQuestionOrderByWithAggregationInput[]
    by: PreselectionQuestionScalarFieldEnum[] | PreselectionQuestionScalarFieldEnum
    having?: PreselectionQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreselectionQuestionCountAggregateInputType | true
    _avg?: PreselectionQuestionAvgAggregateInputType
    _sum?: PreselectionQuestionSumAggregateInputType
    _min?: PreselectionQuestionMinAggregateInputType
    _max?: PreselectionQuestionMaxAggregateInputType
  }

  export type PreselectionQuestionGroupByOutputType = {
    id: number
    testId: number
    question: string
    options: JsonValue
    answer: string
    _count: PreselectionQuestionCountAggregateOutputType | null
    _avg: PreselectionQuestionAvgAggregateOutputType | null
    _sum: PreselectionQuestionSumAggregateOutputType | null
    _min: PreselectionQuestionMinAggregateOutputType | null
    _max: PreselectionQuestionMaxAggregateOutputType | null
  }

  type GetPreselectionQuestionGroupByPayload<T extends PreselectionQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreselectionQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreselectionQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreselectionQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], PreselectionQuestionGroupByOutputType[P]>
        }
      >
    >


  export type PreselectionQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
    answers?: boolean | PreselectionQuestion$answersArgs<ExtArgs>
    _count?: boolean | PreselectionQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionQuestion"]>

  export type PreselectionQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionQuestion"]>

  export type PreselectionQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionQuestion"]>

  export type PreselectionQuestionSelectScalar = {
    id?: boolean
    testId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
  }

  export type PreselectionQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "testId" | "question" | "options" | "answer", ExtArgs["result"]["preselectionQuestion"]>
  export type PreselectionQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
    answers?: boolean | PreselectionQuestion$answersArgs<ExtArgs>
    _count?: boolean | PreselectionQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreselectionQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }
  export type PreselectionQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }

  export type $PreselectionQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreselectionQuestion"
    objects: {
      test: Prisma.$PreselectionTestPayload<ExtArgs>
      answers: Prisma.$ApplicantAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      testId: number
      question: string
      options: Prisma.JsonValue
      answer: string
    }, ExtArgs["result"]["preselectionQuestion"]>
    composites: {}
  }

  type PreselectionQuestionGetPayload<S extends boolean | null | undefined | PreselectionQuestionDefaultArgs> = $Result.GetResult<Prisma.$PreselectionQuestionPayload, S>

  type PreselectionQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreselectionQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreselectionQuestionCountAggregateInputType | true
    }

  export interface PreselectionQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreselectionQuestion'], meta: { name: 'PreselectionQuestion' } }
    /**
     * Find zero or one PreselectionQuestion that matches the filter.
     * @param {PreselectionQuestionFindUniqueArgs} args - Arguments to find a PreselectionQuestion
     * @example
     * // Get one PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreselectionQuestionFindUniqueArgs>(args: SelectSubset<T, PreselectionQuestionFindUniqueArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreselectionQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreselectionQuestionFindUniqueOrThrowArgs} args - Arguments to find a PreselectionQuestion
     * @example
     * // Get one PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreselectionQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, PreselectionQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionFindFirstArgs} args - Arguments to find a PreselectionQuestion
     * @example
     * // Get one PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreselectionQuestionFindFirstArgs>(args?: SelectSubset<T, PreselectionQuestionFindFirstArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionFindFirstOrThrowArgs} args - Arguments to find a PreselectionQuestion
     * @example
     * // Get one PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreselectionQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, PreselectionQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreselectionQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreselectionQuestions
     * const preselectionQuestions = await prisma.preselectionQuestion.findMany()
     * 
     * // Get first 10 PreselectionQuestions
     * const preselectionQuestions = await prisma.preselectionQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preselectionQuestionWithIdOnly = await prisma.preselectionQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreselectionQuestionFindManyArgs>(args?: SelectSubset<T, PreselectionQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreselectionQuestion.
     * @param {PreselectionQuestionCreateArgs} args - Arguments to create a PreselectionQuestion.
     * @example
     * // Create one PreselectionQuestion
     * const PreselectionQuestion = await prisma.preselectionQuestion.create({
     *   data: {
     *     // ... data to create a PreselectionQuestion
     *   }
     * })
     * 
     */
    create<T extends PreselectionQuestionCreateArgs>(args: SelectSubset<T, PreselectionQuestionCreateArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreselectionQuestions.
     * @param {PreselectionQuestionCreateManyArgs} args - Arguments to create many PreselectionQuestions.
     * @example
     * // Create many PreselectionQuestions
     * const preselectionQuestion = await prisma.preselectionQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreselectionQuestionCreateManyArgs>(args?: SelectSubset<T, PreselectionQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreselectionQuestions and returns the data saved in the database.
     * @param {PreselectionQuestionCreateManyAndReturnArgs} args - Arguments to create many PreselectionQuestions.
     * @example
     * // Create many PreselectionQuestions
     * const preselectionQuestion = await prisma.preselectionQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreselectionQuestions and only return the `id`
     * const preselectionQuestionWithIdOnly = await prisma.preselectionQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreselectionQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, PreselectionQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreselectionQuestion.
     * @param {PreselectionQuestionDeleteArgs} args - Arguments to delete one PreselectionQuestion.
     * @example
     * // Delete one PreselectionQuestion
     * const PreselectionQuestion = await prisma.preselectionQuestion.delete({
     *   where: {
     *     // ... filter to delete one PreselectionQuestion
     *   }
     * })
     * 
     */
    delete<T extends PreselectionQuestionDeleteArgs>(args: SelectSubset<T, PreselectionQuestionDeleteArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreselectionQuestion.
     * @param {PreselectionQuestionUpdateArgs} args - Arguments to update one PreselectionQuestion.
     * @example
     * // Update one PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreselectionQuestionUpdateArgs>(args: SelectSubset<T, PreselectionQuestionUpdateArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreselectionQuestions.
     * @param {PreselectionQuestionDeleteManyArgs} args - Arguments to filter PreselectionQuestions to delete.
     * @example
     * // Delete a few PreselectionQuestions
     * const { count } = await prisma.preselectionQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreselectionQuestionDeleteManyArgs>(args?: SelectSubset<T, PreselectionQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreselectionQuestions
     * const preselectionQuestion = await prisma.preselectionQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreselectionQuestionUpdateManyArgs>(args: SelectSubset<T, PreselectionQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionQuestions and returns the data updated in the database.
     * @param {PreselectionQuestionUpdateManyAndReturnArgs} args - Arguments to update many PreselectionQuestions.
     * @example
     * // Update many PreselectionQuestions
     * const preselectionQuestion = await prisma.preselectionQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreselectionQuestions and only return the `id`
     * const preselectionQuestionWithIdOnly = await prisma.preselectionQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreselectionQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, PreselectionQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreselectionQuestion.
     * @param {PreselectionQuestionUpsertArgs} args - Arguments to update or create a PreselectionQuestion.
     * @example
     * // Update or create a PreselectionQuestion
     * const preselectionQuestion = await prisma.preselectionQuestion.upsert({
     *   create: {
     *     // ... data to create a PreselectionQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreselectionQuestion we want to update
     *   }
     * })
     */
    upsert<T extends PreselectionQuestionUpsertArgs>(args: SelectSubset<T, PreselectionQuestionUpsertArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreselectionQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionCountArgs} args - Arguments to filter PreselectionQuestions to count.
     * @example
     * // Count the number of PreselectionQuestions
     * const count = await prisma.preselectionQuestion.count({
     *   where: {
     *     // ... the filter for the PreselectionQuestions we want to count
     *   }
     * })
    **/
    count<T extends PreselectionQuestionCountArgs>(
      args?: Subset<T, PreselectionQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreselectionQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreselectionQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreselectionQuestionAggregateArgs>(args: Subset<T, PreselectionQuestionAggregateArgs>): Prisma.PrismaPromise<GetPreselectionQuestionAggregateType<T>>

    /**
     * Group by PreselectionQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreselectionQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreselectionQuestionGroupByArgs['orderBy'] }
        : { orderBy?: PreselectionQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreselectionQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreselectionQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreselectionQuestion model
   */
  readonly fields: PreselectionQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreselectionQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreselectionQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends PreselectionTestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionTestDefaultArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answers<T extends PreselectionQuestion$answersArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionQuestion$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreselectionQuestion model
   */
  interface PreselectionQuestionFieldRefs {
    readonly id: FieldRef<"PreselectionQuestion", 'Int'>
    readonly testId: FieldRef<"PreselectionQuestion", 'Int'>
    readonly question: FieldRef<"PreselectionQuestion", 'String'>
    readonly options: FieldRef<"PreselectionQuestion", 'Json'>
    readonly answer: FieldRef<"PreselectionQuestion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PreselectionQuestion findUnique
   */
  export type PreselectionQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionQuestion to fetch.
     */
    where: PreselectionQuestionWhereUniqueInput
  }

  /**
   * PreselectionQuestion findUniqueOrThrow
   */
  export type PreselectionQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionQuestion to fetch.
     */
    where: PreselectionQuestionWhereUniqueInput
  }

  /**
   * PreselectionQuestion findFirst
   */
  export type PreselectionQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionQuestion to fetch.
     */
    where?: PreselectionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionQuestions to fetch.
     */
    orderBy?: PreselectionQuestionOrderByWithRelationInput | PreselectionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionQuestions.
     */
    cursor?: PreselectionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionQuestions.
     */
    distinct?: PreselectionQuestionScalarFieldEnum | PreselectionQuestionScalarFieldEnum[]
  }

  /**
   * PreselectionQuestion findFirstOrThrow
   */
  export type PreselectionQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionQuestion to fetch.
     */
    where?: PreselectionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionQuestions to fetch.
     */
    orderBy?: PreselectionQuestionOrderByWithRelationInput | PreselectionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionQuestions.
     */
    cursor?: PreselectionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionQuestions.
     */
    distinct?: PreselectionQuestionScalarFieldEnum | PreselectionQuestionScalarFieldEnum[]
  }

  /**
   * PreselectionQuestion findMany
   */
  export type PreselectionQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionQuestions to fetch.
     */
    where?: PreselectionQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionQuestions to fetch.
     */
    orderBy?: PreselectionQuestionOrderByWithRelationInput | PreselectionQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreselectionQuestions.
     */
    cursor?: PreselectionQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionQuestions.
     */
    skip?: number
    distinct?: PreselectionQuestionScalarFieldEnum | PreselectionQuestionScalarFieldEnum[]
  }

  /**
   * PreselectionQuestion create
   */
  export type PreselectionQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a PreselectionQuestion.
     */
    data: XOR<PreselectionQuestionCreateInput, PreselectionQuestionUncheckedCreateInput>
  }

  /**
   * PreselectionQuestion createMany
   */
  export type PreselectionQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreselectionQuestions.
     */
    data: PreselectionQuestionCreateManyInput | PreselectionQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreselectionQuestion createManyAndReturn
   */
  export type PreselectionQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many PreselectionQuestions.
     */
    data: PreselectionQuestionCreateManyInput | PreselectionQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionQuestion update
   */
  export type PreselectionQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a PreselectionQuestion.
     */
    data: XOR<PreselectionQuestionUpdateInput, PreselectionQuestionUncheckedUpdateInput>
    /**
     * Choose, which PreselectionQuestion to update.
     */
    where: PreselectionQuestionWhereUniqueInput
  }

  /**
   * PreselectionQuestion updateMany
   */
  export type PreselectionQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreselectionQuestions.
     */
    data: XOR<PreselectionQuestionUpdateManyMutationInput, PreselectionQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionQuestions to update
     */
    where?: PreselectionQuestionWhereInput
    /**
     * Limit how many PreselectionQuestions to update.
     */
    limit?: number
  }

  /**
   * PreselectionQuestion updateManyAndReturn
   */
  export type PreselectionQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * The data used to update PreselectionQuestions.
     */
    data: XOR<PreselectionQuestionUpdateManyMutationInput, PreselectionQuestionUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionQuestions to update
     */
    where?: PreselectionQuestionWhereInput
    /**
     * Limit how many PreselectionQuestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionQuestion upsert
   */
  export type PreselectionQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the PreselectionQuestion to update in case it exists.
     */
    where: PreselectionQuestionWhereUniqueInput
    /**
     * In case the PreselectionQuestion found by the `where` argument doesn't exist, create a new PreselectionQuestion with this data.
     */
    create: XOR<PreselectionQuestionCreateInput, PreselectionQuestionUncheckedCreateInput>
    /**
     * In case the PreselectionQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreselectionQuestionUpdateInput, PreselectionQuestionUncheckedUpdateInput>
  }

  /**
   * PreselectionQuestion delete
   */
  export type PreselectionQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
    /**
     * Filter which PreselectionQuestion to delete.
     */
    where: PreselectionQuestionWhereUniqueInput
  }

  /**
   * PreselectionQuestion deleteMany
   */
  export type PreselectionQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionQuestions to delete
     */
    where?: PreselectionQuestionWhereInput
    /**
     * Limit how many PreselectionQuestions to delete.
     */
    limit?: number
  }

  /**
   * PreselectionQuestion.answers
   */
  export type PreselectionQuestion$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    where?: ApplicantAnswerWhereInput
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    cursor?: ApplicantAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicantAnswerScalarFieldEnum | ApplicantAnswerScalarFieldEnum[]
  }

  /**
   * PreselectionQuestion without action
   */
  export type PreselectionQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionQuestion
     */
    select?: PreselectionQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionQuestion
     */
    omit?: PreselectionQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionQuestionInclude<ExtArgs> | null
  }


  /**
   * Model PreselectionResult
   */

  export type AggregatePreselectionResult = {
    _count: PreselectionResultCountAggregateOutputType | null
    _avg: PreselectionResultAvgAggregateOutputType | null
    _sum: PreselectionResultSumAggregateOutputType | null
    _min: PreselectionResultMinAggregateOutputType | null
    _max: PreselectionResultMaxAggregateOutputType | null
  }

  export type PreselectionResultAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    testId: number | null
    score: number | null
  }

  export type PreselectionResultSumAggregateOutputType = {
    id: number | null
    userId: number | null
    testId: number | null
    score: number | null
  }

  export type PreselectionResultMinAggregateOutputType = {
    id: number | null
    userId: number | null
    testId: number | null
    score: number | null
    createdAt: Date | null
  }

  export type PreselectionResultMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    testId: number | null
    score: number | null
    createdAt: Date | null
  }

  export type PreselectionResultCountAggregateOutputType = {
    id: number
    userId: number
    testId: number
    score: number
    createdAt: number
    _all: number
  }


  export type PreselectionResultAvgAggregateInputType = {
    id?: true
    userId?: true
    testId?: true
    score?: true
  }

  export type PreselectionResultSumAggregateInputType = {
    id?: true
    userId?: true
    testId?: true
    score?: true
  }

  export type PreselectionResultMinAggregateInputType = {
    id?: true
    userId?: true
    testId?: true
    score?: true
    createdAt?: true
  }

  export type PreselectionResultMaxAggregateInputType = {
    id?: true
    userId?: true
    testId?: true
    score?: true
    createdAt?: true
  }

  export type PreselectionResultCountAggregateInputType = {
    id?: true
    userId?: true
    testId?: true
    score?: true
    createdAt?: true
    _all?: true
  }

  export type PreselectionResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionResult to aggregate.
     */
    where?: PreselectionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionResults to fetch.
     */
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreselectionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreselectionResults
    **/
    _count?: true | PreselectionResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreselectionResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreselectionResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreselectionResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreselectionResultMaxAggregateInputType
  }

  export type GetPreselectionResultAggregateType<T extends PreselectionResultAggregateArgs> = {
        [P in keyof T & keyof AggregatePreselectionResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreselectionResult[P]>
      : GetScalarType<T[P], AggregatePreselectionResult[P]>
  }




  export type PreselectionResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreselectionResultWhereInput
    orderBy?: PreselectionResultOrderByWithAggregationInput | PreselectionResultOrderByWithAggregationInput[]
    by: PreselectionResultScalarFieldEnum[] | PreselectionResultScalarFieldEnum
    having?: PreselectionResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreselectionResultCountAggregateInputType | true
    _avg?: PreselectionResultAvgAggregateInputType
    _sum?: PreselectionResultSumAggregateInputType
    _min?: PreselectionResultMinAggregateInputType
    _max?: PreselectionResultMaxAggregateInputType
  }

  export type PreselectionResultGroupByOutputType = {
    id: number
    userId: number
    testId: number
    score: number
    createdAt: Date
    _count: PreselectionResultCountAggregateOutputType | null
    _avg: PreselectionResultAvgAggregateOutputType | null
    _sum: PreselectionResultSumAggregateOutputType | null
    _min: PreselectionResultMinAggregateOutputType | null
    _max: PreselectionResultMaxAggregateOutputType | null
  }

  type GetPreselectionResultGroupByPayload<T extends PreselectionResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreselectionResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreselectionResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreselectionResultGroupByOutputType[P]>
            : GetScalarType<T[P], PreselectionResultGroupByOutputType[P]>
        }
      >
    >


  export type PreselectionResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testId?: boolean
    score?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
    answers?: boolean | PreselectionResult$answersArgs<ExtArgs>
    _count?: boolean | PreselectionResultCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionResult"]>

  export type PreselectionResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testId?: boolean
    score?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionResult"]>

  export type PreselectionResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testId?: boolean
    score?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preselectionResult"]>

  export type PreselectionResultSelectScalar = {
    id?: boolean
    userId?: boolean
    testId?: boolean
    score?: boolean
    createdAt?: boolean
  }

  export type PreselectionResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "testId" | "score" | "createdAt", ExtArgs["result"]["preselectionResult"]>
  export type PreselectionResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
    answers?: boolean | PreselectionResult$answersArgs<ExtArgs>
    _count?: boolean | PreselectionResultCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreselectionResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }
  export type PreselectionResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    test?: boolean | PreselectionTestDefaultArgs<ExtArgs>
  }

  export type $PreselectionResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreselectionResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      test: Prisma.$PreselectionTestPayload<ExtArgs>
      answers: Prisma.$ApplicantAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      testId: number
      score: number
      createdAt: Date
    }, ExtArgs["result"]["preselectionResult"]>
    composites: {}
  }

  type PreselectionResultGetPayload<S extends boolean | null | undefined | PreselectionResultDefaultArgs> = $Result.GetResult<Prisma.$PreselectionResultPayload, S>

  type PreselectionResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreselectionResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreselectionResultCountAggregateInputType | true
    }

  export interface PreselectionResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreselectionResult'], meta: { name: 'PreselectionResult' } }
    /**
     * Find zero or one PreselectionResult that matches the filter.
     * @param {PreselectionResultFindUniqueArgs} args - Arguments to find a PreselectionResult
     * @example
     * // Get one PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreselectionResultFindUniqueArgs>(args: SelectSubset<T, PreselectionResultFindUniqueArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreselectionResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreselectionResultFindUniqueOrThrowArgs} args - Arguments to find a PreselectionResult
     * @example
     * // Get one PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreselectionResultFindUniqueOrThrowArgs>(args: SelectSubset<T, PreselectionResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultFindFirstArgs} args - Arguments to find a PreselectionResult
     * @example
     * // Get one PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreselectionResultFindFirstArgs>(args?: SelectSubset<T, PreselectionResultFindFirstArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreselectionResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultFindFirstOrThrowArgs} args - Arguments to find a PreselectionResult
     * @example
     * // Get one PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreselectionResultFindFirstOrThrowArgs>(args?: SelectSubset<T, PreselectionResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreselectionResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreselectionResults
     * const preselectionResults = await prisma.preselectionResult.findMany()
     * 
     * // Get first 10 PreselectionResults
     * const preselectionResults = await prisma.preselectionResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preselectionResultWithIdOnly = await prisma.preselectionResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreselectionResultFindManyArgs>(args?: SelectSubset<T, PreselectionResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreselectionResult.
     * @param {PreselectionResultCreateArgs} args - Arguments to create a PreselectionResult.
     * @example
     * // Create one PreselectionResult
     * const PreselectionResult = await prisma.preselectionResult.create({
     *   data: {
     *     // ... data to create a PreselectionResult
     *   }
     * })
     * 
     */
    create<T extends PreselectionResultCreateArgs>(args: SelectSubset<T, PreselectionResultCreateArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreselectionResults.
     * @param {PreselectionResultCreateManyArgs} args - Arguments to create many PreselectionResults.
     * @example
     * // Create many PreselectionResults
     * const preselectionResult = await prisma.preselectionResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreselectionResultCreateManyArgs>(args?: SelectSubset<T, PreselectionResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreselectionResults and returns the data saved in the database.
     * @param {PreselectionResultCreateManyAndReturnArgs} args - Arguments to create many PreselectionResults.
     * @example
     * // Create many PreselectionResults
     * const preselectionResult = await prisma.preselectionResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreselectionResults and only return the `id`
     * const preselectionResultWithIdOnly = await prisma.preselectionResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreselectionResultCreateManyAndReturnArgs>(args?: SelectSubset<T, PreselectionResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreselectionResult.
     * @param {PreselectionResultDeleteArgs} args - Arguments to delete one PreselectionResult.
     * @example
     * // Delete one PreselectionResult
     * const PreselectionResult = await prisma.preselectionResult.delete({
     *   where: {
     *     // ... filter to delete one PreselectionResult
     *   }
     * })
     * 
     */
    delete<T extends PreselectionResultDeleteArgs>(args: SelectSubset<T, PreselectionResultDeleteArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreselectionResult.
     * @param {PreselectionResultUpdateArgs} args - Arguments to update one PreselectionResult.
     * @example
     * // Update one PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreselectionResultUpdateArgs>(args: SelectSubset<T, PreselectionResultUpdateArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreselectionResults.
     * @param {PreselectionResultDeleteManyArgs} args - Arguments to filter PreselectionResults to delete.
     * @example
     * // Delete a few PreselectionResults
     * const { count } = await prisma.preselectionResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreselectionResultDeleteManyArgs>(args?: SelectSubset<T, PreselectionResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreselectionResults
     * const preselectionResult = await prisma.preselectionResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreselectionResultUpdateManyArgs>(args: SelectSubset<T, PreselectionResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreselectionResults and returns the data updated in the database.
     * @param {PreselectionResultUpdateManyAndReturnArgs} args - Arguments to update many PreselectionResults.
     * @example
     * // Update many PreselectionResults
     * const preselectionResult = await prisma.preselectionResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreselectionResults and only return the `id`
     * const preselectionResultWithIdOnly = await prisma.preselectionResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreselectionResultUpdateManyAndReturnArgs>(args: SelectSubset<T, PreselectionResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreselectionResult.
     * @param {PreselectionResultUpsertArgs} args - Arguments to update or create a PreselectionResult.
     * @example
     * // Update or create a PreselectionResult
     * const preselectionResult = await prisma.preselectionResult.upsert({
     *   create: {
     *     // ... data to create a PreselectionResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreselectionResult we want to update
     *   }
     * })
     */
    upsert<T extends PreselectionResultUpsertArgs>(args: SelectSubset<T, PreselectionResultUpsertArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreselectionResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultCountArgs} args - Arguments to filter PreselectionResults to count.
     * @example
     * // Count the number of PreselectionResults
     * const count = await prisma.preselectionResult.count({
     *   where: {
     *     // ... the filter for the PreselectionResults we want to count
     *   }
     * })
    **/
    count<T extends PreselectionResultCountArgs>(
      args?: Subset<T, PreselectionResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreselectionResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreselectionResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreselectionResultAggregateArgs>(args: Subset<T, PreselectionResultAggregateArgs>): Prisma.PrismaPromise<GetPreselectionResultAggregateType<T>>

    /**
     * Group by PreselectionResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreselectionResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreselectionResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreselectionResultGroupByArgs['orderBy'] }
        : { orderBy?: PreselectionResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreselectionResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreselectionResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreselectionResult model
   */
  readonly fields: PreselectionResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreselectionResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreselectionResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    test<T extends PreselectionTestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionTestDefaultArgs<ExtArgs>>): Prisma__PreselectionTestClient<$Result.GetResult<Prisma.$PreselectionTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answers<T extends PreselectionResult$answersArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionResult$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreselectionResult model
   */
  interface PreselectionResultFieldRefs {
    readonly id: FieldRef<"PreselectionResult", 'Int'>
    readonly userId: FieldRef<"PreselectionResult", 'Int'>
    readonly testId: FieldRef<"PreselectionResult", 'Int'>
    readonly score: FieldRef<"PreselectionResult", 'Int'>
    readonly createdAt: FieldRef<"PreselectionResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PreselectionResult findUnique
   */
  export type PreselectionResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionResult to fetch.
     */
    where: PreselectionResultWhereUniqueInput
  }

  /**
   * PreselectionResult findUniqueOrThrow
   */
  export type PreselectionResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionResult to fetch.
     */
    where: PreselectionResultWhereUniqueInput
  }

  /**
   * PreselectionResult findFirst
   */
  export type PreselectionResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionResult to fetch.
     */
    where?: PreselectionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionResults to fetch.
     */
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionResults.
     */
    cursor?: PreselectionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionResults.
     */
    distinct?: PreselectionResultScalarFieldEnum | PreselectionResultScalarFieldEnum[]
  }

  /**
   * PreselectionResult findFirstOrThrow
   */
  export type PreselectionResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionResult to fetch.
     */
    where?: PreselectionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionResults to fetch.
     */
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreselectionResults.
     */
    cursor?: PreselectionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreselectionResults.
     */
    distinct?: PreselectionResultScalarFieldEnum | PreselectionResultScalarFieldEnum[]
  }

  /**
   * PreselectionResult findMany
   */
  export type PreselectionResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter, which PreselectionResults to fetch.
     */
    where?: PreselectionResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreselectionResults to fetch.
     */
    orderBy?: PreselectionResultOrderByWithRelationInput | PreselectionResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreselectionResults.
     */
    cursor?: PreselectionResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreselectionResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreselectionResults.
     */
    skip?: number
    distinct?: PreselectionResultScalarFieldEnum | PreselectionResultScalarFieldEnum[]
  }

  /**
   * PreselectionResult create
   */
  export type PreselectionResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * The data needed to create a PreselectionResult.
     */
    data: XOR<PreselectionResultCreateInput, PreselectionResultUncheckedCreateInput>
  }

  /**
   * PreselectionResult createMany
   */
  export type PreselectionResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreselectionResults.
     */
    data: PreselectionResultCreateManyInput | PreselectionResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreselectionResult createManyAndReturn
   */
  export type PreselectionResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * The data used to create many PreselectionResults.
     */
    data: PreselectionResultCreateManyInput | PreselectionResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionResult update
   */
  export type PreselectionResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * The data needed to update a PreselectionResult.
     */
    data: XOR<PreselectionResultUpdateInput, PreselectionResultUncheckedUpdateInput>
    /**
     * Choose, which PreselectionResult to update.
     */
    where: PreselectionResultWhereUniqueInput
  }

  /**
   * PreselectionResult updateMany
   */
  export type PreselectionResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreselectionResults.
     */
    data: XOR<PreselectionResultUpdateManyMutationInput, PreselectionResultUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionResults to update
     */
    where?: PreselectionResultWhereInput
    /**
     * Limit how many PreselectionResults to update.
     */
    limit?: number
  }

  /**
   * PreselectionResult updateManyAndReturn
   */
  export type PreselectionResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * The data used to update PreselectionResults.
     */
    data: XOR<PreselectionResultUpdateManyMutationInput, PreselectionResultUncheckedUpdateManyInput>
    /**
     * Filter which PreselectionResults to update
     */
    where?: PreselectionResultWhereInput
    /**
     * Limit how many PreselectionResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreselectionResult upsert
   */
  export type PreselectionResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * The filter to search for the PreselectionResult to update in case it exists.
     */
    where: PreselectionResultWhereUniqueInput
    /**
     * In case the PreselectionResult found by the `where` argument doesn't exist, create a new PreselectionResult with this data.
     */
    create: XOR<PreselectionResultCreateInput, PreselectionResultUncheckedCreateInput>
    /**
     * In case the PreselectionResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreselectionResultUpdateInput, PreselectionResultUncheckedUpdateInput>
  }

  /**
   * PreselectionResult delete
   */
  export type PreselectionResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
    /**
     * Filter which PreselectionResult to delete.
     */
    where: PreselectionResultWhereUniqueInput
  }

  /**
   * PreselectionResult deleteMany
   */
  export type PreselectionResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreselectionResults to delete
     */
    where?: PreselectionResultWhereInput
    /**
     * Limit how many PreselectionResults to delete.
     */
    limit?: number
  }

  /**
   * PreselectionResult.answers
   */
  export type PreselectionResult$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    where?: ApplicantAnswerWhereInput
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    cursor?: ApplicantAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicantAnswerScalarFieldEnum | ApplicantAnswerScalarFieldEnum[]
  }

  /**
   * PreselectionResult without action
   */
  export type PreselectionResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreselectionResult
     */
    select?: PreselectionResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreselectionResult
     */
    omit?: PreselectionResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreselectionResultInclude<ExtArgs> | null
  }


  /**
   * Model ApplicantAnswer
   */

  export type AggregateApplicantAnswer = {
    _count: ApplicantAnswerCountAggregateOutputType | null
    _avg: ApplicantAnswerAvgAggregateOutputType | null
    _sum: ApplicantAnswerSumAggregateOutputType | null
    _min: ApplicantAnswerMinAggregateOutputType | null
    _max: ApplicantAnswerMaxAggregateOutputType | null
  }

  export type ApplicantAnswerAvgAggregateOutputType = {
    id: number | null
    resultId: number | null
    questionId: number | null
  }

  export type ApplicantAnswerSumAggregateOutputType = {
    id: number | null
    resultId: number | null
    questionId: number | null
  }

  export type ApplicantAnswerMinAggregateOutputType = {
    id: number | null
    resultId: number | null
    questionId: number | null
    selected: string | null
    isCorrect: boolean | null
  }

  export type ApplicantAnswerMaxAggregateOutputType = {
    id: number | null
    resultId: number | null
    questionId: number | null
    selected: string | null
    isCorrect: boolean | null
  }

  export type ApplicantAnswerCountAggregateOutputType = {
    id: number
    resultId: number
    questionId: number
    selected: number
    isCorrect: number
    _all: number
  }


  export type ApplicantAnswerAvgAggregateInputType = {
    id?: true
    resultId?: true
    questionId?: true
  }

  export type ApplicantAnswerSumAggregateInputType = {
    id?: true
    resultId?: true
    questionId?: true
  }

  export type ApplicantAnswerMinAggregateInputType = {
    id?: true
    resultId?: true
    questionId?: true
    selected?: true
    isCorrect?: true
  }

  export type ApplicantAnswerMaxAggregateInputType = {
    id?: true
    resultId?: true
    questionId?: true
    selected?: true
    isCorrect?: true
  }

  export type ApplicantAnswerCountAggregateInputType = {
    id?: true
    resultId?: true
    questionId?: true
    selected?: true
    isCorrect?: true
    _all?: true
  }

  export type ApplicantAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicantAnswer to aggregate.
     */
    where?: ApplicantAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantAnswers to fetch.
     */
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicantAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicantAnswers
    **/
    _count?: true | ApplicantAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicantAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicantAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicantAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicantAnswerMaxAggregateInputType
  }

  export type GetApplicantAnswerAggregateType<T extends ApplicantAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicantAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicantAnswer[P]>
      : GetScalarType<T[P], AggregateApplicantAnswer[P]>
  }




  export type ApplicantAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantAnswerWhereInput
    orderBy?: ApplicantAnswerOrderByWithAggregationInput | ApplicantAnswerOrderByWithAggregationInput[]
    by: ApplicantAnswerScalarFieldEnum[] | ApplicantAnswerScalarFieldEnum
    having?: ApplicantAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicantAnswerCountAggregateInputType | true
    _avg?: ApplicantAnswerAvgAggregateInputType
    _sum?: ApplicantAnswerSumAggregateInputType
    _min?: ApplicantAnswerMinAggregateInputType
    _max?: ApplicantAnswerMaxAggregateInputType
  }

  export type ApplicantAnswerGroupByOutputType = {
    id: number
    resultId: number
    questionId: number
    selected: string
    isCorrect: boolean
    _count: ApplicantAnswerCountAggregateOutputType | null
    _avg: ApplicantAnswerAvgAggregateOutputType | null
    _sum: ApplicantAnswerSumAggregateOutputType | null
    _min: ApplicantAnswerMinAggregateOutputType | null
    _max: ApplicantAnswerMaxAggregateOutputType | null
  }

  type GetApplicantAnswerGroupByPayload<T extends ApplicantAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicantAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicantAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicantAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicantAnswerGroupByOutputType[P]>
        }
      >
    >


  export type ApplicantAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resultId?: boolean
    questionId?: boolean
    selected?: boolean
    isCorrect?: boolean
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicantAnswer"]>

  export type ApplicantAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resultId?: boolean
    questionId?: boolean
    selected?: boolean
    isCorrect?: boolean
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicantAnswer"]>

  export type ApplicantAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resultId?: boolean
    questionId?: boolean
    selected?: boolean
    isCorrect?: boolean
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicantAnswer"]>

  export type ApplicantAnswerSelectScalar = {
    id?: boolean
    resultId?: boolean
    questionId?: boolean
    selected?: boolean
    isCorrect?: boolean
  }

  export type ApplicantAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resultId" | "questionId" | "selected" | "isCorrect", ExtArgs["result"]["applicantAnswer"]>
  export type ApplicantAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }
  export type ApplicantAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }
  export type ApplicantAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | PreselectionResultDefaultArgs<ExtArgs>
    question?: boolean | PreselectionQuestionDefaultArgs<ExtArgs>
  }

  export type $ApplicantAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicantAnswer"
    objects: {
      result: Prisma.$PreselectionResultPayload<ExtArgs>
      question: Prisma.$PreselectionQuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resultId: number
      questionId: number
      selected: string
      isCorrect: boolean
    }, ExtArgs["result"]["applicantAnswer"]>
    composites: {}
  }

  type ApplicantAnswerGetPayload<S extends boolean | null | undefined | ApplicantAnswerDefaultArgs> = $Result.GetResult<Prisma.$ApplicantAnswerPayload, S>

  type ApplicantAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicantAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicantAnswerCountAggregateInputType | true
    }

  export interface ApplicantAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicantAnswer'], meta: { name: 'ApplicantAnswer' } }
    /**
     * Find zero or one ApplicantAnswer that matches the filter.
     * @param {ApplicantAnswerFindUniqueArgs} args - Arguments to find a ApplicantAnswer
     * @example
     * // Get one ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicantAnswerFindUniqueArgs>(args: SelectSubset<T, ApplicantAnswerFindUniqueArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicantAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicantAnswerFindUniqueOrThrowArgs} args - Arguments to find a ApplicantAnswer
     * @example
     * // Get one ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicantAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicantAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicantAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerFindFirstArgs} args - Arguments to find a ApplicantAnswer
     * @example
     * // Get one ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicantAnswerFindFirstArgs>(args?: SelectSubset<T, ApplicantAnswerFindFirstArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicantAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerFindFirstOrThrowArgs} args - Arguments to find a ApplicantAnswer
     * @example
     * // Get one ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicantAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicantAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicantAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicantAnswers
     * const applicantAnswers = await prisma.applicantAnswer.findMany()
     * 
     * // Get first 10 ApplicantAnswers
     * const applicantAnswers = await prisma.applicantAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantAnswerWithIdOnly = await prisma.applicantAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicantAnswerFindManyArgs>(args?: SelectSubset<T, ApplicantAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicantAnswer.
     * @param {ApplicantAnswerCreateArgs} args - Arguments to create a ApplicantAnswer.
     * @example
     * // Create one ApplicantAnswer
     * const ApplicantAnswer = await prisma.applicantAnswer.create({
     *   data: {
     *     // ... data to create a ApplicantAnswer
     *   }
     * })
     * 
     */
    create<T extends ApplicantAnswerCreateArgs>(args: SelectSubset<T, ApplicantAnswerCreateArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicantAnswers.
     * @param {ApplicantAnswerCreateManyArgs} args - Arguments to create many ApplicantAnswers.
     * @example
     * // Create many ApplicantAnswers
     * const applicantAnswer = await prisma.applicantAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicantAnswerCreateManyArgs>(args?: SelectSubset<T, ApplicantAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicantAnswers and returns the data saved in the database.
     * @param {ApplicantAnswerCreateManyAndReturnArgs} args - Arguments to create many ApplicantAnswers.
     * @example
     * // Create many ApplicantAnswers
     * const applicantAnswer = await prisma.applicantAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicantAnswers and only return the `id`
     * const applicantAnswerWithIdOnly = await prisma.applicantAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicantAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicantAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicantAnswer.
     * @param {ApplicantAnswerDeleteArgs} args - Arguments to delete one ApplicantAnswer.
     * @example
     * // Delete one ApplicantAnswer
     * const ApplicantAnswer = await prisma.applicantAnswer.delete({
     *   where: {
     *     // ... filter to delete one ApplicantAnswer
     *   }
     * })
     * 
     */
    delete<T extends ApplicantAnswerDeleteArgs>(args: SelectSubset<T, ApplicantAnswerDeleteArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicantAnswer.
     * @param {ApplicantAnswerUpdateArgs} args - Arguments to update one ApplicantAnswer.
     * @example
     * // Update one ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicantAnswerUpdateArgs>(args: SelectSubset<T, ApplicantAnswerUpdateArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicantAnswers.
     * @param {ApplicantAnswerDeleteManyArgs} args - Arguments to filter ApplicantAnswers to delete.
     * @example
     * // Delete a few ApplicantAnswers
     * const { count } = await prisma.applicantAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicantAnswerDeleteManyArgs>(args?: SelectSubset<T, ApplicantAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicantAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicantAnswers
     * const applicantAnswer = await prisma.applicantAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicantAnswerUpdateManyArgs>(args: SelectSubset<T, ApplicantAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicantAnswers and returns the data updated in the database.
     * @param {ApplicantAnswerUpdateManyAndReturnArgs} args - Arguments to update many ApplicantAnswers.
     * @example
     * // Update many ApplicantAnswers
     * const applicantAnswer = await prisma.applicantAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicantAnswers and only return the `id`
     * const applicantAnswerWithIdOnly = await prisma.applicantAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicantAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicantAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicantAnswer.
     * @param {ApplicantAnswerUpsertArgs} args - Arguments to update or create a ApplicantAnswer.
     * @example
     * // Update or create a ApplicantAnswer
     * const applicantAnswer = await prisma.applicantAnswer.upsert({
     *   create: {
     *     // ... data to create a ApplicantAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicantAnswer we want to update
     *   }
     * })
     */
    upsert<T extends ApplicantAnswerUpsertArgs>(args: SelectSubset<T, ApplicantAnswerUpsertArgs<ExtArgs>>): Prisma__ApplicantAnswerClient<$Result.GetResult<Prisma.$ApplicantAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicantAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerCountArgs} args - Arguments to filter ApplicantAnswers to count.
     * @example
     * // Count the number of ApplicantAnswers
     * const count = await prisma.applicantAnswer.count({
     *   where: {
     *     // ... the filter for the ApplicantAnswers we want to count
     *   }
     * })
    **/
    count<T extends ApplicantAnswerCountArgs>(
      args?: Subset<T, ApplicantAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicantAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicantAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicantAnswerAggregateArgs>(args: Subset<T, ApplicantAnswerAggregateArgs>): Prisma.PrismaPromise<GetApplicantAnswerAggregateType<T>>

    /**
     * Group by ApplicantAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicantAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicantAnswerGroupByArgs['orderBy'] }
        : { orderBy?: ApplicantAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicantAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicantAnswer model
   */
  readonly fields: ApplicantAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicantAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicantAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    result<T extends PreselectionResultDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionResultDefaultArgs<ExtArgs>>): Prisma__PreselectionResultClient<$Result.GetResult<Prisma.$PreselectionResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends PreselectionQuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreselectionQuestionDefaultArgs<ExtArgs>>): Prisma__PreselectionQuestionClient<$Result.GetResult<Prisma.$PreselectionQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicantAnswer model
   */
  interface ApplicantAnswerFieldRefs {
    readonly id: FieldRef<"ApplicantAnswer", 'Int'>
    readonly resultId: FieldRef<"ApplicantAnswer", 'Int'>
    readonly questionId: FieldRef<"ApplicantAnswer", 'Int'>
    readonly selected: FieldRef<"ApplicantAnswer", 'String'>
    readonly isCorrect: FieldRef<"ApplicantAnswer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ApplicantAnswer findUnique
   */
  export type ApplicantAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantAnswer to fetch.
     */
    where: ApplicantAnswerWhereUniqueInput
  }

  /**
   * ApplicantAnswer findUniqueOrThrow
   */
  export type ApplicantAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantAnswer to fetch.
     */
    where: ApplicantAnswerWhereUniqueInput
  }

  /**
   * ApplicantAnswer findFirst
   */
  export type ApplicantAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantAnswer to fetch.
     */
    where?: ApplicantAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantAnswers to fetch.
     */
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicantAnswers.
     */
    cursor?: ApplicantAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicantAnswers.
     */
    distinct?: ApplicantAnswerScalarFieldEnum | ApplicantAnswerScalarFieldEnum[]
  }

  /**
   * ApplicantAnswer findFirstOrThrow
   */
  export type ApplicantAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantAnswer to fetch.
     */
    where?: ApplicantAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantAnswers to fetch.
     */
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicantAnswers.
     */
    cursor?: ApplicantAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicantAnswers.
     */
    distinct?: ApplicantAnswerScalarFieldEnum | ApplicantAnswerScalarFieldEnum[]
  }

  /**
   * ApplicantAnswer findMany
   */
  export type ApplicantAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantAnswers to fetch.
     */
    where?: ApplicantAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantAnswers to fetch.
     */
    orderBy?: ApplicantAnswerOrderByWithRelationInput | ApplicantAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicantAnswers.
     */
    cursor?: ApplicantAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantAnswers.
     */
    skip?: number
    distinct?: ApplicantAnswerScalarFieldEnum | ApplicantAnswerScalarFieldEnum[]
  }

  /**
   * ApplicantAnswer create
   */
  export type ApplicantAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicantAnswer.
     */
    data: XOR<ApplicantAnswerCreateInput, ApplicantAnswerUncheckedCreateInput>
  }

  /**
   * ApplicantAnswer createMany
   */
  export type ApplicantAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicantAnswers.
     */
    data: ApplicantAnswerCreateManyInput | ApplicantAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicantAnswer createManyAndReturn
   */
  export type ApplicantAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicantAnswers.
     */
    data: ApplicantAnswerCreateManyInput | ApplicantAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicantAnswer update
   */
  export type ApplicantAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicantAnswer.
     */
    data: XOR<ApplicantAnswerUpdateInput, ApplicantAnswerUncheckedUpdateInput>
    /**
     * Choose, which ApplicantAnswer to update.
     */
    where: ApplicantAnswerWhereUniqueInput
  }

  /**
   * ApplicantAnswer updateMany
   */
  export type ApplicantAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicantAnswers.
     */
    data: XOR<ApplicantAnswerUpdateManyMutationInput, ApplicantAnswerUncheckedUpdateManyInput>
    /**
     * Filter which ApplicantAnswers to update
     */
    where?: ApplicantAnswerWhereInput
    /**
     * Limit how many ApplicantAnswers to update.
     */
    limit?: number
  }

  /**
   * ApplicantAnswer updateManyAndReturn
   */
  export type ApplicantAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * The data used to update ApplicantAnswers.
     */
    data: XOR<ApplicantAnswerUpdateManyMutationInput, ApplicantAnswerUncheckedUpdateManyInput>
    /**
     * Filter which ApplicantAnswers to update
     */
    where?: ApplicantAnswerWhereInput
    /**
     * Limit how many ApplicantAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicantAnswer upsert
   */
  export type ApplicantAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicantAnswer to update in case it exists.
     */
    where: ApplicantAnswerWhereUniqueInput
    /**
     * In case the ApplicantAnswer found by the `where` argument doesn't exist, create a new ApplicantAnswer with this data.
     */
    create: XOR<ApplicantAnswerCreateInput, ApplicantAnswerUncheckedCreateInput>
    /**
     * In case the ApplicantAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicantAnswerUpdateInput, ApplicantAnswerUncheckedUpdateInput>
  }

  /**
   * ApplicantAnswer delete
   */
  export type ApplicantAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
    /**
     * Filter which ApplicantAnswer to delete.
     */
    where: ApplicantAnswerWhereUniqueInput
  }

  /**
   * ApplicantAnswer deleteMany
   */
  export type ApplicantAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicantAnswers to delete
     */
    where?: ApplicantAnswerWhereInput
    /**
     * Limit how many ApplicantAnswers to delete.
     */
    limit?: number
  }

  /**
   * ApplicantAnswer without action
   */
  export type ApplicantAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantAnswer
     */
    select?: ApplicantAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantAnswer
     */
    omit?: ApplicantAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantAnswerInclude<ExtArgs> | null
  }


  /**
   * Model SkillAssessment
   */

  export type AggregateSkillAssessment = {
    _count: SkillAssessmentCountAggregateOutputType | null
    _avg: SkillAssessmentAvgAggregateOutputType | null
    _sum: SkillAssessmentSumAggregateOutputType | null
    _min: SkillAssessmentMinAggregateOutputType | null
    _max: SkillAssessmentMaxAggregateOutputType | null
  }

  export type SkillAssessmentAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type SkillAssessmentSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type SkillAssessmentMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdBy: number | null
    createdAt: Date | null
  }

  export type SkillAssessmentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    createdBy: number | null
    createdAt: Date | null
  }

  export type SkillAssessmentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    createdBy: number
    createdAt: number
    _all: number
  }


  export type SkillAssessmentAvgAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type SkillAssessmentSumAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type SkillAssessmentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdBy?: true
    createdAt?: true
  }

  export type SkillAssessmentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdBy?: true
    createdAt?: true
  }

  export type SkillAssessmentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdBy?: true
    createdAt?: true
    _all?: true
  }

  export type SkillAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillAssessment to aggregate.
     */
    where?: SkillAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillAssessments to fetch.
     */
    orderBy?: SkillAssessmentOrderByWithRelationInput | SkillAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillAssessments
    **/
    _count?: true | SkillAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillAssessmentMaxAggregateInputType
  }

  export type GetSkillAssessmentAggregateType<T extends SkillAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillAssessment[P]>
      : GetScalarType<T[P], AggregateSkillAssessment[P]>
  }




  export type SkillAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillAssessmentWhereInput
    orderBy?: SkillAssessmentOrderByWithAggregationInput | SkillAssessmentOrderByWithAggregationInput[]
    by: SkillAssessmentScalarFieldEnum[] | SkillAssessmentScalarFieldEnum
    having?: SkillAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillAssessmentCountAggregateInputType | true
    _avg?: SkillAssessmentAvgAggregateInputType
    _sum?: SkillAssessmentSumAggregateInputType
    _min?: SkillAssessmentMinAggregateInputType
    _max?: SkillAssessmentMaxAggregateInputType
  }

  export type SkillAssessmentGroupByOutputType = {
    id: number
    title: string
    description: string | null
    createdBy: number
    createdAt: Date
    _count: SkillAssessmentCountAggregateOutputType | null
    _avg: SkillAssessmentAvgAggregateOutputType | null
    _sum: SkillAssessmentSumAggregateOutputType | null
    _min: SkillAssessmentMinAggregateOutputType | null
    _max: SkillAssessmentMaxAggregateOutputType | null
  }

  type GetSkillAssessmentGroupByPayload<T extends SkillAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], SkillAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type SkillAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    questions?: boolean | SkillAssessment$questionsArgs<ExtArgs>
    results?: boolean | SkillAssessment$resultsArgs<ExtArgs>
    _count?: boolean | SkillAssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillAssessment"]>

  export type SkillAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillAssessment"]>

  export type SkillAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillAssessment"]>

  export type SkillAssessmentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
  }

  export type SkillAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "createdBy" | "createdAt", ExtArgs["result"]["skillAssessment"]>
  export type SkillAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    questions?: boolean | SkillAssessment$questionsArgs<ExtArgs>
    results?: boolean | SkillAssessment$resultsArgs<ExtArgs>
    _count?: boolean | SkillAssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SkillAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SkillAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillAssessment"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      questions: Prisma.$SkillQuestionPayload<ExtArgs>[]
      results: Prisma.$SkillResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      createdBy: number
      createdAt: Date
    }, ExtArgs["result"]["skillAssessment"]>
    composites: {}
  }

  type SkillAssessmentGetPayload<S extends boolean | null | undefined | SkillAssessmentDefaultArgs> = $Result.GetResult<Prisma.$SkillAssessmentPayload, S>

  type SkillAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillAssessmentCountAggregateInputType | true
    }

  export interface SkillAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillAssessment'], meta: { name: 'SkillAssessment' } }
    /**
     * Find zero or one SkillAssessment that matches the filter.
     * @param {SkillAssessmentFindUniqueArgs} args - Arguments to find a SkillAssessment
     * @example
     * // Get one SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillAssessmentFindUniqueArgs>(args: SelectSubset<T, SkillAssessmentFindUniqueArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkillAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillAssessmentFindUniqueOrThrowArgs} args - Arguments to find a SkillAssessment
     * @example
     * // Get one SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentFindFirstArgs} args - Arguments to find a SkillAssessment
     * @example
     * // Get one SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillAssessmentFindFirstArgs>(args?: SelectSubset<T, SkillAssessmentFindFirstArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentFindFirstOrThrowArgs} args - Arguments to find a SkillAssessment
     * @example
     * // Get one SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkillAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillAssessments
     * const skillAssessments = await prisma.skillAssessment.findMany()
     * 
     * // Get first 10 SkillAssessments
     * const skillAssessments = await prisma.skillAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillAssessmentWithIdOnly = await prisma.skillAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillAssessmentFindManyArgs>(args?: SelectSubset<T, SkillAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkillAssessment.
     * @param {SkillAssessmentCreateArgs} args - Arguments to create a SkillAssessment.
     * @example
     * // Create one SkillAssessment
     * const SkillAssessment = await prisma.skillAssessment.create({
     *   data: {
     *     // ... data to create a SkillAssessment
     *   }
     * })
     * 
     */
    create<T extends SkillAssessmentCreateArgs>(args: SelectSubset<T, SkillAssessmentCreateArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkillAssessments.
     * @param {SkillAssessmentCreateManyArgs} args - Arguments to create many SkillAssessments.
     * @example
     * // Create many SkillAssessments
     * const skillAssessment = await prisma.skillAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillAssessmentCreateManyArgs>(args?: SelectSubset<T, SkillAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillAssessments and returns the data saved in the database.
     * @param {SkillAssessmentCreateManyAndReturnArgs} args - Arguments to create many SkillAssessments.
     * @example
     * // Create many SkillAssessments
     * const skillAssessment = await prisma.skillAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillAssessments and only return the `id`
     * const skillAssessmentWithIdOnly = await prisma.skillAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkillAssessment.
     * @param {SkillAssessmentDeleteArgs} args - Arguments to delete one SkillAssessment.
     * @example
     * // Delete one SkillAssessment
     * const SkillAssessment = await prisma.skillAssessment.delete({
     *   where: {
     *     // ... filter to delete one SkillAssessment
     *   }
     * })
     * 
     */
    delete<T extends SkillAssessmentDeleteArgs>(args: SelectSubset<T, SkillAssessmentDeleteArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkillAssessment.
     * @param {SkillAssessmentUpdateArgs} args - Arguments to update one SkillAssessment.
     * @example
     * // Update one SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillAssessmentUpdateArgs>(args: SelectSubset<T, SkillAssessmentUpdateArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkillAssessments.
     * @param {SkillAssessmentDeleteManyArgs} args - Arguments to filter SkillAssessments to delete.
     * @example
     * // Delete a few SkillAssessments
     * const { count } = await prisma.skillAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillAssessmentDeleteManyArgs>(args?: SelectSubset<T, SkillAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillAssessments
     * const skillAssessment = await prisma.skillAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillAssessmentUpdateManyArgs>(args: SelectSubset<T, SkillAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillAssessments and returns the data updated in the database.
     * @param {SkillAssessmentUpdateManyAndReturnArgs} args - Arguments to update many SkillAssessments.
     * @example
     * // Update many SkillAssessments
     * const skillAssessment = await prisma.skillAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkillAssessments and only return the `id`
     * const skillAssessmentWithIdOnly = await prisma.skillAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkillAssessment.
     * @param {SkillAssessmentUpsertArgs} args - Arguments to update or create a SkillAssessment.
     * @example
     * // Update or create a SkillAssessment
     * const skillAssessment = await prisma.skillAssessment.upsert({
     *   create: {
     *     // ... data to create a SkillAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillAssessment we want to update
     *   }
     * })
     */
    upsert<T extends SkillAssessmentUpsertArgs>(args: SelectSubset<T, SkillAssessmentUpsertArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkillAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentCountArgs} args - Arguments to filter SkillAssessments to count.
     * @example
     * // Count the number of SkillAssessments
     * const count = await prisma.skillAssessment.count({
     *   where: {
     *     // ... the filter for the SkillAssessments we want to count
     *   }
     * })
    **/
    count<T extends SkillAssessmentCountArgs>(
      args?: Subset<T, SkillAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAssessmentAggregateArgs>(args: Subset<T, SkillAssessmentAggregateArgs>): Prisma.PrismaPromise<GetSkillAssessmentAggregateType<T>>

    /**
     * Group by SkillAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: SkillAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillAssessment model
   */
  readonly fields: SkillAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends SkillAssessment$questionsArgs<ExtArgs> = {}>(args?: Subset<T, SkillAssessment$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    results<T extends SkillAssessment$resultsArgs<ExtArgs> = {}>(args?: Subset<T, SkillAssessment$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillAssessment model
   */
  interface SkillAssessmentFieldRefs {
    readonly id: FieldRef<"SkillAssessment", 'Int'>
    readonly title: FieldRef<"SkillAssessment", 'String'>
    readonly description: FieldRef<"SkillAssessment", 'String'>
    readonly createdBy: FieldRef<"SkillAssessment", 'Int'>
    readonly createdAt: FieldRef<"SkillAssessment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkillAssessment findUnique
   */
  export type SkillAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SkillAssessment to fetch.
     */
    where: SkillAssessmentWhereUniqueInput
  }

  /**
   * SkillAssessment findUniqueOrThrow
   */
  export type SkillAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SkillAssessment to fetch.
     */
    where: SkillAssessmentWhereUniqueInput
  }

  /**
   * SkillAssessment findFirst
   */
  export type SkillAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SkillAssessment to fetch.
     */
    where?: SkillAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillAssessments to fetch.
     */
    orderBy?: SkillAssessmentOrderByWithRelationInput | SkillAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillAssessments.
     */
    cursor?: SkillAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillAssessments.
     */
    distinct?: SkillAssessmentScalarFieldEnum | SkillAssessmentScalarFieldEnum[]
  }

  /**
   * SkillAssessment findFirstOrThrow
   */
  export type SkillAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SkillAssessment to fetch.
     */
    where?: SkillAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillAssessments to fetch.
     */
    orderBy?: SkillAssessmentOrderByWithRelationInput | SkillAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillAssessments.
     */
    cursor?: SkillAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillAssessments.
     */
    distinct?: SkillAssessmentScalarFieldEnum | SkillAssessmentScalarFieldEnum[]
  }

  /**
   * SkillAssessment findMany
   */
  export type SkillAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SkillAssessments to fetch.
     */
    where?: SkillAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillAssessments to fetch.
     */
    orderBy?: SkillAssessmentOrderByWithRelationInput | SkillAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillAssessments.
     */
    cursor?: SkillAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillAssessments.
     */
    skip?: number
    distinct?: SkillAssessmentScalarFieldEnum | SkillAssessmentScalarFieldEnum[]
  }

  /**
   * SkillAssessment create
   */
  export type SkillAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillAssessment.
     */
    data: XOR<SkillAssessmentCreateInput, SkillAssessmentUncheckedCreateInput>
  }

  /**
   * SkillAssessment createMany
   */
  export type SkillAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillAssessments.
     */
    data: SkillAssessmentCreateManyInput | SkillAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkillAssessment createManyAndReturn
   */
  export type SkillAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many SkillAssessments.
     */
    data: SkillAssessmentCreateManyInput | SkillAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillAssessment update
   */
  export type SkillAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillAssessment.
     */
    data: XOR<SkillAssessmentUpdateInput, SkillAssessmentUncheckedUpdateInput>
    /**
     * Choose, which SkillAssessment to update.
     */
    where: SkillAssessmentWhereUniqueInput
  }

  /**
   * SkillAssessment updateMany
   */
  export type SkillAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillAssessments.
     */
    data: XOR<SkillAssessmentUpdateManyMutationInput, SkillAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which SkillAssessments to update
     */
    where?: SkillAssessmentWhereInput
    /**
     * Limit how many SkillAssessments to update.
     */
    limit?: number
  }

  /**
   * SkillAssessment updateManyAndReturn
   */
  export type SkillAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update SkillAssessments.
     */
    data: XOR<SkillAssessmentUpdateManyMutationInput, SkillAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which SkillAssessments to update
     */
    where?: SkillAssessmentWhereInput
    /**
     * Limit how many SkillAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillAssessment upsert
   */
  export type SkillAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillAssessment to update in case it exists.
     */
    where: SkillAssessmentWhereUniqueInput
    /**
     * In case the SkillAssessment found by the `where` argument doesn't exist, create a new SkillAssessment with this data.
     */
    create: XOR<SkillAssessmentCreateInput, SkillAssessmentUncheckedCreateInput>
    /**
     * In case the SkillAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillAssessmentUpdateInput, SkillAssessmentUncheckedUpdateInput>
  }

  /**
   * SkillAssessment delete
   */
  export type SkillAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
    /**
     * Filter which SkillAssessment to delete.
     */
    where: SkillAssessmentWhereUniqueInput
  }

  /**
   * SkillAssessment deleteMany
   */
  export type SkillAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillAssessments to delete
     */
    where?: SkillAssessmentWhereInput
    /**
     * Limit how many SkillAssessments to delete.
     */
    limit?: number
  }

  /**
   * SkillAssessment.questions
   */
  export type SkillAssessment$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    where?: SkillQuestionWhereInput
    orderBy?: SkillQuestionOrderByWithRelationInput | SkillQuestionOrderByWithRelationInput[]
    cursor?: SkillQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillQuestionScalarFieldEnum | SkillQuestionScalarFieldEnum[]
  }

  /**
   * SkillAssessment.results
   */
  export type SkillAssessment$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    where?: SkillResultWhereInput
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    cursor?: SkillResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillResultScalarFieldEnum | SkillResultScalarFieldEnum[]
  }

  /**
   * SkillAssessment without action
   */
  export type SkillAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillAssessment
     */
    select?: SkillAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillAssessment
     */
    omit?: SkillAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model SkillQuestion
   */

  export type AggregateSkillQuestion = {
    _count: SkillQuestionCountAggregateOutputType | null
    _avg: SkillQuestionAvgAggregateOutputType | null
    _sum: SkillQuestionSumAggregateOutputType | null
    _min: SkillQuestionMinAggregateOutputType | null
    _max: SkillQuestionMaxAggregateOutputType | null
  }

  export type SkillQuestionAvgAggregateOutputType = {
    id: number | null
    assessmentId: number | null
  }

  export type SkillQuestionSumAggregateOutputType = {
    id: number | null
    assessmentId: number | null
  }

  export type SkillQuestionMinAggregateOutputType = {
    id: number | null
    assessmentId: number | null
    question: string | null
    answer: string | null
  }

  export type SkillQuestionMaxAggregateOutputType = {
    id: number | null
    assessmentId: number | null
    question: string | null
    answer: string | null
  }

  export type SkillQuestionCountAggregateOutputType = {
    id: number
    assessmentId: number
    question: number
    options: number
    answer: number
    _all: number
  }


  export type SkillQuestionAvgAggregateInputType = {
    id?: true
    assessmentId?: true
  }

  export type SkillQuestionSumAggregateInputType = {
    id?: true
    assessmentId?: true
  }

  export type SkillQuestionMinAggregateInputType = {
    id?: true
    assessmentId?: true
    question?: true
    answer?: true
  }

  export type SkillQuestionMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    question?: true
    answer?: true
  }

  export type SkillQuestionCountAggregateInputType = {
    id?: true
    assessmentId?: true
    question?: true
    options?: true
    answer?: true
    _all?: true
  }

  export type SkillQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillQuestion to aggregate.
     */
    where?: SkillQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillQuestions to fetch.
     */
    orderBy?: SkillQuestionOrderByWithRelationInput | SkillQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillQuestions
    **/
    _count?: true | SkillQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillQuestionMaxAggregateInputType
  }

  export type GetSkillQuestionAggregateType<T extends SkillQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillQuestion[P]>
      : GetScalarType<T[P], AggregateSkillQuestion[P]>
  }




  export type SkillQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillQuestionWhereInput
    orderBy?: SkillQuestionOrderByWithAggregationInput | SkillQuestionOrderByWithAggregationInput[]
    by: SkillQuestionScalarFieldEnum[] | SkillQuestionScalarFieldEnum
    having?: SkillQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillQuestionCountAggregateInputType | true
    _avg?: SkillQuestionAvgAggregateInputType
    _sum?: SkillQuestionSumAggregateInputType
    _min?: SkillQuestionMinAggregateInputType
    _max?: SkillQuestionMaxAggregateInputType
  }

  export type SkillQuestionGroupByOutputType = {
    id: number
    assessmentId: number
    question: string
    options: JsonValue
    answer: string
    _count: SkillQuestionCountAggregateOutputType | null
    _avg: SkillQuestionAvgAggregateOutputType | null
    _sum: SkillQuestionSumAggregateOutputType | null
    _min: SkillQuestionMinAggregateOutputType | null
    _max: SkillQuestionMaxAggregateOutputType | null
  }

  type GetSkillQuestionGroupByPayload<T extends SkillQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], SkillQuestionGroupByOutputType[P]>
        }
      >
    >


  export type SkillQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillQuestion"]>

  export type SkillQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillQuestion"]>

  export type SkillQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillQuestion"]>

  export type SkillQuestionSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    question?: boolean
    options?: boolean
    answer?: boolean
  }

  export type SkillQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assessmentId" | "question" | "options" | "answer", ExtArgs["result"]["skillQuestion"]>
  export type SkillQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }
  export type SkillQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }
  export type SkillQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }

  export type $SkillQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillQuestion"
    objects: {
      assessment: Prisma.$SkillAssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      assessmentId: number
      question: string
      options: Prisma.JsonValue
      answer: string
    }, ExtArgs["result"]["skillQuestion"]>
    composites: {}
  }

  type SkillQuestionGetPayload<S extends boolean | null | undefined | SkillQuestionDefaultArgs> = $Result.GetResult<Prisma.$SkillQuestionPayload, S>

  type SkillQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillQuestionCountAggregateInputType | true
    }

  export interface SkillQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillQuestion'], meta: { name: 'SkillQuestion' } }
    /**
     * Find zero or one SkillQuestion that matches the filter.
     * @param {SkillQuestionFindUniqueArgs} args - Arguments to find a SkillQuestion
     * @example
     * // Get one SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillQuestionFindUniqueArgs>(args: SelectSubset<T, SkillQuestionFindUniqueArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkillQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillQuestionFindUniqueOrThrowArgs} args - Arguments to find a SkillQuestion
     * @example
     * // Get one SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionFindFirstArgs} args - Arguments to find a SkillQuestion
     * @example
     * // Get one SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillQuestionFindFirstArgs>(args?: SelectSubset<T, SkillQuestionFindFirstArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionFindFirstOrThrowArgs} args - Arguments to find a SkillQuestion
     * @example
     * // Get one SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkillQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillQuestions
     * const skillQuestions = await prisma.skillQuestion.findMany()
     * 
     * // Get first 10 SkillQuestions
     * const skillQuestions = await prisma.skillQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillQuestionWithIdOnly = await prisma.skillQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillQuestionFindManyArgs>(args?: SelectSubset<T, SkillQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkillQuestion.
     * @param {SkillQuestionCreateArgs} args - Arguments to create a SkillQuestion.
     * @example
     * // Create one SkillQuestion
     * const SkillQuestion = await prisma.skillQuestion.create({
     *   data: {
     *     // ... data to create a SkillQuestion
     *   }
     * })
     * 
     */
    create<T extends SkillQuestionCreateArgs>(args: SelectSubset<T, SkillQuestionCreateArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkillQuestions.
     * @param {SkillQuestionCreateManyArgs} args - Arguments to create many SkillQuestions.
     * @example
     * // Create many SkillQuestions
     * const skillQuestion = await prisma.skillQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillQuestionCreateManyArgs>(args?: SelectSubset<T, SkillQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillQuestions and returns the data saved in the database.
     * @param {SkillQuestionCreateManyAndReturnArgs} args - Arguments to create many SkillQuestions.
     * @example
     * // Create many SkillQuestions
     * const skillQuestion = await prisma.skillQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillQuestions and only return the `id`
     * const skillQuestionWithIdOnly = await prisma.skillQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkillQuestion.
     * @param {SkillQuestionDeleteArgs} args - Arguments to delete one SkillQuestion.
     * @example
     * // Delete one SkillQuestion
     * const SkillQuestion = await prisma.skillQuestion.delete({
     *   where: {
     *     // ... filter to delete one SkillQuestion
     *   }
     * })
     * 
     */
    delete<T extends SkillQuestionDeleteArgs>(args: SelectSubset<T, SkillQuestionDeleteArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkillQuestion.
     * @param {SkillQuestionUpdateArgs} args - Arguments to update one SkillQuestion.
     * @example
     * // Update one SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillQuestionUpdateArgs>(args: SelectSubset<T, SkillQuestionUpdateArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkillQuestions.
     * @param {SkillQuestionDeleteManyArgs} args - Arguments to filter SkillQuestions to delete.
     * @example
     * // Delete a few SkillQuestions
     * const { count } = await prisma.skillQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillQuestionDeleteManyArgs>(args?: SelectSubset<T, SkillQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillQuestions
     * const skillQuestion = await prisma.skillQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillQuestionUpdateManyArgs>(args: SelectSubset<T, SkillQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillQuestions and returns the data updated in the database.
     * @param {SkillQuestionUpdateManyAndReturnArgs} args - Arguments to update many SkillQuestions.
     * @example
     * // Update many SkillQuestions
     * const skillQuestion = await prisma.skillQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkillQuestions and only return the `id`
     * const skillQuestionWithIdOnly = await prisma.skillQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkillQuestion.
     * @param {SkillQuestionUpsertArgs} args - Arguments to update or create a SkillQuestion.
     * @example
     * // Update or create a SkillQuestion
     * const skillQuestion = await prisma.skillQuestion.upsert({
     *   create: {
     *     // ... data to create a SkillQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillQuestion we want to update
     *   }
     * })
     */
    upsert<T extends SkillQuestionUpsertArgs>(args: SelectSubset<T, SkillQuestionUpsertArgs<ExtArgs>>): Prisma__SkillQuestionClient<$Result.GetResult<Prisma.$SkillQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkillQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionCountArgs} args - Arguments to filter SkillQuestions to count.
     * @example
     * // Count the number of SkillQuestions
     * const count = await prisma.skillQuestion.count({
     *   where: {
     *     // ... the filter for the SkillQuestions we want to count
     *   }
     * })
    **/
    count<T extends SkillQuestionCountArgs>(
      args?: Subset<T, SkillQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillQuestionAggregateArgs>(args: Subset<T, SkillQuestionAggregateArgs>): Prisma.PrismaPromise<GetSkillQuestionAggregateType<T>>

    /**
     * Group by SkillQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillQuestionGroupByArgs['orderBy'] }
        : { orderBy?: SkillQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillQuestion model
   */
  readonly fields: SkillQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends SkillAssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillAssessmentDefaultArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillQuestion model
   */
  interface SkillQuestionFieldRefs {
    readonly id: FieldRef<"SkillQuestion", 'Int'>
    readonly assessmentId: FieldRef<"SkillQuestion", 'Int'>
    readonly question: FieldRef<"SkillQuestion", 'String'>
    readonly options: FieldRef<"SkillQuestion", 'Json'>
    readonly answer: FieldRef<"SkillQuestion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SkillQuestion findUnique
   */
  export type SkillQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter, which SkillQuestion to fetch.
     */
    where: SkillQuestionWhereUniqueInput
  }

  /**
   * SkillQuestion findUniqueOrThrow
   */
  export type SkillQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter, which SkillQuestion to fetch.
     */
    where: SkillQuestionWhereUniqueInput
  }

  /**
   * SkillQuestion findFirst
   */
  export type SkillQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter, which SkillQuestion to fetch.
     */
    where?: SkillQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillQuestions to fetch.
     */
    orderBy?: SkillQuestionOrderByWithRelationInput | SkillQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillQuestions.
     */
    cursor?: SkillQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillQuestions.
     */
    distinct?: SkillQuestionScalarFieldEnum | SkillQuestionScalarFieldEnum[]
  }

  /**
   * SkillQuestion findFirstOrThrow
   */
  export type SkillQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter, which SkillQuestion to fetch.
     */
    where?: SkillQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillQuestions to fetch.
     */
    orderBy?: SkillQuestionOrderByWithRelationInput | SkillQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillQuestions.
     */
    cursor?: SkillQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillQuestions.
     */
    distinct?: SkillQuestionScalarFieldEnum | SkillQuestionScalarFieldEnum[]
  }

  /**
   * SkillQuestion findMany
   */
  export type SkillQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter, which SkillQuestions to fetch.
     */
    where?: SkillQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillQuestions to fetch.
     */
    orderBy?: SkillQuestionOrderByWithRelationInput | SkillQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillQuestions.
     */
    cursor?: SkillQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillQuestions.
     */
    skip?: number
    distinct?: SkillQuestionScalarFieldEnum | SkillQuestionScalarFieldEnum[]
  }

  /**
   * SkillQuestion create
   */
  export type SkillQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillQuestion.
     */
    data: XOR<SkillQuestionCreateInput, SkillQuestionUncheckedCreateInput>
  }

  /**
   * SkillQuestion createMany
   */
  export type SkillQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillQuestions.
     */
    data: SkillQuestionCreateManyInput | SkillQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkillQuestion createManyAndReturn
   */
  export type SkillQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many SkillQuestions.
     */
    data: SkillQuestionCreateManyInput | SkillQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillQuestion update
   */
  export type SkillQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillQuestion.
     */
    data: XOR<SkillQuestionUpdateInput, SkillQuestionUncheckedUpdateInput>
    /**
     * Choose, which SkillQuestion to update.
     */
    where: SkillQuestionWhereUniqueInput
  }

  /**
   * SkillQuestion updateMany
   */
  export type SkillQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillQuestions.
     */
    data: XOR<SkillQuestionUpdateManyMutationInput, SkillQuestionUncheckedUpdateManyInput>
    /**
     * Filter which SkillQuestions to update
     */
    where?: SkillQuestionWhereInput
    /**
     * Limit how many SkillQuestions to update.
     */
    limit?: number
  }

  /**
   * SkillQuestion updateManyAndReturn
   */
  export type SkillQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * The data used to update SkillQuestions.
     */
    data: XOR<SkillQuestionUpdateManyMutationInput, SkillQuestionUncheckedUpdateManyInput>
    /**
     * Filter which SkillQuestions to update
     */
    where?: SkillQuestionWhereInput
    /**
     * Limit how many SkillQuestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillQuestion upsert
   */
  export type SkillQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillQuestion to update in case it exists.
     */
    where: SkillQuestionWhereUniqueInput
    /**
     * In case the SkillQuestion found by the `where` argument doesn't exist, create a new SkillQuestion with this data.
     */
    create: XOR<SkillQuestionCreateInput, SkillQuestionUncheckedCreateInput>
    /**
     * In case the SkillQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillQuestionUpdateInput, SkillQuestionUncheckedUpdateInput>
  }

  /**
   * SkillQuestion delete
   */
  export type SkillQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
    /**
     * Filter which SkillQuestion to delete.
     */
    where: SkillQuestionWhereUniqueInput
  }

  /**
   * SkillQuestion deleteMany
   */
  export type SkillQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillQuestions to delete
     */
    where?: SkillQuestionWhereInput
    /**
     * Limit how many SkillQuestions to delete.
     */
    limit?: number
  }

  /**
   * SkillQuestion without action
   */
  export type SkillQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillQuestion
     */
    select?: SkillQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillQuestion
     */
    omit?: SkillQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillQuestionInclude<ExtArgs> | null
  }


  /**
   * Model SkillResult
   */

  export type AggregateSkillResult = {
    _count: SkillResultCountAggregateOutputType | null
    _avg: SkillResultAvgAggregateOutputType | null
    _sum: SkillResultSumAggregateOutputType | null
    _min: SkillResultMinAggregateOutputType | null
    _max: SkillResultMaxAggregateOutputType | null
  }

  export type SkillResultAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    assessmentId: number | null
    score: number | null
  }

  export type SkillResultSumAggregateOutputType = {
    id: number | null
    userId: number | null
    assessmentId: number | null
    score: number | null
  }

  export type SkillResultMinAggregateOutputType = {
    id: number | null
    userId: number | null
    assessmentId: number | null
    score: number | null
    isPassed: boolean | null
    certificateUrl: string | null
    certificateCode: string | null
    startedAt: Date | null
    finishedAt: Date | null
    createdAt: Date | null
  }

  export type SkillResultMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    assessmentId: number | null
    score: number | null
    isPassed: boolean | null
    certificateUrl: string | null
    certificateCode: string | null
    startedAt: Date | null
    finishedAt: Date | null
    createdAt: Date | null
  }

  export type SkillResultCountAggregateOutputType = {
    id: number
    userId: number
    assessmentId: number
    score: number
    isPassed: number
    certificateUrl: number
    certificateCode: number
    startedAt: number
    finishedAt: number
    createdAt: number
    _all: number
  }


  export type SkillResultAvgAggregateInputType = {
    id?: true
    userId?: true
    assessmentId?: true
    score?: true
  }

  export type SkillResultSumAggregateInputType = {
    id?: true
    userId?: true
    assessmentId?: true
    score?: true
  }

  export type SkillResultMinAggregateInputType = {
    id?: true
    userId?: true
    assessmentId?: true
    score?: true
    isPassed?: true
    certificateUrl?: true
    certificateCode?: true
    startedAt?: true
    finishedAt?: true
    createdAt?: true
  }

  export type SkillResultMaxAggregateInputType = {
    id?: true
    userId?: true
    assessmentId?: true
    score?: true
    isPassed?: true
    certificateUrl?: true
    certificateCode?: true
    startedAt?: true
    finishedAt?: true
    createdAt?: true
  }

  export type SkillResultCountAggregateInputType = {
    id?: true
    userId?: true
    assessmentId?: true
    score?: true
    isPassed?: true
    certificateUrl?: true
    certificateCode?: true
    startedAt?: true
    finishedAt?: true
    createdAt?: true
    _all?: true
  }

  export type SkillResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillResult to aggregate.
     */
    where?: SkillResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillResults to fetch.
     */
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillResults
    **/
    _count?: true | SkillResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillResultMaxAggregateInputType
  }

  export type GetSkillResultAggregateType<T extends SkillResultAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillResult[P]>
      : GetScalarType<T[P], AggregateSkillResult[P]>
  }




  export type SkillResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillResultWhereInput
    orderBy?: SkillResultOrderByWithAggregationInput | SkillResultOrderByWithAggregationInput[]
    by: SkillResultScalarFieldEnum[] | SkillResultScalarFieldEnum
    having?: SkillResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillResultCountAggregateInputType | true
    _avg?: SkillResultAvgAggregateInputType
    _sum?: SkillResultSumAggregateInputType
    _min?: SkillResultMinAggregateInputType
    _max?: SkillResultMaxAggregateInputType
  }

  export type SkillResultGroupByOutputType = {
    id: number
    userId: number
    assessmentId: number
    score: number
    isPassed: boolean
    certificateUrl: string | null
    certificateCode: string | null
    startedAt: Date | null
    finishedAt: Date | null
    createdAt: Date
    _count: SkillResultCountAggregateOutputType | null
    _avg: SkillResultAvgAggregateOutputType | null
    _sum: SkillResultSumAggregateOutputType | null
    _min: SkillResultMinAggregateOutputType | null
    _max: SkillResultMaxAggregateOutputType | null
  }

  type GetSkillResultGroupByPayload<T extends SkillResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillResultGroupByOutputType[P]>
            : GetScalarType<T[P], SkillResultGroupByOutputType[P]>
        }
      >
    >


  export type SkillResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    assessmentId?: boolean
    score?: boolean
    isPassed?: boolean
    certificateUrl?: boolean
    certificateCode?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillResult"]>

  export type SkillResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    assessmentId?: boolean
    score?: boolean
    isPassed?: boolean
    certificateUrl?: boolean
    certificateCode?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillResult"]>

  export type SkillResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    assessmentId?: boolean
    score?: boolean
    isPassed?: boolean
    certificateUrl?: boolean
    certificateCode?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillResult"]>

  export type SkillResultSelectScalar = {
    id?: boolean
    userId?: boolean
    assessmentId?: boolean
    score?: boolean
    isPassed?: boolean
    certificateUrl?: boolean
    certificateCode?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    createdAt?: boolean
  }

  export type SkillResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "assessmentId" | "score" | "isPassed" | "certificateUrl" | "certificateCode" | "startedAt" | "finishedAt" | "createdAt", ExtArgs["result"]["skillResult"]>
  export type SkillResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }
  export type SkillResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }
  export type SkillResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    assessment?: boolean | SkillAssessmentDefaultArgs<ExtArgs>
  }

  export type $SkillResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      assessment: Prisma.$SkillAssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      assessmentId: number
      score: number
      isPassed: boolean
      certificateUrl: string | null
      certificateCode: string | null
      startedAt: Date | null
      finishedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["skillResult"]>
    composites: {}
  }

  type SkillResultGetPayload<S extends boolean | null | undefined | SkillResultDefaultArgs> = $Result.GetResult<Prisma.$SkillResultPayload, S>

  type SkillResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillResultCountAggregateInputType | true
    }

  export interface SkillResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillResult'], meta: { name: 'SkillResult' } }
    /**
     * Find zero or one SkillResult that matches the filter.
     * @param {SkillResultFindUniqueArgs} args - Arguments to find a SkillResult
     * @example
     * // Get one SkillResult
     * const skillResult = await prisma.skillResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillResultFindUniqueArgs>(args: SelectSubset<T, SkillResultFindUniqueArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkillResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillResultFindUniqueOrThrowArgs} args - Arguments to find a SkillResult
     * @example
     * // Get one SkillResult
     * const skillResult = await prisma.skillResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillResultFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultFindFirstArgs} args - Arguments to find a SkillResult
     * @example
     * // Get one SkillResult
     * const skillResult = await prisma.skillResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillResultFindFirstArgs>(args?: SelectSubset<T, SkillResultFindFirstArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultFindFirstOrThrowArgs} args - Arguments to find a SkillResult
     * @example
     * // Get one SkillResult
     * const skillResult = await prisma.skillResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillResultFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkillResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillResults
     * const skillResults = await prisma.skillResult.findMany()
     * 
     * // Get first 10 SkillResults
     * const skillResults = await prisma.skillResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillResultWithIdOnly = await prisma.skillResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillResultFindManyArgs>(args?: SelectSubset<T, SkillResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkillResult.
     * @param {SkillResultCreateArgs} args - Arguments to create a SkillResult.
     * @example
     * // Create one SkillResult
     * const SkillResult = await prisma.skillResult.create({
     *   data: {
     *     // ... data to create a SkillResult
     *   }
     * })
     * 
     */
    create<T extends SkillResultCreateArgs>(args: SelectSubset<T, SkillResultCreateArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkillResults.
     * @param {SkillResultCreateManyArgs} args - Arguments to create many SkillResults.
     * @example
     * // Create many SkillResults
     * const skillResult = await prisma.skillResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillResultCreateManyArgs>(args?: SelectSubset<T, SkillResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkillResults and returns the data saved in the database.
     * @param {SkillResultCreateManyAndReturnArgs} args - Arguments to create many SkillResults.
     * @example
     * // Create many SkillResults
     * const skillResult = await prisma.skillResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkillResults and only return the `id`
     * const skillResultWithIdOnly = await prisma.skillResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillResultCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkillResult.
     * @param {SkillResultDeleteArgs} args - Arguments to delete one SkillResult.
     * @example
     * // Delete one SkillResult
     * const SkillResult = await prisma.skillResult.delete({
     *   where: {
     *     // ... filter to delete one SkillResult
     *   }
     * })
     * 
     */
    delete<T extends SkillResultDeleteArgs>(args: SelectSubset<T, SkillResultDeleteArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkillResult.
     * @param {SkillResultUpdateArgs} args - Arguments to update one SkillResult.
     * @example
     * // Update one SkillResult
     * const skillResult = await prisma.skillResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillResultUpdateArgs>(args: SelectSubset<T, SkillResultUpdateArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkillResults.
     * @param {SkillResultDeleteManyArgs} args - Arguments to filter SkillResults to delete.
     * @example
     * // Delete a few SkillResults
     * const { count } = await prisma.skillResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillResultDeleteManyArgs>(args?: SelectSubset<T, SkillResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillResults
     * const skillResult = await prisma.skillResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillResultUpdateManyArgs>(args: SelectSubset<T, SkillResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillResults and returns the data updated in the database.
     * @param {SkillResultUpdateManyAndReturnArgs} args - Arguments to update many SkillResults.
     * @example
     * // Update many SkillResults
     * const skillResult = await prisma.skillResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkillResults and only return the `id`
     * const skillResultWithIdOnly = await prisma.skillResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillResultUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkillResult.
     * @param {SkillResultUpsertArgs} args - Arguments to update or create a SkillResult.
     * @example
     * // Update or create a SkillResult
     * const skillResult = await prisma.skillResult.upsert({
     *   create: {
     *     // ... data to create a SkillResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillResult we want to update
     *   }
     * })
     */
    upsert<T extends SkillResultUpsertArgs>(args: SelectSubset<T, SkillResultUpsertArgs<ExtArgs>>): Prisma__SkillResultClient<$Result.GetResult<Prisma.$SkillResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkillResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultCountArgs} args - Arguments to filter SkillResults to count.
     * @example
     * // Count the number of SkillResults
     * const count = await prisma.skillResult.count({
     *   where: {
     *     // ... the filter for the SkillResults we want to count
     *   }
     * })
    **/
    count<T extends SkillResultCountArgs>(
      args?: Subset<T, SkillResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillResultAggregateArgs>(args: Subset<T, SkillResultAggregateArgs>): Prisma.PrismaPromise<GetSkillResultAggregateType<T>>

    /**
     * Group by SkillResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillResultGroupByArgs['orderBy'] }
        : { orderBy?: SkillResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillResult model
   */
  readonly fields: SkillResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assessment<T extends SkillAssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillAssessmentDefaultArgs<ExtArgs>>): Prisma__SkillAssessmentClient<$Result.GetResult<Prisma.$SkillAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillResult model
   */
  interface SkillResultFieldRefs {
    readonly id: FieldRef<"SkillResult", 'Int'>
    readonly userId: FieldRef<"SkillResult", 'Int'>
    readonly assessmentId: FieldRef<"SkillResult", 'Int'>
    readonly score: FieldRef<"SkillResult", 'Int'>
    readonly isPassed: FieldRef<"SkillResult", 'Boolean'>
    readonly certificateUrl: FieldRef<"SkillResult", 'String'>
    readonly certificateCode: FieldRef<"SkillResult", 'String'>
    readonly startedAt: FieldRef<"SkillResult", 'DateTime'>
    readonly finishedAt: FieldRef<"SkillResult", 'DateTime'>
    readonly createdAt: FieldRef<"SkillResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkillResult findUnique
   */
  export type SkillResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter, which SkillResult to fetch.
     */
    where: SkillResultWhereUniqueInput
  }

  /**
   * SkillResult findUniqueOrThrow
   */
  export type SkillResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter, which SkillResult to fetch.
     */
    where: SkillResultWhereUniqueInput
  }

  /**
   * SkillResult findFirst
   */
  export type SkillResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter, which SkillResult to fetch.
     */
    where?: SkillResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillResults to fetch.
     */
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillResults.
     */
    cursor?: SkillResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillResults.
     */
    distinct?: SkillResultScalarFieldEnum | SkillResultScalarFieldEnum[]
  }

  /**
   * SkillResult findFirstOrThrow
   */
  export type SkillResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter, which SkillResult to fetch.
     */
    where?: SkillResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillResults to fetch.
     */
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillResults.
     */
    cursor?: SkillResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillResults.
     */
    distinct?: SkillResultScalarFieldEnum | SkillResultScalarFieldEnum[]
  }

  /**
   * SkillResult findMany
   */
  export type SkillResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter, which SkillResults to fetch.
     */
    where?: SkillResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillResults to fetch.
     */
    orderBy?: SkillResultOrderByWithRelationInput | SkillResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillResults.
     */
    cursor?: SkillResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillResults.
     */
    skip?: number
    distinct?: SkillResultScalarFieldEnum | SkillResultScalarFieldEnum[]
  }

  /**
   * SkillResult create
   */
  export type SkillResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillResult.
     */
    data: XOR<SkillResultCreateInput, SkillResultUncheckedCreateInput>
  }

  /**
   * SkillResult createMany
   */
  export type SkillResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillResults.
     */
    data: SkillResultCreateManyInput | SkillResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkillResult createManyAndReturn
   */
  export type SkillResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * The data used to create many SkillResults.
     */
    data: SkillResultCreateManyInput | SkillResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillResult update
   */
  export type SkillResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillResult.
     */
    data: XOR<SkillResultUpdateInput, SkillResultUncheckedUpdateInput>
    /**
     * Choose, which SkillResult to update.
     */
    where: SkillResultWhereUniqueInput
  }

  /**
   * SkillResult updateMany
   */
  export type SkillResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillResults.
     */
    data: XOR<SkillResultUpdateManyMutationInput, SkillResultUncheckedUpdateManyInput>
    /**
     * Filter which SkillResults to update
     */
    where?: SkillResultWhereInput
    /**
     * Limit how many SkillResults to update.
     */
    limit?: number
  }

  /**
   * SkillResult updateManyAndReturn
   */
  export type SkillResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * The data used to update SkillResults.
     */
    data: XOR<SkillResultUpdateManyMutationInput, SkillResultUncheckedUpdateManyInput>
    /**
     * Filter which SkillResults to update
     */
    where?: SkillResultWhereInput
    /**
     * Limit how many SkillResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkillResult upsert
   */
  export type SkillResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillResult to update in case it exists.
     */
    where: SkillResultWhereUniqueInput
    /**
     * In case the SkillResult found by the `where` argument doesn't exist, create a new SkillResult with this data.
     */
    create: XOR<SkillResultCreateInput, SkillResultUncheckedCreateInput>
    /**
     * In case the SkillResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillResultUpdateInput, SkillResultUncheckedUpdateInput>
  }

  /**
   * SkillResult delete
   */
  export type SkillResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
    /**
     * Filter which SkillResult to delete.
     */
    where: SkillResultWhereUniqueInput
  }

  /**
   * SkillResult deleteMany
   */
  export type SkillResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillResults to delete
     */
    where?: SkillResultWhereInput
    /**
     * Limit how many SkillResults to delete.
     */
    limit?: number
  }

  /**
   * SkillResult without action
   */
  export type SkillResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillResult
     */
    select?: SkillResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillResult
     */
    omit?: SkillResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillResultInclude<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserBadgeSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    badgeName: string | null
    badgeIcon: string | null
    awardedAt: Date | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    badgeName: string | null
    badgeIcon: string | null
    awardedAt: Date | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeName: number
    badgeIcon: number
    awardedAt: number
    _all: number
  }


  export type UserBadgeAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserBadgeSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeName?: true
    badgeIcon?: true
    awardedAt?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeName?: true
    badgeIcon?: true
    awardedAt?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeName?: true
    badgeIcon?: true
    awardedAt?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBadgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBadgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _avg?: UserBadgeAvgAggregateInputType
    _sum?: UserBadgeSumAggregateInputType
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: number
    userId: number
    badgeName: string
    badgeIcon: string | null
    awardedAt: Date
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeName?: boolean
    badgeIcon?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeName?: boolean
    badgeIcon?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeName?: boolean
    badgeIcon?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeName?: boolean
    badgeIcon?: boolean
    awardedAt?: boolean
  }

  export type UserBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "badgeName" | "badgeIcon" | "awardedAt", ExtArgs["result"]["userBadge"]>
  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      badgeName: string
      badgeIcon: string | null
      awardedAt: Date
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges and returns the data updated in the database.
     * @param {UserBadgeUpdateManyAndReturnArgs} args - Arguments to update many UserBadges.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserBadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, UserBadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'Int'>
    readonly userId: FieldRef<"UserBadge", 'Int'>
    readonly badgeName: FieldRef<"UserBadge", 'String'>
    readonly badgeIcon: FieldRef<"UserBadge", 'String'>
    readonly awardedAt: FieldRef<"UserBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
  }

  /**
   * UserBadge updateManyAndReturn
   */
  export type UserBadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to delete.
     */
    limit?: number
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model GeneratedCV
   */

  export type AggregateGeneratedCV = {
    _count: GeneratedCVCountAggregateOutputType | null
    _avg: GeneratedCVAvgAggregateOutputType | null
    _sum: GeneratedCVSumAggregateOutputType | null
    _min: GeneratedCVMinAggregateOutputType | null
    _max: GeneratedCVMaxAggregateOutputType | null
  }

  export type GeneratedCVAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type GeneratedCVSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type GeneratedCVMinAggregateOutputType = {
    id: number | null
    userId: number | null
    fileUrl: string | null
    templateUsed: string | null
    createdAt: Date | null
  }

  export type GeneratedCVMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    fileUrl: string | null
    templateUsed: string | null
    createdAt: Date | null
  }

  export type GeneratedCVCountAggregateOutputType = {
    id: number
    userId: number
    fileUrl: number
    templateUsed: number
    additionalInfo: number
    createdAt: number
    _all: number
  }


  export type GeneratedCVAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type GeneratedCVSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type GeneratedCVMinAggregateInputType = {
    id?: true
    userId?: true
    fileUrl?: true
    templateUsed?: true
    createdAt?: true
  }

  export type GeneratedCVMaxAggregateInputType = {
    id?: true
    userId?: true
    fileUrl?: true
    templateUsed?: true
    createdAt?: true
  }

  export type GeneratedCVCountAggregateInputType = {
    id?: true
    userId?: true
    fileUrl?: true
    templateUsed?: true
    additionalInfo?: true
    createdAt?: true
    _all?: true
  }

  export type GeneratedCVAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedCV to aggregate.
     */
    where?: GeneratedCVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedCVS to fetch.
     */
    orderBy?: GeneratedCVOrderByWithRelationInput | GeneratedCVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneratedCVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedCVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedCVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneratedCVS
    **/
    _count?: true | GeneratedCVCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneratedCVAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneratedCVSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneratedCVMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneratedCVMaxAggregateInputType
  }

  export type GetGeneratedCVAggregateType<T extends GeneratedCVAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneratedCV]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneratedCV[P]>
      : GetScalarType<T[P], AggregateGeneratedCV[P]>
  }




  export type GeneratedCVGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneratedCVWhereInput
    orderBy?: GeneratedCVOrderByWithAggregationInput | GeneratedCVOrderByWithAggregationInput[]
    by: GeneratedCVScalarFieldEnum[] | GeneratedCVScalarFieldEnum
    having?: GeneratedCVScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneratedCVCountAggregateInputType | true
    _avg?: GeneratedCVAvgAggregateInputType
    _sum?: GeneratedCVSumAggregateInputType
    _min?: GeneratedCVMinAggregateInputType
    _max?: GeneratedCVMaxAggregateInputType
  }

  export type GeneratedCVGroupByOutputType = {
    id: number
    userId: number
    fileUrl: string
    templateUsed: string
    additionalInfo: JsonValue | null
    createdAt: Date
    _count: GeneratedCVCountAggregateOutputType | null
    _avg: GeneratedCVAvgAggregateOutputType | null
    _sum: GeneratedCVSumAggregateOutputType | null
    _min: GeneratedCVMinAggregateOutputType | null
    _max: GeneratedCVMaxAggregateOutputType | null
  }

  type GetGeneratedCVGroupByPayload<T extends GeneratedCVGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneratedCVGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneratedCVGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneratedCVGroupByOutputType[P]>
            : GetScalarType<T[P], GeneratedCVGroupByOutputType[P]>
        }
      >
    >


  export type GeneratedCVSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileUrl?: boolean
    templateUsed?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generatedCV"]>

  export type GeneratedCVSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileUrl?: boolean
    templateUsed?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generatedCV"]>

  export type GeneratedCVSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileUrl?: boolean
    templateUsed?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generatedCV"]>

  export type GeneratedCVSelectScalar = {
    id?: boolean
    userId?: boolean
    fileUrl?: boolean
    templateUsed?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
  }

  export type GeneratedCVOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fileUrl" | "templateUsed" | "additionalInfo" | "createdAt", ExtArgs["result"]["generatedCV"]>
  export type GeneratedCVInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GeneratedCVIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GeneratedCVIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GeneratedCVPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneratedCV"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      fileUrl: string
      templateUsed: string
      additionalInfo: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["generatedCV"]>
    composites: {}
  }

  type GeneratedCVGetPayload<S extends boolean | null | undefined | GeneratedCVDefaultArgs> = $Result.GetResult<Prisma.$GeneratedCVPayload, S>

  type GeneratedCVCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneratedCVFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneratedCVCountAggregateInputType | true
    }

  export interface GeneratedCVDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneratedCV'], meta: { name: 'GeneratedCV' } }
    /**
     * Find zero or one GeneratedCV that matches the filter.
     * @param {GeneratedCVFindUniqueArgs} args - Arguments to find a GeneratedCV
     * @example
     * // Get one GeneratedCV
     * const generatedCV = await prisma.generatedCV.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneratedCVFindUniqueArgs>(args: SelectSubset<T, GeneratedCVFindUniqueArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneratedCV that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneratedCVFindUniqueOrThrowArgs} args - Arguments to find a GeneratedCV
     * @example
     * // Get one GeneratedCV
     * const generatedCV = await prisma.generatedCV.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneratedCVFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneratedCVFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedCV that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVFindFirstArgs} args - Arguments to find a GeneratedCV
     * @example
     * // Get one GeneratedCV
     * const generatedCV = await prisma.generatedCV.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneratedCVFindFirstArgs>(args?: SelectSubset<T, GeneratedCVFindFirstArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneratedCV that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVFindFirstOrThrowArgs} args - Arguments to find a GeneratedCV
     * @example
     * // Get one GeneratedCV
     * const generatedCV = await prisma.generatedCV.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneratedCVFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneratedCVFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneratedCVS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneratedCVS
     * const generatedCVS = await prisma.generatedCV.findMany()
     * 
     * // Get first 10 GeneratedCVS
     * const generatedCVS = await prisma.generatedCV.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generatedCVWithIdOnly = await prisma.generatedCV.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneratedCVFindManyArgs>(args?: SelectSubset<T, GeneratedCVFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneratedCV.
     * @param {GeneratedCVCreateArgs} args - Arguments to create a GeneratedCV.
     * @example
     * // Create one GeneratedCV
     * const GeneratedCV = await prisma.generatedCV.create({
     *   data: {
     *     // ... data to create a GeneratedCV
     *   }
     * })
     * 
     */
    create<T extends GeneratedCVCreateArgs>(args: SelectSubset<T, GeneratedCVCreateArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneratedCVS.
     * @param {GeneratedCVCreateManyArgs} args - Arguments to create many GeneratedCVS.
     * @example
     * // Create many GeneratedCVS
     * const generatedCV = await prisma.generatedCV.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneratedCVCreateManyArgs>(args?: SelectSubset<T, GeneratedCVCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeneratedCVS and returns the data saved in the database.
     * @param {GeneratedCVCreateManyAndReturnArgs} args - Arguments to create many GeneratedCVS.
     * @example
     * // Create many GeneratedCVS
     * const generatedCV = await prisma.generatedCV.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeneratedCVS and only return the `id`
     * const generatedCVWithIdOnly = await prisma.generatedCV.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneratedCVCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneratedCVCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeneratedCV.
     * @param {GeneratedCVDeleteArgs} args - Arguments to delete one GeneratedCV.
     * @example
     * // Delete one GeneratedCV
     * const GeneratedCV = await prisma.generatedCV.delete({
     *   where: {
     *     // ... filter to delete one GeneratedCV
     *   }
     * })
     * 
     */
    delete<T extends GeneratedCVDeleteArgs>(args: SelectSubset<T, GeneratedCVDeleteArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneratedCV.
     * @param {GeneratedCVUpdateArgs} args - Arguments to update one GeneratedCV.
     * @example
     * // Update one GeneratedCV
     * const generatedCV = await prisma.generatedCV.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneratedCVUpdateArgs>(args: SelectSubset<T, GeneratedCVUpdateArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneratedCVS.
     * @param {GeneratedCVDeleteManyArgs} args - Arguments to filter GeneratedCVS to delete.
     * @example
     * // Delete a few GeneratedCVS
     * const { count } = await prisma.generatedCV.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneratedCVDeleteManyArgs>(args?: SelectSubset<T, GeneratedCVDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedCVS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneratedCVS
     * const generatedCV = await prisma.generatedCV.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneratedCVUpdateManyArgs>(args: SelectSubset<T, GeneratedCVUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneratedCVS and returns the data updated in the database.
     * @param {GeneratedCVUpdateManyAndReturnArgs} args - Arguments to update many GeneratedCVS.
     * @example
     * // Update many GeneratedCVS
     * const generatedCV = await prisma.generatedCV.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeneratedCVS and only return the `id`
     * const generatedCVWithIdOnly = await prisma.generatedCV.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneratedCVUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneratedCVUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeneratedCV.
     * @param {GeneratedCVUpsertArgs} args - Arguments to update or create a GeneratedCV.
     * @example
     * // Update or create a GeneratedCV
     * const generatedCV = await prisma.generatedCV.upsert({
     *   create: {
     *     // ... data to create a GeneratedCV
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneratedCV we want to update
     *   }
     * })
     */
    upsert<T extends GeneratedCVUpsertArgs>(args: SelectSubset<T, GeneratedCVUpsertArgs<ExtArgs>>): Prisma__GeneratedCVClient<$Result.GetResult<Prisma.$GeneratedCVPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneratedCVS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVCountArgs} args - Arguments to filter GeneratedCVS to count.
     * @example
     * // Count the number of GeneratedCVS
     * const count = await prisma.generatedCV.count({
     *   where: {
     *     // ... the filter for the GeneratedCVS we want to count
     *   }
     * })
    **/
    count<T extends GeneratedCVCountArgs>(
      args?: Subset<T, GeneratedCVCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneratedCVCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneratedCV.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneratedCVAggregateArgs>(args: Subset<T, GeneratedCVAggregateArgs>): Prisma.PrismaPromise<GetGeneratedCVAggregateType<T>>

    /**
     * Group by GeneratedCV.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneratedCVGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneratedCVGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneratedCVGroupByArgs['orderBy'] }
        : { orderBy?: GeneratedCVGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneratedCVGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneratedCVGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneratedCV model
   */
  readonly fields: GeneratedCVFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneratedCV.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneratedCVClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneratedCV model
   */
  interface GeneratedCVFieldRefs {
    readonly id: FieldRef<"GeneratedCV", 'Int'>
    readonly userId: FieldRef<"GeneratedCV", 'Int'>
    readonly fileUrl: FieldRef<"GeneratedCV", 'String'>
    readonly templateUsed: FieldRef<"GeneratedCV", 'String'>
    readonly additionalInfo: FieldRef<"GeneratedCV", 'Json'>
    readonly createdAt: FieldRef<"GeneratedCV", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeneratedCV findUnique
   */
  export type GeneratedCVFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter, which GeneratedCV to fetch.
     */
    where: GeneratedCVWhereUniqueInput
  }

  /**
   * GeneratedCV findUniqueOrThrow
   */
  export type GeneratedCVFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter, which GeneratedCV to fetch.
     */
    where: GeneratedCVWhereUniqueInput
  }

  /**
   * GeneratedCV findFirst
   */
  export type GeneratedCVFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter, which GeneratedCV to fetch.
     */
    where?: GeneratedCVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedCVS to fetch.
     */
    orderBy?: GeneratedCVOrderByWithRelationInput | GeneratedCVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedCVS.
     */
    cursor?: GeneratedCVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedCVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedCVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedCVS.
     */
    distinct?: GeneratedCVScalarFieldEnum | GeneratedCVScalarFieldEnum[]
  }

  /**
   * GeneratedCV findFirstOrThrow
   */
  export type GeneratedCVFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter, which GeneratedCV to fetch.
     */
    where?: GeneratedCVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedCVS to fetch.
     */
    orderBy?: GeneratedCVOrderByWithRelationInput | GeneratedCVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneratedCVS.
     */
    cursor?: GeneratedCVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedCVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedCVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneratedCVS.
     */
    distinct?: GeneratedCVScalarFieldEnum | GeneratedCVScalarFieldEnum[]
  }

  /**
   * GeneratedCV findMany
   */
  export type GeneratedCVFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter, which GeneratedCVS to fetch.
     */
    where?: GeneratedCVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneratedCVS to fetch.
     */
    orderBy?: GeneratedCVOrderByWithRelationInput | GeneratedCVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneratedCVS.
     */
    cursor?: GeneratedCVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneratedCVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneratedCVS.
     */
    skip?: number
    distinct?: GeneratedCVScalarFieldEnum | GeneratedCVScalarFieldEnum[]
  }

  /**
   * GeneratedCV create
   */
  export type GeneratedCVCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * The data needed to create a GeneratedCV.
     */
    data: XOR<GeneratedCVCreateInput, GeneratedCVUncheckedCreateInput>
  }

  /**
   * GeneratedCV createMany
   */
  export type GeneratedCVCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneratedCVS.
     */
    data: GeneratedCVCreateManyInput | GeneratedCVCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneratedCV createManyAndReturn
   */
  export type GeneratedCVCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * The data used to create many GeneratedCVS.
     */
    data: GeneratedCVCreateManyInput | GeneratedCVCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeneratedCV update
   */
  export type GeneratedCVUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * The data needed to update a GeneratedCV.
     */
    data: XOR<GeneratedCVUpdateInput, GeneratedCVUncheckedUpdateInput>
    /**
     * Choose, which GeneratedCV to update.
     */
    where: GeneratedCVWhereUniqueInput
  }

  /**
   * GeneratedCV updateMany
   */
  export type GeneratedCVUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneratedCVS.
     */
    data: XOR<GeneratedCVUpdateManyMutationInput, GeneratedCVUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedCVS to update
     */
    where?: GeneratedCVWhereInput
    /**
     * Limit how many GeneratedCVS to update.
     */
    limit?: number
  }

  /**
   * GeneratedCV updateManyAndReturn
   */
  export type GeneratedCVUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * The data used to update GeneratedCVS.
     */
    data: XOR<GeneratedCVUpdateManyMutationInput, GeneratedCVUncheckedUpdateManyInput>
    /**
     * Filter which GeneratedCVS to update
     */
    where?: GeneratedCVWhereInput
    /**
     * Limit how many GeneratedCVS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeneratedCV upsert
   */
  export type GeneratedCVUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * The filter to search for the GeneratedCV to update in case it exists.
     */
    where: GeneratedCVWhereUniqueInput
    /**
     * In case the GeneratedCV found by the `where` argument doesn't exist, create a new GeneratedCV with this data.
     */
    create: XOR<GeneratedCVCreateInput, GeneratedCVUncheckedCreateInput>
    /**
     * In case the GeneratedCV was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneratedCVUpdateInput, GeneratedCVUncheckedUpdateInput>
  }

  /**
   * GeneratedCV delete
   */
  export type GeneratedCVDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
    /**
     * Filter which GeneratedCV to delete.
     */
    where: GeneratedCVWhereUniqueInput
  }

  /**
   * GeneratedCV deleteMany
   */
  export type GeneratedCVDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneratedCVS to delete
     */
    where?: GeneratedCVWhereInput
    /**
     * Limit how many GeneratedCVS to delete.
     */
    limit?: number
  }

  /**
   * GeneratedCV without action
   */
  export type GeneratedCVDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneratedCV
     */
    select?: GeneratedCVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneratedCV
     */
    omit?: GeneratedCVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneratedCVInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionPlan
   */

  export type AggregateSubscriptionPlan = {
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  export type SubscriptionPlanAvgAggregateOutputType = {
    id: number | null
    planPrice: Decimal | null
  }

  export type SubscriptionPlanSumAggregateOutputType = {
    id: number | null
    planPrice: Decimal | null
  }

  export type SubscriptionPlanMinAggregateOutputType = {
    id: number | null
    planName: string | null
    planPrice: Decimal | null
    planDescription: string | null
  }

  export type SubscriptionPlanMaxAggregateOutputType = {
    id: number | null
    planName: string | null
    planPrice: Decimal | null
    planDescription: string | null
  }

  export type SubscriptionPlanCountAggregateOutputType = {
    id: number
    planName: number
    planPrice: number
    planDescription: number
    _all: number
  }


  export type SubscriptionPlanAvgAggregateInputType = {
    id?: true
    planPrice?: true
  }

  export type SubscriptionPlanSumAggregateInputType = {
    id?: true
    planPrice?: true
  }

  export type SubscriptionPlanMinAggregateInputType = {
    id?: true
    planName?: true
    planPrice?: true
    planDescription?: true
  }

  export type SubscriptionPlanMaxAggregateInputType = {
    id?: true
    planName?: true
    planPrice?: true
    planDescription?: true
  }

  export type SubscriptionPlanCountAggregateInputType = {
    id?: true
    planName?: true
    planPrice?: true
    planDescription?: true
    _all?: true
  }

  export type SubscriptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlan to aggregate.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPlans
    **/
    _count?: true | SubscriptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type GetSubscriptionPlanAggregateType<T extends SubscriptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
      : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
  }




  export type SubscriptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPlanWhereInput
    orderBy?: SubscriptionPlanOrderByWithAggregationInput | SubscriptionPlanOrderByWithAggregationInput[]
    by: SubscriptionPlanScalarFieldEnum[] | SubscriptionPlanScalarFieldEnum
    having?: SubscriptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPlanCountAggregateInputType | true
    _avg?: SubscriptionPlanAvgAggregateInputType
    _sum?: SubscriptionPlanSumAggregateInputType
    _min?: SubscriptionPlanMinAggregateInputType
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type SubscriptionPlanGroupByOutputType = {
    id: number
    planName: string
    planPrice: Decimal
    planDescription: string | null
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  type GetSubscriptionPlanGroupByPayload<T extends SubscriptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planName?: boolean
    planPrice?: boolean
    planDescription?: boolean
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planName?: boolean
    planPrice?: boolean
    planDescription?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planName?: boolean
    planPrice?: boolean
    planDescription?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectScalar = {
    id?: boolean
    planName?: boolean
    planPrice?: boolean
    planDescription?: boolean
  }

  export type SubscriptionPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planName" | "planPrice" | "planDescription", ExtArgs["result"]["subscriptionPlan"]>
  export type SubscriptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubscriptionPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubscriptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPlan"
    objects: {
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      planName: string
      planPrice: Prisma.Decimal
      planDescription: string | null
    }, ExtArgs["result"]["subscriptionPlan"]>
    composites: {}
  }

  type SubscriptionPlanGetPayload<S extends boolean | null | undefined | SubscriptionPlanDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPlanPayload, S>

  type SubscriptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionPlanCountAggregateInputType | true
    }

  export interface SubscriptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPlan'], meta: { name: 'SubscriptionPlan' } }
    /**
     * Find zero or one SubscriptionPlan that matches the filter.
     * @param {SubscriptionPlanFindUniqueArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionPlanFindUniqueArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionPlanFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionPlanFindFirstArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
     * 
     * // Get first 10 SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionPlanFindManyArgs>(args?: SelectSubset<T, SubscriptionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionPlan.
     * @param {SubscriptionPlanCreateArgs} args - Arguments to create a SubscriptionPlan.
     * @example
     * // Create one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.create({
     *   data: {
     *     // ... data to create a SubscriptionPlan
     *   }
     * })
     * 
     */
    create<T extends SubscriptionPlanCreateArgs>(args: SelectSubset<T, SubscriptionPlanCreateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionPlans.
     * @param {SubscriptionPlanCreateManyArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionPlanCreateManyArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionPlans and returns the data saved in the database.
     * @param {SubscriptionPlanCreateManyAndReturnArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubscriptionPlan.
     * @param {SubscriptionPlanDeleteArgs} args - Arguments to delete one SubscriptionPlan.
     * @example
     * // Delete one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPlan
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionPlanDeleteArgs>(args: SelectSubset<T, SubscriptionPlanDeleteArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionPlan.
     * @param {SubscriptionPlanUpdateArgs} args - Arguments to update one SubscriptionPlan.
     * @example
     * // Update one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionPlanUpdateArgs>(args: SelectSubset<T, SubscriptionPlanUpdateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionPlans.
     * @param {SubscriptionPlanDeleteManyArgs} args - Arguments to filter SubscriptionPlans to delete.
     * @example
     * // Delete a few SubscriptionPlans
     * const { count } = await prisma.subscriptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionPlanDeleteManyArgs>(args?: SelectSubset<T, SubscriptionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionPlanUpdateManyArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans and returns the data updated in the database.
     * @param {SubscriptionPlanUpdateManyAndReturnArgs} args - Arguments to update many SubscriptionPlans.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubscriptionPlan.
     * @param {SubscriptionPlanUpsertArgs} args - Arguments to update or create a SubscriptionPlan.
     * @example
     * // Update or create a SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPlan we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionPlanUpsertArgs>(args: SelectSubset<T, SubscriptionPlanUpsertArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanCountArgs} args - Arguments to filter SubscriptionPlans to count.
     * @example
     * // Count the number of SubscriptionPlans
     * const count = await prisma.subscriptionPlan.count({
     *   where: {
     *     // ... the filter for the SubscriptionPlans we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPlanCountArgs>(
      args?: Subset<T, SubscriptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPlanAggregateArgs>(args: Subset<T, SubscriptionPlanAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPlanAggregateType<T>>

    /**
     * Group by SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPlan model
   */
  readonly fields: SubscriptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends SubscriptionPlan$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlan$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionPlan model
   */
  interface SubscriptionPlanFieldRefs {
    readonly id: FieldRef<"SubscriptionPlan", 'Int'>
    readonly planName: FieldRef<"SubscriptionPlan", 'String'>
    readonly planPrice: FieldRef<"SubscriptionPlan", 'Decimal'>
    readonly planDescription: FieldRef<"SubscriptionPlan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionPlan findUnique
   */
  export type SubscriptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findUniqueOrThrow
   */
  export type SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findFirst
   */
  export type SubscriptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findFirstOrThrow
   */
  export type SubscriptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findMany
   */
  export type SubscriptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlans to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan create
   */
  export type SubscriptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
  }

  /**
   * SubscriptionPlan createMany
   */
  export type SubscriptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan createManyAndReturn
   */
  export type SubscriptionPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan update
   */
  export type SubscriptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPlan to update.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan updateMany
   */
  export type SubscriptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan updateManyAndReturn
   */
  export type SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan upsert
   */
  export type SubscriptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPlan to update in case it exists.
     */
    where: SubscriptionPlanWhereUniqueInput
    /**
     * In case the SubscriptionPlan found by the `where` argument doesn't exist, create a new SubscriptionPlan with this data.
     */
    create: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
    /**
     * In case the SubscriptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
  }

  /**
   * SubscriptionPlan delete
   */
  export type SubscriptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPlan to delete.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan deleteMany
   */
  export type SubscriptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlans to delete
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan.subscriptions
   */
  export type SubscriptionPlan$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan without action
   */
  export type SubscriptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    subscriptionPlanId: number | null
  }

  export type SubscriptionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    subscriptionPlanId: number | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    subscriptionPlanId: number | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    subscriptionPlanId: number | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    subscriptionPlanId: number
    startDate: number
    endDate: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type SubscriptionAvgAggregateInputType = {
    id?: true
    userId?: true
    subscriptionPlanId?: true
  }

  export type SubscriptionSumAggregateInputType = {
    id?: true
    userId?: true
    subscriptionPlanId?: true
  }

  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    subscriptionPlanId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    subscriptionPlanId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    subscriptionPlanId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _avg?: SubscriptionAvgAggregateInputType
    _sum?: SubscriptionSumAggregateInputType
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: number
    userId: number
    subscriptionPlanId: number
    startDate: Date
    endDate: Date
    isActive: boolean
    createdAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subscriptionPlanId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    payments?: boolean | Subscription$paymentsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subscriptionPlanId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subscriptionPlanId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    subscriptionPlanId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "subscriptionPlanId" | "startDate" | "endDate" | "isActive" | "createdAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    payments?: boolean | Subscription$paymentsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      plan: Prisma.$SubscriptionPlanPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      subscriptionPlanId: number
      startDate: Date
      endDate: Date
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends SubscriptionPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlanDefaultArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends Subscription$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'Int'>
    readonly userId: FieldRef<"Subscription", 'Int'>
    readonly subscriptionPlanId: FieldRef<"Subscription", 'Int'>
    readonly startDate: FieldRef<"Subscription", 'DateTime'>
    readonly endDate: FieldRef<"Subscription", 'DateTime'>
    readonly isActive: FieldRef<"Subscription", 'Boolean'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.payments
   */
  export type Subscription$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    subscriptionId: number | null
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    subscriptionId: number | null
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    subscriptionId: number | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentProof: string | null
    status: $Enums.PaymentStatus | null
    amount: Decimal | null
    approvedAt: Date | null
    gatewayTransactionId: string | null
    createdAt: Date | null
    expiredAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    subscriptionId: number | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentProof: string | null
    status: $Enums.PaymentStatus | null
    amount: Decimal | null
    approvedAt: Date | null
    gatewayTransactionId: string | null
    createdAt: Date | null
    expiredAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    subscriptionId: number
    paymentMethod: number
    paymentProof: number
    status: number
    amount: number
    approvedAt: number
    gatewayTransactionId: number
    createdAt: number
    expiredAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    subscriptionId?: true
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    subscriptionId?: true
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentMethod?: true
    paymentProof?: true
    status?: true
    amount?: true
    approvedAt?: true
    gatewayTransactionId?: true
    createdAt?: true
    expiredAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentMethod?: true
    paymentProof?: true
    status?: true
    amount?: true
    approvedAt?: true
    gatewayTransactionId?: true
    createdAt?: true
    expiredAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentMethod?: true
    paymentProof?: true
    status?: true
    amount?: true
    approvedAt?: true
    gatewayTransactionId?: true
    createdAt?: true
    expiredAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    subscriptionId: number
    paymentMethod: $Enums.PaymentMethod
    paymentProof: string | null
    status: $Enums.PaymentStatus
    amount: Decimal
    approvedAt: Date | null
    gatewayTransactionId: string | null
    createdAt: Date
    expiredAt: Date | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    paymentMethod?: boolean
    paymentProof?: boolean
    status?: boolean
    amount?: boolean
    approvedAt?: boolean
    gatewayTransactionId?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    paymentMethod?: boolean
    paymentProof?: boolean
    status?: boolean
    amount?: boolean
    approvedAt?: boolean
    gatewayTransactionId?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    paymentMethod?: boolean
    paymentProof?: boolean
    status?: boolean
    amount?: boolean
    approvedAt?: boolean
    gatewayTransactionId?: boolean
    createdAt?: boolean
    expiredAt?: boolean
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    paymentMethod?: boolean
    paymentProof?: boolean
    status?: boolean
    amount?: boolean
    approvedAt?: boolean
    gatewayTransactionId?: boolean
    createdAt?: boolean
    expiredAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subscriptionId" | "paymentMethod" | "paymentProof" | "status" | "amount" | "approvedAt" | "gatewayTransactionId" | "createdAt" | "expiredAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      subscription: Prisma.$SubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subscriptionId: number
      paymentMethod: $Enums.PaymentMethod
      paymentProof: string | null
      status: $Enums.PaymentStatus
      amount: Prisma.Decimal
      approvedAt: Date | null
      gatewayTransactionId: string | null
      createdAt: Date
      expiredAt: Date | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscription<T extends SubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionDefaultArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly subscriptionId: FieldRef<"Payment", 'Int'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly paymentProof: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly approvedAt: FieldRef<"Payment", 'DateTime'>
    readonly gatewayTransactionId: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly expiredAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Employment
   */

  export type AggregateEmployment = {
    _count: EmploymentCountAggregateOutputType | null
    _avg: EmploymentAvgAggregateOutputType | null
    _sum: EmploymentSumAggregateOutputType | null
    _min: EmploymentMinAggregateOutputType | null
    _max: EmploymentMaxAggregateOutputType | null
  }

  export type EmploymentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type EmploymentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type EmploymentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type EmploymentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type EmploymentCountAggregateOutputType = {
    id: number
    userId: number
    companyId: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type EmploymentAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type EmploymentSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type EmploymentMinAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type EmploymentMaxAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type EmploymentCountAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type EmploymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employment to aggregate.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employments
    **/
    _count?: true | EmploymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmploymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmploymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmploymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmploymentMaxAggregateInputType
  }

  export type GetEmploymentAggregateType<T extends EmploymentAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployment[P]>
      : GetScalarType<T[P], AggregateEmployment[P]>
  }




  export type EmploymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmploymentWhereInput
    orderBy?: EmploymentOrderByWithAggregationInput | EmploymentOrderByWithAggregationInput[]
    by: EmploymentScalarFieldEnum[] | EmploymentScalarFieldEnum
    having?: EmploymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmploymentCountAggregateInputType | true
    _avg?: EmploymentAvgAggregateInputType
    _sum?: EmploymentSumAggregateInputType
    _min?: EmploymentMinAggregateInputType
    _max?: EmploymentMaxAggregateInputType
  }

  export type EmploymentGroupByOutputType = {
    id: number
    userId: number
    companyId: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    _count: EmploymentCountAggregateOutputType | null
    _avg: EmploymentAvgAggregateOutputType | null
    _sum: EmploymentSumAggregateOutputType | null
    _min: EmploymentMinAggregateOutputType | null
    _max: EmploymentMaxAggregateOutputType | null
  }

  type GetEmploymentGroupByPayload<T extends EmploymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmploymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmploymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmploymentGroupByOutputType[P]>
            : GetScalarType<T[P], EmploymentGroupByOutputType[P]>
        }
      >
    >


  export type EmploymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
    reviews?: boolean | Employment$reviewsArgs<ExtArgs>
    _count?: boolean | EmploymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyId?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectScalar = {
    id?: boolean
    userId?: boolean
    companyId?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type EmploymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "companyId" | "startDate" | "endDate" | "createdAt", ExtArgs["result"]["employment"]>
  export type EmploymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
    reviews?: boolean | Employment$reviewsArgs<ExtArgs>
    _count?: boolean | EmploymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmploymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
  }
  export type EmploymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    company?: boolean | Employment$companyArgs<ExtArgs>
  }

  export type $EmploymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs> | null
      reviews: Prisma.$CompanyReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      companyId: number | null
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["employment"]>
    composites: {}
  }

  type EmploymentGetPayload<S extends boolean | null | undefined | EmploymentDefaultArgs> = $Result.GetResult<Prisma.$EmploymentPayload, S>

  type EmploymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmploymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmploymentCountAggregateInputType | true
    }

  export interface EmploymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employment'], meta: { name: 'Employment' } }
    /**
     * Find zero or one Employment that matches the filter.
     * @param {EmploymentFindUniqueArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmploymentFindUniqueArgs>(args: SelectSubset<T, EmploymentFindUniqueArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmploymentFindUniqueOrThrowArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmploymentFindUniqueOrThrowArgs>(args: SelectSubset<T, EmploymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindFirstArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmploymentFindFirstArgs>(args?: SelectSubset<T, EmploymentFindFirstArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindFirstOrThrowArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmploymentFindFirstOrThrowArgs>(args?: SelectSubset<T, EmploymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employments
     * const employments = await prisma.employment.findMany()
     * 
     * // Get first 10 Employments
     * const employments = await prisma.employment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employmentWithIdOnly = await prisma.employment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmploymentFindManyArgs>(args?: SelectSubset<T, EmploymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employment.
     * @param {EmploymentCreateArgs} args - Arguments to create a Employment.
     * @example
     * // Create one Employment
     * const Employment = await prisma.employment.create({
     *   data: {
     *     // ... data to create a Employment
     *   }
     * })
     * 
     */
    create<T extends EmploymentCreateArgs>(args: SelectSubset<T, EmploymentCreateArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employments.
     * @param {EmploymentCreateManyArgs} args - Arguments to create many Employments.
     * @example
     * // Create many Employments
     * const employment = await prisma.employment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmploymentCreateManyArgs>(args?: SelectSubset<T, EmploymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employments and returns the data saved in the database.
     * @param {EmploymentCreateManyAndReturnArgs} args - Arguments to create many Employments.
     * @example
     * // Create many Employments
     * const employment = await prisma.employment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employments and only return the `id`
     * const employmentWithIdOnly = await prisma.employment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmploymentCreateManyAndReturnArgs>(args?: SelectSubset<T, EmploymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employment.
     * @param {EmploymentDeleteArgs} args - Arguments to delete one Employment.
     * @example
     * // Delete one Employment
     * const Employment = await prisma.employment.delete({
     *   where: {
     *     // ... filter to delete one Employment
     *   }
     * })
     * 
     */
    delete<T extends EmploymentDeleteArgs>(args: SelectSubset<T, EmploymentDeleteArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employment.
     * @param {EmploymentUpdateArgs} args - Arguments to update one Employment.
     * @example
     * // Update one Employment
     * const employment = await prisma.employment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmploymentUpdateArgs>(args: SelectSubset<T, EmploymentUpdateArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employments.
     * @param {EmploymentDeleteManyArgs} args - Arguments to filter Employments to delete.
     * @example
     * // Delete a few Employments
     * const { count } = await prisma.employment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmploymentDeleteManyArgs>(args?: SelectSubset<T, EmploymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employments
     * const employment = await prisma.employment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmploymentUpdateManyArgs>(args: SelectSubset<T, EmploymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employments and returns the data updated in the database.
     * @param {EmploymentUpdateManyAndReturnArgs} args - Arguments to update many Employments.
     * @example
     * // Update many Employments
     * const employment = await prisma.employment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employments and only return the `id`
     * const employmentWithIdOnly = await prisma.employment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmploymentUpdateManyAndReturnArgs>(args: SelectSubset<T, EmploymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employment.
     * @param {EmploymentUpsertArgs} args - Arguments to update or create a Employment.
     * @example
     * // Update or create a Employment
     * const employment = await prisma.employment.upsert({
     *   create: {
     *     // ... data to create a Employment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employment we want to update
     *   }
     * })
     */
    upsert<T extends EmploymentUpsertArgs>(args: SelectSubset<T, EmploymentUpsertArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentCountArgs} args - Arguments to filter Employments to count.
     * @example
     * // Count the number of Employments
     * const count = await prisma.employment.count({
     *   where: {
     *     // ... the filter for the Employments we want to count
     *   }
     * })
    **/
    count<T extends EmploymentCountArgs>(
      args?: Subset<T, EmploymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmploymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmploymentAggregateArgs>(args: Subset<T, EmploymentAggregateArgs>): Prisma.PrismaPromise<GetEmploymentAggregateType<T>>

    /**
     * Group by Employment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmploymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmploymentGroupByArgs['orderBy'] }
        : { orderBy?: EmploymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmploymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmploymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employment model
   */
  readonly fields: EmploymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmploymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    company<T extends Employment$companyArgs<ExtArgs> = {}>(args?: Subset<T, Employment$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reviews<T extends Employment$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Employment$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employment model
   */
  interface EmploymentFieldRefs {
    readonly id: FieldRef<"Employment", 'Int'>
    readonly userId: FieldRef<"Employment", 'Int'>
    readonly companyId: FieldRef<"Employment", 'Int'>
    readonly startDate: FieldRef<"Employment", 'DateTime'>
    readonly endDate: FieldRef<"Employment", 'DateTime'>
    readonly createdAt: FieldRef<"Employment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employment findUnique
   */
  export type EmploymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment findUniqueOrThrow
   */
  export type EmploymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment findFirst
   */
  export type EmploymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employments.
     */
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment findFirstOrThrow
   */
  export type EmploymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employments.
     */
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment findMany
   */
  export type EmploymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employments to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment create
   */
  export type EmploymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Employment.
     */
    data: XOR<EmploymentCreateInput, EmploymentUncheckedCreateInput>
  }

  /**
   * Employment createMany
   */
  export type EmploymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employments.
     */
    data: EmploymentCreateManyInput | EmploymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employment createManyAndReturn
   */
  export type EmploymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * The data used to create many Employments.
     */
    data: EmploymentCreateManyInput | EmploymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employment update
   */
  export type EmploymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Employment.
     */
    data: XOR<EmploymentUpdateInput, EmploymentUncheckedUpdateInput>
    /**
     * Choose, which Employment to update.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment updateMany
   */
  export type EmploymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employments.
     */
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyInput>
    /**
     * Filter which Employments to update
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to update.
     */
    limit?: number
  }

  /**
   * Employment updateManyAndReturn
   */
  export type EmploymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * The data used to update Employments.
     */
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyInput>
    /**
     * Filter which Employments to update
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employment upsert
   */
  export type EmploymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Employment to update in case it exists.
     */
    where: EmploymentWhereUniqueInput
    /**
     * In case the Employment found by the `where` argument doesn't exist, create a new Employment with this data.
     */
    create: XOR<EmploymentCreateInput, EmploymentUncheckedCreateInput>
    /**
     * In case the Employment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmploymentUpdateInput, EmploymentUncheckedUpdateInput>
  }

  /**
   * Employment delete
   */
  export type EmploymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter which Employment to delete.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment deleteMany
   */
  export type EmploymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employments to delete
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to delete.
     */
    limit?: number
  }

  /**
   * Employment.company
   */
  export type Employment$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Employment.reviews
   */
  export type Employment$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    where?: CompanyReviewWhereInput
    orderBy?: CompanyReviewOrderByWithRelationInput | CompanyReviewOrderByWithRelationInput[]
    cursor?: CompanyReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyReviewScalarFieldEnum | CompanyReviewScalarFieldEnum[]
  }

  /**
   * Employment without action
   */
  export type EmploymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
  }


  /**
   * Model CompanyReview
   */

  export type AggregateCompanyReview = {
    _count: CompanyReviewCountAggregateOutputType | null
    _avg: CompanyReviewAvgAggregateOutputType | null
    _sum: CompanyReviewSumAggregateOutputType | null
    _min: CompanyReviewMinAggregateOutputType | null
    _max: CompanyReviewMaxAggregateOutputType | null
  }

  export type CompanyReviewAvgAggregateOutputType = {
    id: number | null
    employmentId: number | null
    salaryEstimate: number | null
    cultureRating: number | null
    worklifeRating: number | null
    facilityRating: number | null
    careerRating: number | null
  }

  export type CompanyReviewSumAggregateOutputType = {
    id: number | null
    employmentId: number | null
    salaryEstimate: number | null
    cultureRating: number | null
    worklifeRating: number | null
    facilityRating: number | null
    careerRating: number | null
  }

  export type CompanyReviewMinAggregateOutputType = {
    id: number | null
    employmentId: number | null
    position: string | null
    salaryEstimate: number | null
    cultureRating: number | null
    worklifeRating: number | null
    facilityRating: number | null
    careerRating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type CompanyReviewMaxAggregateOutputType = {
    id: number | null
    employmentId: number | null
    position: string | null
    salaryEstimate: number | null
    cultureRating: number | null
    worklifeRating: number | null
    facilityRating: number | null
    careerRating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type CompanyReviewCountAggregateOutputType = {
    id: number
    employmentId: number
    position: number
    salaryEstimate: number
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type CompanyReviewAvgAggregateInputType = {
    id?: true
    employmentId?: true
    salaryEstimate?: true
    cultureRating?: true
    worklifeRating?: true
    facilityRating?: true
    careerRating?: true
  }

  export type CompanyReviewSumAggregateInputType = {
    id?: true
    employmentId?: true
    salaryEstimate?: true
    cultureRating?: true
    worklifeRating?: true
    facilityRating?: true
    careerRating?: true
  }

  export type CompanyReviewMinAggregateInputType = {
    id?: true
    employmentId?: true
    position?: true
    salaryEstimate?: true
    cultureRating?: true
    worklifeRating?: true
    facilityRating?: true
    careerRating?: true
    comment?: true
    createdAt?: true
  }

  export type CompanyReviewMaxAggregateInputType = {
    id?: true
    employmentId?: true
    position?: true
    salaryEstimate?: true
    cultureRating?: true
    worklifeRating?: true
    facilityRating?: true
    careerRating?: true
    comment?: true
    createdAt?: true
  }

  export type CompanyReviewCountAggregateInputType = {
    id?: true
    employmentId?: true
    position?: true
    salaryEstimate?: true
    cultureRating?: true
    worklifeRating?: true
    facilityRating?: true
    careerRating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type CompanyReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyReview to aggregate.
     */
    where?: CompanyReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyReviews to fetch.
     */
    orderBy?: CompanyReviewOrderByWithRelationInput | CompanyReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyReviews
    **/
    _count?: true | CompanyReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyReviewMaxAggregateInputType
  }

  export type GetCompanyReviewAggregateType<T extends CompanyReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyReview[P]>
      : GetScalarType<T[P], AggregateCompanyReview[P]>
  }




  export type CompanyReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyReviewWhereInput
    orderBy?: CompanyReviewOrderByWithAggregationInput | CompanyReviewOrderByWithAggregationInput[]
    by: CompanyReviewScalarFieldEnum[] | CompanyReviewScalarFieldEnum
    having?: CompanyReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyReviewCountAggregateInputType | true
    _avg?: CompanyReviewAvgAggregateInputType
    _sum?: CompanyReviewSumAggregateInputType
    _min?: CompanyReviewMinAggregateInputType
    _max?: CompanyReviewMaxAggregateInputType
  }

  export type CompanyReviewGroupByOutputType = {
    id: number
    employmentId: number
    position: string
    salaryEstimate: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment: string | null
    createdAt: Date
    _count: CompanyReviewCountAggregateOutputType | null
    _avg: CompanyReviewAvgAggregateOutputType | null
    _sum: CompanyReviewSumAggregateOutputType | null
    _min: CompanyReviewMinAggregateOutputType | null
    _max: CompanyReviewMaxAggregateOutputType | null
  }

  type GetCompanyReviewGroupByPayload<T extends CompanyReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyReviewGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyReviewGroupByOutputType[P]>
        }
      >
    >


  export type CompanyReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employmentId?: boolean
    position?: boolean
    salaryEstimate?: boolean
    cultureRating?: boolean
    worklifeRating?: boolean
    facilityRating?: boolean
    careerRating?: boolean
    comment?: boolean
    createdAt?: boolean
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyReview"]>

  export type CompanyReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employmentId?: boolean
    position?: boolean
    salaryEstimate?: boolean
    cultureRating?: boolean
    worklifeRating?: boolean
    facilityRating?: boolean
    careerRating?: boolean
    comment?: boolean
    createdAt?: boolean
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyReview"]>

  export type CompanyReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employmentId?: boolean
    position?: boolean
    salaryEstimate?: boolean
    cultureRating?: boolean
    worklifeRating?: boolean
    facilityRating?: boolean
    careerRating?: boolean
    comment?: boolean
    createdAt?: boolean
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyReview"]>

  export type CompanyReviewSelectScalar = {
    id?: boolean
    employmentId?: boolean
    position?: boolean
    salaryEstimate?: boolean
    cultureRating?: boolean
    worklifeRating?: boolean
    facilityRating?: boolean
    careerRating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type CompanyReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employmentId" | "position" | "salaryEstimate" | "cultureRating" | "worklifeRating" | "facilityRating" | "careerRating" | "comment" | "createdAt", ExtArgs["result"]["companyReview"]>
  export type CompanyReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }
  export type CompanyReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }
  export type CompanyReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employment?: boolean | EmploymentDefaultArgs<ExtArgs>
  }

  export type $CompanyReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyReview"
    objects: {
      employment: Prisma.$EmploymentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employmentId: number
      position: string
      salaryEstimate: number | null
      cultureRating: number
      worklifeRating: number
      facilityRating: number
      careerRating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["companyReview"]>
    composites: {}
  }

  type CompanyReviewGetPayload<S extends boolean | null | undefined | CompanyReviewDefaultArgs> = $Result.GetResult<Prisma.$CompanyReviewPayload, S>

  type CompanyReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyReviewCountAggregateInputType | true
    }

  export interface CompanyReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyReview'], meta: { name: 'CompanyReview' } }
    /**
     * Find zero or one CompanyReview that matches the filter.
     * @param {CompanyReviewFindUniqueArgs} args - Arguments to find a CompanyReview
     * @example
     * // Get one CompanyReview
     * const companyReview = await prisma.companyReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyReviewFindUniqueArgs>(args: SelectSubset<T, CompanyReviewFindUniqueArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyReviewFindUniqueOrThrowArgs} args - Arguments to find a CompanyReview
     * @example
     * // Get one CompanyReview
     * const companyReview = await prisma.companyReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewFindFirstArgs} args - Arguments to find a CompanyReview
     * @example
     * // Get one CompanyReview
     * const companyReview = await prisma.companyReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyReviewFindFirstArgs>(args?: SelectSubset<T, CompanyReviewFindFirstArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewFindFirstOrThrowArgs} args - Arguments to find a CompanyReview
     * @example
     * // Get one CompanyReview
     * const companyReview = await prisma.companyReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyReviews
     * const companyReviews = await prisma.companyReview.findMany()
     * 
     * // Get first 10 CompanyReviews
     * const companyReviews = await prisma.companyReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyReviewWithIdOnly = await prisma.companyReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyReviewFindManyArgs>(args?: SelectSubset<T, CompanyReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyReview.
     * @param {CompanyReviewCreateArgs} args - Arguments to create a CompanyReview.
     * @example
     * // Create one CompanyReview
     * const CompanyReview = await prisma.companyReview.create({
     *   data: {
     *     // ... data to create a CompanyReview
     *   }
     * })
     * 
     */
    create<T extends CompanyReviewCreateArgs>(args: SelectSubset<T, CompanyReviewCreateArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyReviews.
     * @param {CompanyReviewCreateManyArgs} args - Arguments to create many CompanyReviews.
     * @example
     * // Create many CompanyReviews
     * const companyReview = await prisma.companyReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyReviewCreateManyArgs>(args?: SelectSubset<T, CompanyReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyReviews and returns the data saved in the database.
     * @param {CompanyReviewCreateManyAndReturnArgs} args - Arguments to create many CompanyReviews.
     * @example
     * // Create many CompanyReviews
     * const companyReview = await prisma.companyReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyReviews and only return the `id`
     * const companyReviewWithIdOnly = await prisma.companyReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyReview.
     * @param {CompanyReviewDeleteArgs} args - Arguments to delete one CompanyReview.
     * @example
     * // Delete one CompanyReview
     * const CompanyReview = await prisma.companyReview.delete({
     *   where: {
     *     // ... filter to delete one CompanyReview
     *   }
     * })
     * 
     */
    delete<T extends CompanyReviewDeleteArgs>(args: SelectSubset<T, CompanyReviewDeleteArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyReview.
     * @param {CompanyReviewUpdateArgs} args - Arguments to update one CompanyReview.
     * @example
     * // Update one CompanyReview
     * const companyReview = await prisma.companyReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyReviewUpdateArgs>(args: SelectSubset<T, CompanyReviewUpdateArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyReviews.
     * @param {CompanyReviewDeleteManyArgs} args - Arguments to filter CompanyReviews to delete.
     * @example
     * // Delete a few CompanyReviews
     * const { count } = await prisma.companyReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyReviewDeleteManyArgs>(args?: SelectSubset<T, CompanyReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyReviews
     * const companyReview = await prisma.companyReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyReviewUpdateManyArgs>(args: SelectSubset<T, CompanyReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyReviews and returns the data updated in the database.
     * @param {CompanyReviewUpdateManyAndReturnArgs} args - Arguments to update many CompanyReviews.
     * @example
     * // Update many CompanyReviews
     * const companyReview = await prisma.companyReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyReviews and only return the `id`
     * const companyReviewWithIdOnly = await prisma.companyReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyReview.
     * @param {CompanyReviewUpsertArgs} args - Arguments to update or create a CompanyReview.
     * @example
     * // Update or create a CompanyReview
     * const companyReview = await prisma.companyReview.upsert({
     *   create: {
     *     // ... data to create a CompanyReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyReview we want to update
     *   }
     * })
     */
    upsert<T extends CompanyReviewUpsertArgs>(args: SelectSubset<T, CompanyReviewUpsertArgs<ExtArgs>>): Prisma__CompanyReviewClient<$Result.GetResult<Prisma.$CompanyReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewCountArgs} args - Arguments to filter CompanyReviews to count.
     * @example
     * // Count the number of CompanyReviews
     * const count = await prisma.companyReview.count({
     *   where: {
     *     // ... the filter for the CompanyReviews we want to count
     *   }
     * })
    **/
    count<T extends CompanyReviewCountArgs>(
      args?: Subset<T, CompanyReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyReviewAggregateArgs>(args: Subset<T, CompanyReviewAggregateArgs>): Prisma.PrismaPromise<GetCompanyReviewAggregateType<T>>

    /**
     * Group by CompanyReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyReviewGroupByArgs['orderBy'] }
        : { orderBy?: CompanyReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyReview model
   */
  readonly fields: CompanyReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employment<T extends EmploymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmploymentDefaultArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyReview model
   */
  interface CompanyReviewFieldRefs {
    readonly id: FieldRef<"CompanyReview", 'Int'>
    readonly employmentId: FieldRef<"CompanyReview", 'Int'>
    readonly position: FieldRef<"CompanyReview", 'String'>
    readonly salaryEstimate: FieldRef<"CompanyReview", 'Int'>
    readonly cultureRating: FieldRef<"CompanyReview", 'Int'>
    readonly worklifeRating: FieldRef<"CompanyReview", 'Int'>
    readonly facilityRating: FieldRef<"CompanyReview", 'Int'>
    readonly careerRating: FieldRef<"CompanyReview", 'Int'>
    readonly comment: FieldRef<"CompanyReview", 'String'>
    readonly createdAt: FieldRef<"CompanyReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyReview findUnique
   */
  export type CompanyReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter, which CompanyReview to fetch.
     */
    where: CompanyReviewWhereUniqueInput
  }

  /**
   * CompanyReview findUniqueOrThrow
   */
  export type CompanyReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter, which CompanyReview to fetch.
     */
    where: CompanyReviewWhereUniqueInput
  }

  /**
   * CompanyReview findFirst
   */
  export type CompanyReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter, which CompanyReview to fetch.
     */
    where?: CompanyReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyReviews to fetch.
     */
    orderBy?: CompanyReviewOrderByWithRelationInput | CompanyReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyReviews.
     */
    cursor?: CompanyReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyReviews.
     */
    distinct?: CompanyReviewScalarFieldEnum | CompanyReviewScalarFieldEnum[]
  }

  /**
   * CompanyReview findFirstOrThrow
   */
  export type CompanyReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter, which CompanyReview to fetch.
     */
    where?: CompanyReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyReviews to fetch.
     */
    orderBy?: CompanyReviewOrderByWithRelationInput | CompanyReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyReviews.
     */
    cursor?: CompanyReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyReviews.
     */
    distinct?: CompanyReviewScalarFieldEnum | CompanyReviewScalarFieldEnum[]
  }

  /**
   * CompanyReview findMany
   */
  export type CompanyReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter, which CompanyReviews to fetch.
     */
    where?: CompanyReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyReviews to fetch.
     */
    orderBy?: CompanyReviewOrderByWithRelationInput | CompanyReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyReviews.
     */
    cursor?: CompanyReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyReviews.
     */
    skip?: number
    distinct?: CompanyReviewScalarFieldEnum | CompanyReviewScalarFieldEnum[]
  }

  /**
   * CompanyReview create
   */
  export type CompanyReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyReview.
     */
    data: XOR<CompanyReviewCreateInput, CompanyReviewUncheckedCreateInput>
  }

  /**
   * CompanyReview createMany
   */
  export type CompanyReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyReviews.
     */
    data: CompanyReviewCreateManyInput | CompanyReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyReview createManyAndReturn
   */
  export type CompanyReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyReviews.
     */
    data: CompanyReviewCreateManyInput | CompanyReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyReview update
   */
  export type CompanyReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyReview.
     */
    data: XOR<CompanyReviewUpdateInput, CompanyReviewUncheckedUpdateInput>
    /**
     * Choose, which CompanyReview to update.
     */
    where: CompanyReviewWhereUniqueInput
  }

  /**
   * CompanyReview updateMany
   */
  export type CompanyReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyReviews.
     */
    data: XOR<CompanyReviewUpdateManyMutationInput, CompanyReviewUncheckedUpdateManyInput>
    /**
     * Filter which CompanyReviews to update
     */
    where?: CompanyReviewWhereInput
    /**
     * Limit how many CompanyReviews to update.
     */
    limit?: number
  }

  /**
   * CompanyReview updateManyAndReturn
   */
  export type CompanyReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * The data used to update CompanyReviews.
     */
    data: XOR<CompanyReviewUpdateManyMutationInput, CompanyReviewUncheckedUpdateManyInput>
    /**
     * Filter which CompanyReviews to update
     */
    where?: CompanyReviewWhereInput
    /**
     * Limit how many CompanyReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyReview upsert
   */
  export type CompanyReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyReview to update in case it exists.
     */
    where: CompanyReviewWhereUniqueInput
    /**
     * In case the CompanyReview found by the `where` argument doesn't exist, create a new CompanyReview with this data.
     */
    create: XOR<CompanyReviewCreateInput, CompanyReviewUncheckedCreateInput>
    /**
     * In case the CompanyReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyReviewUpdateInput, CompanyReviewUncheckedUpdateInput>
  }

  /**
   * CompanyReview delete
   */
  export type CompanyReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
    /**
     * Filter which CompanyReview to delete.
     */
    where: CompanyReviewWhereUniqueInput
  }

  /**
   * CompanyReview deleteMany
   */
  export type CompanyReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyReviews to delete
     */
    where?: CompanyReviewWhereInput
    /**
     * Limit how many CompanyReviews to delete.
     */
    limit?: number
  }

  /**
   * CompanyReview without action
   */
  export type CompanyReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyReview
     */
    select?: CompanyReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyReview
     */
    omit?: CompanyReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyReviewInclude<ExtArgs> | null
  }


  /**
   * Model JobShare
   */

  export type AggregateJobShare = {
    _count: JobShareCountAggregateOutputType | null
    _avg: JobShareAvgAggregateOutputType | null
    _sum: JobShareSumAggregateOutputType | null
    _min: JobShareMinAggregateOutputType | null
    _max: JobShareMaxAggregateOutputType | null
  }

  export type JobShareAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
  }

  export type JobShareSumAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
  }

  export type JobShareMinAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    platform: $Enums.SharePlatform | null
    sharedUrl: string | null
    customMessage: string | null
    createdAt: Date | null
  }

  export type JobShareMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    jobId: number | null
    platform: $Enums.SharePlatform | null
    sharedUrl: string | null
    customMessage: string | null
    createdAt: Date | null
  }

  export type JobShareCountAggregateOutputType = {
    id: number
    userId: number
    jobId: number
    platform: number
    sharedUrl: number
    customMessage: number
    createdAt: number
    _all: number
  }


  export type JobShareAvgAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
  }

  export type JobShareSumAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
  }

  export type JobShareMinAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    platform?: true
    sharedUrl?: true
    customMessage?: true
    createdAt?: true
  }

  export type JobShareMaxAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    platform?: true
    sharedUrl?: true
    customMessage?: true
    createdAt?: true
  }

  export type JobShareCountAggregateInputType = {
    id?: true
    userId?: true
    jobId?: true
    platform?: true
    sharedUrl?: true
    customMessage?: true
    createdAt?: true
    _all?: true
  }

  export type JobShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobShare to aggregate.
     */
    where?: JobShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobShares to fetch.
     */
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobShares
    **/
    _count?: true | JobShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobShareMaxAggregateInputType
  }

  export type GetJobShareAggregateType<T extends JobShareAggregateArgs> = {
        [P in keyof T & keyof AggregateJobShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobShare[P]>
      : GetScalarType<T[P], AggregateJobShare[P]>
  }




  export type JobShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobShareWhereInput
    orderBy?: JobShareOrderByWithAggregationInput | JobShareOrderByWithAggregationInput[]
    by: JobShareScalarFieldEnum[] | JobShareScalarFieldEnum
    having?: JobShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobShareCountAggregateInputType | true
    _avg?: JobShareAvgAggregateInputType
    _sum?: JobShareSumAggregateInputType
    _min?: JobShareMinAggregateInputType
    _max?: JobShareMaxAggregateInputType
  }

  export type JobShareGroupByOutputType = {
    id: number
    userId: number
    jobId: number
    platform: $Enums.SharePlatform
    sharedUrl: string | null
    customMessage: string | null
    createdAt: Date
    _count: JobShareCountAggregateOutputType | null
    _avg: JobShareAvgAggregateOutputType | null
    _sum: JobShareSumAggregateOutputType | null
    _min: JobShareMinAggregateOutputType | null
    _max: JobShareMaxAggregateOutputType | null
  }

  type GetJobShareGroupByPayload<T extends JobShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobShareGroupByOutputType[P]>
            : GetScalarType<T[P], JobShareGroupByOutputType[P]>
        }
      >
    >


  export type JobShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    platform?: boolean
    sharedUrl?: boolean
    customMessage?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobShare"]>

  export type JobShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    platform?: boolean
    sharedUrl?: boolean
    customMessage?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobShare"]>

  export type JobShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    jobId?: boolean
    platform?: boolean
    sharedUrl?: boolean
    customMessage?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobShare"]>

  export type JobShareSelectScalar = {
    id?: boolean
    userId?: boolean
    jobId?: boolean
    platform?: boolean
    sharedUrl?: boolean
    customMessage?: boolean
    createdAt?: boolean
  }

  export type JobShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "jobId" | "platform" | "sharedUrl" | "customMessage" | "createdAt", ExtArgs["result"]["jobShare"]>
  export type JobShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type JobShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobShare"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      jobId: number
      platform: $Enums.SharePlatform
      sharedUrl: string | null
      customMessage: string | null
      createdAt: Date
    }, ExtArgs["result"]["jobShare"]>
    composites: {}
  }

  type JobShareGetPayload<S extends boolean | null | undefined | JobShareDefaultArgs> = $Result.GetResult<Prisma.$JobSharePayload, S>

  type JobShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobShareCountAggregateInputType | true
    }

  export interface JobShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobShare'], meta: { name: 'JobShare' } }
    /**
     * Find zero or one JobShare that matches the filter.
     * @param {JobShareFindUniqueArgs} args - Arguments to find a JobShare
     * @example
     * // Get one JobShare
     * const jobShare = await prisma.jobShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobShareFindUniqueArgs>(args: SelectSubset<T, JobShareFindUniqueArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobShareFindUniqueOrThrowArgs} args - Arguments to find a JobShare
     * @example
     * // Get one JobShare
     * const jobShare = await prisma.jobShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobShareFindUniqueOrThrowArgs>(args: SelectSubset<T, JobShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareFindFirstArgs} args - Arguments to find a JobShare
     * @example
     * // Get one JobShare
     * const jobShare = await prisma.jobShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobShareFindFirstArgs>(args?: SelectSubset<T, JobShareFindFirstArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareFindFirstOrThrowArgs} args - Arguments to find a JobShare
     * @example
     * // Get one JobShare
     * const jobShare = await prisma.jobShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobShareFindFirstOrThrowArgs>(args?: SelectSubset<T, JobShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobShares
     * const jobShares = await prisma.jobShare.findMany()
     * 
     * // Get first 10 JobShares
     * const jobShares = await prisma.jobShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobShareWithIdOnly = await prisma.jobShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobShareFindManyArgs>(args?: SelectSubset<T, JobShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobShare.
     * @param {JobShareCreateArgs} args - Arguments to create a JobShare.
     * @example
     * // Create one JobShare
     * const JobShare = await prisma.jobShare.create({
     *   data: {
     *     // ... data to create a JobShare
     *   }
     * })
     * 
     */
    create<T extends JobShareCreateArgs>(args: SelectSubset<T, JobShareCreateArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobShares.
     * @param {JobShareCreateManyArgs} args - Arguments to create many JobShares.
     * @example
     * // Create many JobShares
     * const jobShare = await prisma.jobShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobShareCreateManyArgs>(args?: SelectSubset<T, JobShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobShares and returns the data saved in the database.
     * @param {JobShareCreateManyAndReturnArgs} args - Arguments to create many JobShares.
     * @example
     * // Create many JobShares
     * const jobShare = await prisma.jobShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobShares and only return the `id`
     * const jobShareWithIdOnly = await prisma.jobShare.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobShareCreateManyAndReturnArgs>(args?: SelectSubset<T, JobShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobShare.
     * @param {JobShareDeleteArgs} args - Arguments to delete one JobShare.
     * @example
     * // Delete one JobShare
     * const JobShare = await prisma.jobShare.delete({
     *   where: {
     *     // ... filter to delete one JobShare
     *   }
     * })
     * 
     */
    delete<T extends JobShareDeleteArgs>(args: SelectSubset<T, JobShareDeleteArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobShare.
     * @param {JobShareUpdateArgs} args - Arguments to update one JobShare.
     * @example
     * // Update one JobShare
     * const jobShare = await prisma.jobShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobShareUpdateArgs>(args: SelectSubset<T, JobShareUpdateArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobShares.
     * @param {JobShareDeleteManyArgs} args - Arguments to filter JobShares to delete.
     * @example
     * // Delete a few JobShares
     * const { count } = await prisma.jobShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobShareDeleteManyArgs>(args?: SelectSubset<T, JobShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobShares
     * const jobShare = await prisma.jobShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobShareUpdateManyArgs>(args: SelectSubset<T, JobShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobShares and returns the data updated in the database.
     * @param {JobShareUpdateManyAndReturnArgs} args - Arguments to update many JobShares.
     * @example
     * // Update many JobShares
     * const jobShare = await prisma.jobShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobShares and only return the `id`
     * const jobShareWithIdOnly = await prisma.jobShare.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobShareUpdateManyAndReturnArgs>(args: SelectSubset<T, JobShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobShare.
     * @param {JobShareUpsertArgs} args - Arguments to update or create a JobShare.
     * @example
     * // Update or create a JobShare
     * const jobShare = await prisma.jobShare.upsert({
     *   create: {
     *     // ... data to create a JobShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobShare we want to update
     *   }
     * })
     */
    upsert<T extends JobShareUpsertArgs>(args: SelectSubset<T, JobShareUpsertArgs<ExtArgs>>): Prisma__JobShareClient<$Result.GetResult<Prisma.$JobSharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareCountArgs} args - Arguments to filter JobShares to count.
     * @example
     * // Count the number of JobShares
     * const count = await prisma.jobShare.count({
     *   where: {
     *     // ... the filter for the JobShares we want to count
     *   }
     * })
    **/
    count<T extends JobShareCountArgs>(
      args?: Subset<T, JobShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobShareAggregateArgs>(args: Subset<T, JobShareAggregateArgs>): Prisma.PrismaPromise<GetJobShareAggregateType<T>>

    /**
     * Group by JobShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobShareGroupByArgs['orderBy'] }
        : { orderBy?: JobShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobShare model
   */
  readonly fields: JobShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobShare model
   */
  interface JobShareFieldRefs {
    readonly id: FieldRef<"JobShare", 'Int'>
    readonly userId: FieldRef<"JobShare", 'Int'>
    readonly jobId: FieldRef<"JobShare", 'Int'>
    readonly platform: FieldRef<"JobShare", 'SharePlatform'>
    readonly sharedUrl: FieldRef<"JobShare", 'String'>
    readonly customMessage: FieldRef<"JobShare", 'String'>
    readonly createdAt: FieldRef<"JobShare", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobShare findUnique
   */
  export type JobShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter, which JobShare to fetch.
     */
    where: JobShareWhereUniqueInput
  }

  /**
   * JobShare findUniqueOrThrow
   */
  export type JobShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter, which JobShare to fetch.
     */
    where: JobShareWhereUniqueInput
  }

  /**
   * JobShare findFirst
   */
  export type JobShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter, which JobShare to fetch.
     */
    where?: JobShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobShares to fetch.
     */
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobShares.
     */
    cursor?: JobShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobShares.
     */
    distinct?: JobShareScalarFieldEnum | JobShareScalarFieldEnum[]
  }

  /**
   * JobShare findFirstOrThrow
   */
  export type JobShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter, which JobShare to fetch.
     */
    where?: JobShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobShares to fetch.
     */
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobShares.
     */
    cursor?: JobShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobShares.
     */
    distinct?: JobShareScalarFieldEnum | JobShareScalarFieldEnum[]
  }

  /**
   * JobShare findMany
   */
  export type JobShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter, which JobShares to fetch.
     */
    where?: JobShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobShares to fetch.
     */
    orderBy?: JobShareOrderByWithRelationInput | JobShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobShares.
     */
    cursor?: JobShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobShares.
     */
    skip?: number
    distinct?: JobShareScalarFieldEnum | JobShareScalarFieldEnum[]
  }

  /**
   * JobShare create
   */
  export type JobShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * The data needed to create a JobShare.
     */
    data: XOR<JobShareCreateInput, JobShareUncheckedCreateInput>
  }

  /**
   * JobShare createMany
   */
  export type JobShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobShares.
     */
    data: JobShareCreateManyInput | JobShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobShare createManyAndReturn
   */
  export type JobShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * The data used to create many JobShares.
     */
    data: JobShareCreateManyInput | JobShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobShare update
   */
  export type JobShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * The data needed to update a JobShare.
     */
    data: XOR<JobShareUpdateInput, JobShareUncheckedUpdateInput>
    /**
     * Choose, which JobShare to update.
     */
    where: JobShareWhereUniqueInput
  }

  /**
   * JobShare updateMany
   */
  export type JobShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobShares.
     */
    data: XOR<JobShareUpdateManyMutationInput, JobShareUncheckedUpdateManyInput>
    /**
     * Filter which JobShares to update
     */
    where?: JobShareWhereInput
    /**
     * Limit how many JobShares to update.
     */
    limit?: number
  }

  /**
   * JobShare updateManyAndReturn
   */
  export type JobShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * The data used to update JobShares.
     */
    data: XOR<JobShareUpdateManyMutationInput, JobShareUncheckedUpdateManyInput>
    /**
     * Filter which JobShares to update
     */
    where?: JobShareWhereInput
    /**
     * Limit how many JobShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobShare upsert
   */
  export type JobShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * The filter to search for the JobShare to update in case it exists.
     */
    where: JobShareWhereUniqueInput
    /**
     * In case the JobShare found by the `where` argument doesn't exist, create a new JobShare with this data.
     */
    create: XOR<JobShareCreateInput, JobShareUncheckedCreateInput>
    /**
     * In case the JobShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobShareUpdateInput, JobShareUncheckedUpdateInput>
  }

  /**
   * JobShare delete
   */
  export type JobShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
    /**
     * Filter which JobShare to delete.
     */
    where: JobShareWhereUniqueInput
  }

  /**
   * JobShare deleteMany
   */
  export type JobShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobShares to delete
     */
    where?: JobShareWhereInput
    /**
     * Limit how many JobShares to delete.
     */
    limit?: number
  }

  /**
   * JobShare without action
   */
  export type JobShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobShare
     */
    select?: JobShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobShare
     */
    omit?: JobShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobShareInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    name: 'name',
    email: 'email',
    passwordHash: 'passwordHash',
    phone: 'phone',
    gender: 'gender',
    dob: 'dob',
    education: 'education',
    address: 'address',
    profilePicture: 'profilePicture',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProviderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provider: 'provider',
    providerId: 'providerId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    createdAt: 'createdAt'
  };

  export type UserProviderScalarFieldEnum = (typeof UserProviderScalarFieldEnum)[keyof typeof UserProviderScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    location: 'location',
    description: 'description',
    website: 'website',
    logo: 'logo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminId: 'adminId'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    title: 'title',
    description: 'description',
    category: 'category',
    city: 'city',
    salaryMin: 'salaryMin',
    salaryMax: 'salaryMax',
    tags: 'tags',
    banner: 'banner',
    deadline: 'deadline',
    isPublished: 'isPublished',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    jobId: 'jobId',
    cvFile: 'cvFile',
    expectedSalary: 'expectedSalary',
    status: 'status',
    reviewNote: 'reviewNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const SavedJobScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    jobId: 'jobId',
    createdAt: 'createdAt'
  };

  export type SavedJobScalarFieldEnum = (typeof SavedJobScalarFieldEnum)[keyof typeof SavedJobScalarFieldEnum]


  export const InterviewScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    scheduleDate: 'scheduleDate',
    locationOrLink: 'locationOrLink',
    notes: 'notes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reminderSentAt: 'reminderSentAt'
  };

  export type InterviewScalarFieldEnum = (typeof InterviewScalarFieldEnum)[keyof typeof InterviewScalarFieldEnum]


  export const PreselectionTestScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    isActive: 'isActive',
    passingScore: 'passingScore',
    createdAt: 'createdAt'
  };

  export type PreselectionTestScalarFieldEnum = (typeof PreselectionTestScalarFieldEnum)[keyof typeof PreselectionTestScalarFieldEnum]


  export const PreselectionQuestionScalarFieldEnum: {
    id: 'id',
    testId: 'testId',
    question: 'question',
    options: 'options',
    answer: 'answer'
  };

  export type PreselectionQuestionScalarFieldEnum = (typeof PreselectionQuestionScalarFieldEnum)[keyof typeof PreselectionQuestionScalarFieldEnum]


  export const PreselectionResultScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    testId: 'testId',
    score: 'score',
    createdAt: 'createdAt'
  };

  export type PreselectionResultScalarFieldEnum = (typeof PreselectionResultScalarFieldEnum)[keyof typeof PreselectionResultScalarFieldEnum]


  export const ApplicantAnswerScalarFieldEnum: {
    id: 'id',
    resultId: 'resultId',
    questionId: 'questionId',
    selected: 'selected',
    isCorrect: 'isCorrect'
  };

  export type ApplicantAnswerScalarFieldEnum = (typeof ApplicantAnswerScalarFieldEnum)[keyof typeof ApplicantAnswerScalarFieldEnum]


  export const SkillAssessmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    createdBy: 'createdBy',
    createdAt: 'createdAt'
  };

  export type SkillAssessmentScalarFieldEnum = (typeof SkillAssessmentScalarFieldEnum)[keyof typeof SkillAssessmentScalarFieldEnum]


  export const SkillQuestionScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    question: 'question',
    options: 'options',
    answer: 'answer'
  };

  export type SkillQuestionScalarFieldEnum = (typeof SkillQuestionScalarFieldEnum)[keyof typeof SkillQuestionScalarFieldEnum]


  export const SkillResultScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    assessmentId: 'assessmentId',
    score: 'score',
    isPassed: 'isPassed',
    certificateUrl: 'certificateUrl',
    certificateCode: 'certificateCode',
    startedAt: 'startedAt',
    finishedAt: 'finishedAt',
    createdAt: 'createdAt'
  };

  export type SkillResultScalarFieldEnum = (typeof SkillResultScalarFieldEnum)[keyof typeof SkillResultScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeName: 'badgeName',
    badgeIcon: 'badgeIcon',
    awardedAt: 'awardedAt'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const GeneratedCVScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fileUrl: 'fileUrl',
    templateUsed: 'templateUsed',
    additionalInfo: 'additionalInfo',
    createdAt: 'createdAt'
  };

  export type GeneratedCVScalarFieldEnum = (typeof GeneratedCVScalarFieldEnum)[keyof typeof GeneratedCVScalarFieldEnum]


  export const SubscriptionPlanScalarFieldEnum: {
    id: 'id',
    planName: 'planName',
    planPrice: 'planPrice',
    planDescription: 'planDescription'
  };

  export type SubscriptionPlanScalarFieldEnum = (typeof SubscriptionPlanScalarFieldEnum)[keyof typeof SubscriptionPlanScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    subscriptionPlanId: 'subscriptionPlanId',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    paymentMethod: 'paymentMethod',
    paymentProof: 'paymentProof',
    status: 'status',
    amount: 'amount',
    approvedAt: 'approvedAt',
    gatewayTransactionId: 'gatewayTransactionId',
    createdAt: 'createdAt',
    expiredAt: 'expiredAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const EmploymentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyId: 'companyId',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type EmploymentScalarFieldEnum = (typeof EmploymentScalarFieldEnum)[keyof typeof EmploymentScalarFieldEnum]


  export const CompanyReviewScalarFieldEnum: {
    id: 'id',
    employmentId: 'employmentId',
    position: 'position',
    salaryEstimate: 'salaryEstimate',
    cultureRating: 'cultureRating',
    worklifeRating: 'worklifeRating',
    facilityRating: 'facilityRating',
    careerRating: 'careerRating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type CompanyReviewScalarFieldEnum = (typeof CompanyReviewScalarFieldEnum)[keyof typeof CompanyReviewScalarFieldEnum]


  export const JobShareScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    jobId: 'jobId',
    platform: 'platform',
    sharedUrl: 'sharedUrl',
    customMessage: 'customMessage',
    createdAt: 'createdAt'
  };

  export type JobShareScalarFieldEnum = (typeof JobShareScalarFieldEnum)[keyof typeof JobShareScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ProviderType'
   */
  export type EnumProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProviderType'>
    


  /**
   * Reference to a field of type 'ProviderType[]'
   */
  export type ListEnumProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProviderType[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    


  /**
   * Reference to a field of type 'InterviewStatus'
   */
  export type EnumInterviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewStatus'>
    


  /**
   * Reference to a field of type 'InterviewStatus[]'
   */
  export type ListEnumInterviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InterviewStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'SharePlatform'
   */
  export type EnumSharePlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SharePlatform'>
    


  /**
   * Reference to a field of type 'SharePlatform[]'
   */
  export type ListEnumSharePlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SharePlatform[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    education?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    profilePicture?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    providers?: UserProviderListRelationFilter
    adminOf?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    employments?: EmploymentListRelationFilter
    applications?: ApplicationListRelationFilter
    preselectionResults?: PreselectionResultListRelationFilter
    skillResults?: SkillResultListRelationFilter
    createdAssessments?: SkillAssessmentListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    generatedCvs?: GeneratedCVListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    savedJobs?: SavedJobListRelationFilter
    jobShares?: JobShareListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    providers?: UserProviderOrderByRelationAggregateInput
    adminOf?: CompanyOrderByWithRelationInput
    employments?: EmploymentOrderByRelationAggregateInput
    applications?: ApplicationOrderByRelationAggregateInput
    preselectionResults?: PreselectionResultOrderByRelationAggregateInput
    skillResults?: SkillResultOrderByRelationAggregateInput
    createdAssessments?: SkillAssessmentOrderByRelationAggregateInput
    userBadges?: UserBadgeOrderByRelationAggregateInput
    generatedCvs?: GeneratedCVOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    savedJobs?: SavedJobOrderByRelationAggregateInput
    jobShares?: JobShareOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    name?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    education?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    profilePicture?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    providers?: UserProviderListRelationFilter
    adminOf?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    employments?: EmploymentListRelationFilter
    applications?: ApplicationListRelationFilter
    preselectionResults?: PreselectionResultListRelationFilter
    skillResults?: SkillResultListRelationFilter
    createdAssessments?: SkillAssessmentListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    generatedCvs?: GeneratedCVListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    savedJobs?: SavedJobListRelationFilter
    jobShares?: JobShareListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    education?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePicture?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProviderWhereInput = {
    AND?: UserProviderWhereInput | UserProviderWhereInput[]
    OR?: UserProviderWhereInput[]
    NOT?: UserProviderWhereInput | UserProviderWhereInput[]
    id?: IntFilter<"UserProvider"> | number
    userId?: IntFilter<"UserProvider"> | number
    provider?: EnumProviderTypeFilter<"UserProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"UserProvider"> | string
    accessToken?: StringNullableFilter<"UserProvider"> | string | null
    refreshToken?: StringNullableFilter<"UserProvider"> | string | null
    createdAt?: DateTimeFilter<"UserProvider"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProviderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    provider_providerId?: UserProviderProviderProviderIdCompoundUniqueInput
    AND?: UserProviderWhereInput | UserProviderWhereInput[]
    OR?: UserProviderWhereInput[]
    NOT?: UserProviderWhereInput | UserProviderWhereInput[]
    userId?: IntFilter<"UserProvider"> | number
    provider?: EnumProviderTypeFilter<"UserProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"UserProvider"> | string
    accessToken?: StringNullableFilter<"UserProvider"> | string | null
    refreshToken?: StringNullableFilter<"UserProvider"> | string | null
    createdAt?: DateTimeFilter<"UserProvider"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerId">

  export type UserProviderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserProviderCountOrderByAggregateInput
    _avg?: UserProviderAvgOrderByAggregateInput
    _max?: UserProviderMaxOrderByAggregateInput
    _min?: UserProviderMinOrderByAggregateInput
    _sum?: UserProviderSumOrderByAggregateInput
  }

  export type UserProviderScalarWhereWithAggregatesInput = {
    AND?: UserProviderScalarWhereWithAggregatesInput | UserProviderScalarWhereWithAggregatesInput[]
    OR?: UserProviderScalarWhereWithAggregatesInput[]
    NOT?: UserProviderScalarWhereWithAggregatesInput | UserProviderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserProvider"> | number
    userId?: IntWithAggregatesFilter<"UserProvider"> | number
    provider?: EnumProviderTypeWithAggregatesFilter<"UserProvider"> | $Enums.ProviderType
    providerId?: StringWithAggregatesFilter<"UserProvider"> | string
    accessToken?: StringNullableWithAggregatesFilter<"UserProvider"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"UserProvider"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserProvider"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    email?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    location?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    logo?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    adminId?: IntNullableFilter<"Company"> | number | null
    admin?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobs?: JobListRelationFilter
    employments?: EmploymentListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrderInput | SortOrder
    admin?: UserOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
    employments?: EmploymentOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    adminId?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    email?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    location?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    logo?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    admin?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    jobs?: JobListRelationFilter
    employments?: EmploymentListRelationFilter
  }, "id" | "adminId">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    name?: StringWithAggregatesFilter<"Company"> | string
    email?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    location?: StringNullableWithAggregatesFilter<"Company"> | string | null
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    adminId?: IntNullableWithAggregatesFilter<"Company"> | number | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: IntFilter<"Job"> | number
    companyId?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    category?: StringFilter<"Job"> | string
    city?: StringFilter<"Job"> | string
    salaryMin?: IntNullableFilter<"Job"> | number | null
    salaryMax?: IntNullableFilter<"Job"> | number | null
    tags?: StringNullableListFilter<"Job">
    banner?: StringNullableFilter<"Job"> | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    isPublished?: BoolFilter<"Job"> | boolean
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: ApplicationListRelationFilter
    preselectionTests?: PreselectionTestListRelationFilter
    savedBy?: SavedJobListRelationFilter
    shares?: JobShareListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    city?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    tags?: SortOrder
    banner?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
    preselectionTests?: PreselectionTestOrderByRelationAggregateInput
    savedBy?: SavedJobOrderByRelationAggregateInput
    shares?: JobShareOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    companyId?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    category?: StringFilter<"Job"> | string
    city?: StringFilter<"Job"> | string
    salaryMin?: IntNullableFilter<"Job"> | number | null
    salaryMax?: IntNullableFilter<"Job"> | number | null
    tags?: StringNullableListFilter<"Job">
    banner?: StringNullableFilter<"Job"> | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    isPublished?: BoolFilter<"Job"> | boolean
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    applications?: ApplicationListRelationFilter
    preselectionTests?: PreselectionTestListRelationFilter
    savedBy?: SavedJobListRelationFilter
    shares?: JobShareListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    city?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    tags?: SortOrder
    banner?: SortOrderInput | SortOrder
    deadline?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Job"> | number
    companyId?: IntWithAggregatesFilter<"Job"> | number
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringWithAggregatesFilter<"Job"> | string
    category?: StringWithAggregatesFilter<"Job"> | string
    city?: StringWithAggregatesFilter<"Job"> | string
    salaryMin?: IntNullableWithAggregatesFilter<"Job"> | number | null
    salaryMax?: IntNullableWithAggregatesFilter<"Job"> | number | null
    tags?: StringNullableListFilter<"Job">
    banner?: StringNullableWithAggregatesFilter<"Job"> | string | null
    deadline?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    isPublished?: BoolWithAggregatesFilter<"Job"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: IntFilter<"Application"> | number
    userId?: IntFilter<"Application"> | number
    jobId?: IntFilter<"Application"> | number
    cvFile?: StringFilter<"Application"> | string
    expectedSalary?: IntNullableFilter<"Application"> | number | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    reviewNote?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    interviews?: InterviewListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    cvFile?: SortOrder
    expectedSalary?: SortOrderInput | SortOrder
    status?: SortOrder
    reviewNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    interviews?: InterviewOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_jobId?: ApplicationUserIdJobIdCompoundUniqueInput
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    userId?: IntFilter<"Application"> | number
    jobId?: IntFilter<"Application"> | number
    cvFile?: StringFilter<"Application"> | string
    expectedSalary?: IntNullableFilter<"Application"> | number | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    reviewNote?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    interviews?: InterviewListRelationFilter
  }, "id" | "userId_jobId">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    cvFile?: SortOrder
    expectedSalary?: SortOrderInput | SortOrder
    status?: SortOrder
    reviewNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Application"> | number
    userId?: IntWithAggregatesFilter<"Application"> | number
    jobId?: IntWithAggregatesFilter<"Application"> | number
    cvFile?: StringWithAggregatesFilter<"Application"> | string
    expectedSalary?: IntNullableWithAggregatesFilter<"Application"> | number | null
    status?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    reviewNote?: StringNullableWithAggregatesFilter<"Application"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
  }

  export type SavedJobWhereInput = {
    AND?: SavedJobWhereInput | SavedJobWhereInput[]
    OR?: SavedJobWhereInput[]
    NOT?: SavedJobWhereInput | SavedJobWhereInput[]
    id?: IntFilter<"SavedJob"> | number
    userId?: IntFilter<"SavedJob"> | number
    jobId?: IntFilter<"SavedJob"> | number
    createdAt?: DateTimeFilter<"SavedJob"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type SavedJobOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
  }

  export type SavedJobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_jobId?: SavedJobUserIdJobIdCompoundUniqueInput
    AND?: SavedJobWhereInput | SavedJobWhereInput[]
    OR?: SavedJobWhereInput[]
    NOT?: SavedJobWhereInput | SavedJobWhereInput[]
    userId?: IntFilter<"SavedJob"> | number
    jobId?: IntFilter<"SavedJob"> | number
    createdAt?: DateTimeFilter<"SavedJob"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id" | "userId_jobId">

  export type SavedJobOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
    _count?: SavedJobCountOrderByAggregateInput
    _avg?: SavedJobAvgOrderByAggregateInput
    _max?: SavedJobMaxOrderByAggregateInput
    _min?: SavedJobMinOrderByAggregateInput
    _sum?: SavedJobSumOrderByAggregateInput
  }

  export type SavedJobScalarWhereWithAggregatesInput = {
    AND?: SavedJobScalarWhereWithAggregatesInput | SavedJobScalarWhereWithAggregatesInput[]
    OR?: SavedJobScalarWhereWithAggregatesInput[]
    NOT?: SavedJobScalarWhereWithAggregatesInput | SavedJobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SavedJob"> | number
    userId?: IntWithAggregatesFilter<"SavedJob"> | number
    jobId?: IntWithAggregatesFilter<"SavedJob"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SavedJob"> | Date | string
  }

  export type InterviewWhereInput = {
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    id?: IntFilter<"Interview"> | number
    applicationId?: IntFilter<"Interview"> | number
    scheduleDate?: DateTimeFilter<"Interview"> | Date | string
    locationOrLink?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    reminderSentAt?: DateTimeNullableFilter<"Interview"> | Date | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type InterviewOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    scheduleDate?: SortOrder
    locationOrLink?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reminderSentAt?: SortOrderInput | SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type InterviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    applicationId?: IntFilter<"Interview"> | number
    scheduleDate?: DateTimeFilter<"Interview"> | Date | string
    locationOrLink?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    reminderSentAt?: DateTimeNullableFilter<"Interview"> | Date | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id">

  export type InterviewOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    scheduleDate?: SortOrder
    locationOrLink?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reminderSentAt?: SortOrderInput | SortOrder
    _count?: InterviewCountOrderByAggregateInput
    _avg?: InterviewAvgOrderByAggregateInput
    _max?: InterviewMaxOrderByAggregateInput
    _min?: InterviewMinOrderByAggregateInput
    _sum?: InterviewSumOrderByAggregateInput
  }

  export type InterviewScalarWhereWithAggregatesInput = {
    AND?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    OR?: InterviewScalarWhereWithAggregatesInput[]
    NOT?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Interview"> | number
    applicationId?: IntWithAggregatesFilter<"Interview"> | number
    scheduleDate?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    locationOrLink?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    status?: EnumInterviewStatusWithAggregatesFilter<"Interview"> | $Enums.InterviewStatus
    createdAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    reminderSentAt?: DateTimeNullableWithAggregatesFilter<"Interview"> | Date | string | null
  }

  export type PreselectionTestWhereInput = {
    AND?: PreselectionTestWhereInput | PreselectionTestWhereInput[]
    OR?: PreselectionTestWhereInput[]
    NOT?: PreselectionTestWhereInput | PreselectionTestWhereInput[]
    id?: IntFilter<"PreselectionTest"> | number
    jobId?: IntFilter<"PreselectionTest"> | number
    isActive?: BoolFilter<"PreselectionTest"> | boolean
    passingScore?: IntNullableFilter<"PreselectionTest"> | number | null
    createdAt?: DateTimeFilter<"PreselectionTest"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    questions?: PreselectionQuestionListRelationFilter
    results?: PreselectionResultListRelationFilter
  }

  export type PreselectionTestOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isActive?: SortOrder
    passingScore?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
    questions?: PreselectionQuestionOrderByRelationAggregateInput
    results?: PreselectionResultOrderByRelationAggregateInput
  }

  export type PreselectionTestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    jobId?: number
    AND?: PreselectionTestWhereInput | PreselectionTestWhereInput[]
    OR?: PreselectionTestWhereInput[]
    NOT?: PreselectionTestWhereInput | PreselectionTestWhereInput[]
    isActive?: BoolFilter<"PreselectionTest"> | boolean
    passingScore?: IntNullableFilter<"PreselectionTest"> | number | null
    createdAt?: DateTimeFilter<"PreselectionTest"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    questions?: PreselectionQuestionListRelationFilter
    results?: PreselectionResultListRelationFilter
  }, "id" | "jobId">

  export type PreselectionTestOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isActive?: SortOrder
    passingScore?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PreselectionTestCountOrderByAggregateInput
    _avg?: PreselectionTestAvgOrderByAggregateInput
    _max?: PreselectionTestMaxOrderByAggregateInput
    _min?: PreselectionTestMinOrderByAggregateInput
    _sum?: PreselectionTestSumOrderByAggregateInput
  }

  export type PreselectionTestScalarWhereWithAggregatesInput = {
    AND?: PreselectionTestScalarWhereWithAggregatesInput | PreselectionTestScalarWhereWithAggregatesInput[]
    OR?: PreselectionTestScalarWhereWithAggregatesInput[]
    NOT?: PreselectionTestScalarWhereWithAggregatesInput | PreselectionTestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreselectionTest"> | number
    jobId?: IntWithAggregatesFilter<"PreselectionTest"> | number
    isActive?: BoolWithAggregatesFilter<"PreselectionTest"> | boolean
    passingScore?: IntNullableWithAggregatesFilter<"PreselectionTest"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PreselectionTest"> | Date | string
  }

  export type PreselectionQuestionWhereInput = {
    AND?: PreselectionQuestionWhereInput | PreselectionQuestionWhereInput[]
    OR?: PreselectionQuestionWhereInput[]
    NOT?: PreselectionQuestionWhereInput | PreselectionQuestionWhereInput[]
    id?: IntFilter<"PreselectionQuestion"> | number
    testId?: IntFilter<"PreselectionQuestion"> | number
    question?: StringFilter<"PreselectionQuestion"> | string
    options?: JsonFilter<"PreselectionQuestion">
    answer?: StringFilter<"PreselectionQuestion"> | string
    test?: XOR<PreselectionTestScalarRelationFilter, PreselectionTestWhereInput>
    answers?: ApplicantAnswerListRelationFilter
  }

  export type PreselectionQuestionOrderByWithRelationInput = {
    id?: SortOrder
    testId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    test?: PreselectionTestOrderByWithRelationInput
    answers?: ApplicantAnswerOrderByRelationAggregateInput
  }

  export type PreselectionQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PreselectionQuestionWhereInput | PreselectionQuestionWhereInput[]
    OR?: PreselectionQuestionWhereInput[]
    NOT?: PreselectionQuestionWhereInput | PreselectionQuestionWhereInput[]
    testId?: IntFilter<"PreselectionQuestion"> | number
    question?: StringFilter<"PreselectionQuestion"> | string
    options?: JsonFilter<"PreselectionQuestion">
    answer?: StringFilter<"PreselectionQuestion"> | string
    test?: XOR<PreselectionTestScalarRelationFilter, PreselectionTestWhereInput>
    answers?: ApplicantAnswerListRelationFilter
  }, "id">

  export type PreselectionQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    testId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    _count?: PreselectionQuestionCountOrderByAggregateInput
    _avg?: PreselectionQuestionAvgOrderByAggregateInput
    _max?: PreselectionQuestionMaxOrderByAggregateInput
    _min?: PreselectionQuestionMinOrderByAggregateInput
    _sum?: PreselectionQuestionSumOrderByAggregateInput
  }

  export type PreselectionQuestionScalarWhereWithAggregatesInput = {
    AND?: PreselectionQuestionScalarWhereWithAggregatesInput | PreselectionQuestionScalarWhereWithAggregatesInput[]
    OR?: PreselectionQuestionScalarWhereWithAggregatesInput[]
    NOT?: PreselectionQuestionScalarWhereWithAggregatesInput | PreselectionQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreselectionQuestion"> | number
    testId?: IntWithAggregatesFilter<"PreselectionQuestion"> | number
    question?: StringWithAggregatesFilter<"PreselectionQuestion"> | string
    options?: JsonWithAggregatesFilter<"PreselectionQuestion">
    answer?: StringWithAggregatesFilter<"PreselectionQuestion"> | string
  }

  export type PreselectionResultWhereInput = {
    AND?: PreselectionResultWhereInput | PreselectionResultWhereInput[]
    OR?: PreselectionResultWhereInput[]
    NOT?: PreselectionResultWhereInput | PreselectionResultWhereInput[]
    id?: IntFilter<"PreselectionResult"> | number
    userId?: IntFilter<"PreselectionResult"> | number
    testId?: IntFilter<"PreselectionResult"> | number
    score?: IntFilter<"PreselectionResult"> | number
    createdAt?: DateTimeFilter<"PreselectionResult"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    test?: XOR<PreselectionTestScalarRelationFilter, PreselectionTestWhereInput>
    answers?: ApplicantAnswerListRelationFilter
  }

  export type PreselectionResultOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    test?: PreselectionTestOrderByWithRelationInput
    answers?: ApplicantAnswerOrderByRelationAggregateInput
  }

  export type PreselectionResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_testId?: PreselectionResultUserIdTestIdCompoundUniqueInput
    AND?: PreselectionResultWhereInput | PreselectionResultWhereInput[]
    OR?: PreselectionResultWhereInput[]
    NOT?: PreselectionResultWhereInput | PreselectionResultWhereInput[]
    userId?: IntFilter<"PreselectionResult"> | number
    testId?: IntFilter<"PreselectionResult"> | number
    score?: IntFilter<"PreselectionResult"> | number
    createdAt?: DateTimeFilter<"PreselectionResult"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    test?: XOR<PreselectionTestScalarRelationFilter, PreselectionTestWhereInput>
    answers?: ApplicantAnswerListRelationFilter
  }, "id" | "userId_testId">

  export type PreselectionResultOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    _count?: PreselectionResultCountOrderByAggregateInput
    _avg?: PreselectionResultAvgOrderByAggregateInput
    _max?: PreselectionResultMaxOrderByAggregateInput
    _min?: PreselectionResultMinOrderByAggregateInput
    _sum?: PreselectionResultSumOrderByAggregateInput
  }

  export type PreselectionResultScalarWhereWithAggregatesInput = {
    AND?: PreselectionResultScalarWhereWithAggregatesInput | PreselectionResultScalarWhereWithAggregatesInput[]
    OR?: PreselectionResultScalarWhereWithAggregatesInput[]
    NOT?: PreselectionResultScalarWhereWithAggregatesInput | PreselectionResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreselectionResult"> | number
    userId?: IntWithAggregatesFilter<"PreselectionResult"> | number
    testId?: IntWithAggregatesFilter<"PreselectionResult"> | number
    score?: IntWithAggregatesFilter<"PreselectionResult"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PreselectionResult"> | Date | string
  }

  export type ApplicantAnswerWhereInput = {
    AND?: ApplicantAnswerWhereInput | ApplicantAnswerWhereInput[]
    OR?: ApplicantAnswerWhereInput[]
    NOT?: ApplicantAnswerWhereInput | ApplicantAnswerWhereInput[]
    id?: IntFilter<"ApplicantAnswer"> | number
    resultId?: IntFilter<"ApplicantAnswer"> | number
    questionId?: IntFilter<"ApplicantAnswer"> | number
    selected?: StringFilter<"ApplicantAnswer"> | string
    isCorrect?: BoolFilter<"ApplicantAnswer"> | boolean
    result?: XOR<PreselectionResultScalarRelationFilter, PreselectionResultWhereInput>
    question?: XOR<PreselectionQuestionScalarRelationFilter, PreselectionQuestionWhereInput>
  }

  export type ApplicantAnswerOrderByWithRelationInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
    selected?: SortOrder
    isCorrect?: SortOrder
    result?: PreselectionResultOrderByWithRelationInput
    question?: PreselectionQuestionOrderByWithRelationInput
  }

  export type ApplicantAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    resultId_questionId?: ApplicantAnswerResultIdQuestionIdCompoundUniqueInput
    AND?: ApplicantAnswerWhereInput | ApplicantAnswerWhereInput[]
    OR?: ApplicantAnswerWhereInput[]
    NOT?: ApplicantAnswerWhereInput | ApplicantAnswerWhereInput[]
    resultId?: IntFilter<"ApplicantAnswer"> | number
    questionId?: IntFilter<"ApplicantAnswer"> | number
    selected?: StringFilter<"ApplicantAnswer"> | string
    isCorrect?: BoolFilter<"ApplicantAnswer"> | boolean
    result?: XOR<PreselectionResultScalarRelationFilter, PreselectionResultWhereInput>
    question?: XOR<PreselectionQuestionScalarRelationFilter, PreselectionQuestionWhereInput>
  }, "id" | "resultId_questionId">

  export type ApplicantAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
    selected?: SortOrder
    isCorrect?: SortOrder
    _count?: ApplicantAnswerCountOrderByAggregateInput
    _avg?: ApplicantAnswerAvgOrderByAggregateInput
    _max?: ApplicantAnswerMaxOrderByAggregateInput
    _min?: ApplicantAnswerMinOrderByAggregateInput
    _sum?: ApplicantAnswerSumOrderByAggregateInput
  }

  export type ApplicantAnswerScalarWhereWithAggregatesInput = {
    AND?: ApplicantAnswerScalarWhereWithAggregatesInput | ApplicantAnswerScalarWhereWithAggregatesInput[]
    OR?: ApplicantAnswerScalarWhereWithAggregatesInput[]
    NOT?: ApplicantAnswerScalarWhereWithAggregatesInput | ApplicantAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ApplicantAnswer"> | number
    resultId?: IntWithAggregatesFilter<"ApplicantAnswer"> | number
    questionId?: IntWithAggregatesFilter<"ApplicantAnswer"> | number
    selected?: StringWithAggregatesFilter<"ApplicantAnswer"> | string
    isCorrect?: BoolWithAggregatesFilter<"ApplicantAnswer"> | boolean
  }

  export type SkillAssessmentWhereInput = {
    AND?: SkillAssessmentWhereInput | SkillAssessmentWhereInput[]
    OR?: SkillAssessmentWhereInput[]
    NOT?: SkillAssessmentWhereInput | SkillAssessmentWhereInput[]
    id?: IntFilter<"SkillAssessment"> | number
    title?: StringFilter<"SkillAssessment"> | string
    description?: StringNullableFilter<"SkillAssessment"> | string | null
    createdBy?: IntFilter<"SkillAssessment"> | number
    createdAt?: DateTimeFilter<"SkillAssessment"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    questions?: SkillQuestionListRelationFilter
    results?: SkillResultListRelationFilter
  }

  export type SkillAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    questions?: SkillQuestionOrderByRelationAggregateInput
    results?: SkillResultOrderByRelationAggregateInput
  }

  export type SkillAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillAssessmentWhereInput | SkillAssessmentWhereInput[]
    OR?: SkillAssessmentWhereInput[]
    NOT?: SkillAssessmentWhereInput | SkillAssessmentWhereInput[]
    title?: StringFilter<"SkillAssessment"> | string
    description?: StringNullableFilter<"SkillAssessment"> | string | null
    createdBy?: IntFilter<"SkillAssessment"> | number
    createdAt?: DateTimeFilter<"SkillAssessment"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    questions?: SkillQuestionListRelationFilter
    results?: SkillResultListRelationFilter
  }, "id">

  export type SkillAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    _count?: SkillAssessmentCountOrderByAggregateInput
    _avg?: SkillAssessmentAvgOrderByAggregateInput
    _max?: SkillAssessmentMaxOrderByAggregateInput
    _min?: SkillAssessmentMinOrderByAggregateInput
    _sum?: SkillAssessmentSumOrderByAggregateInput
  }

  export type SkillAssessmentScalarWhereWithAggregatesInput = {
    AND?: SkillAssessmentScalarWhereWithAggregatesInput | SkillAssessmentScalarWhereWithAggregatesInput[]
    OR?: SkillAssessmentScalarWhereWithAggregatesInput[]
    NOT?: SkillAssessmentScalarWhereWithAggregatesInput | SkillAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillAssessment"> | number
    title?: StringWithAggregatesFilter<"SkillAssessment"> | string
    description?: StringNullableWithAggregatesFilter<"SkillAssessment"> | string | null
    createdBy?: IntWithAggregatesFilter<"SkillAssessment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SkillAssessment"> | Date | string
  }

  export type SkillQuestionWhereInput = {
    AND?: SkillQuestionWhereInput | SkillQuestionWhereInput[]
    OR?: SkillQuestionWhereInput[]
    NOT?: SkillQuestionWhereInput | SkillQuestionWhereInput[]
    id?: IntFilter<"SkillQuestion"> | number
    assessmentId?: IntFilter<"SkillQuestion"> | number
    question?: StringFilter<"SkillQuestion"> | string
    options?: JsonFilter<"SkillQuestion">
    answer?: StringFilter<"SkillQuestion"> | string
    assessment?: XOR<SkillAssessmentScalarRelationFilter, SkillAssessmentWhereInput>
  }

  export type SkillQuestionOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    assessment?: SkillAssessmentOrderByWithRelationInput
  }

  export type SkillQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillQuestionWhereInput | SkillQuestionWhereInput[]
    OR?: SkillQuestionWhereInput[]
    NOT?: SkillQuestionWhereInput | SkillQuestionWhereInput[]
    assessmentId?: IntFilter<"SkillQuestion"> | number
    question?: StringFilter<"SkillQuestion"> | string
    options?: JsonFilter<"SkillQuestion">
    answer?: StringFilter<"SkillQuestion"> | string
    assessment?: XOR<SkillAssessmentScalarRelationFilter, SkillAssessmentWhereInput>
  }, "id">

  export type SkillQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    _count?: SkillQuestionCountOrderByAggregateInput
    _avg?: SkillQuestionAvgOrderByAggregateInput
    _max?: SkillQuestionMaxOrderByAggregateInput
    _min?: SkillQuestionMinOrderByAggregateInput
    _sum?: SkillQuestionSumOrderByAggregateInput
  }

  export type SkillQuestionScalarWhereWithAggregatesInput = {
    AND?: SkillQuestionScalarWhereWithAggregatesInput | SkillQuestionScalarWhereWithAggregatesInput[]
    OR?: SkillQuestionScalarWhereWithAggregatesInput[]
    NOT?: SkillQuestionScalarWhereWithAggregatesInput | SkillQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillQuestion"> | number
    assessmentId?: IntWithAggregatesFilter<"SkillQuestion"> | number
    question?: StringWithAggregatesFilter<"SkillQuestion"> | string
    options?: JsonWithAggregatesFilter<"SkillQuestion">
    answer?: StringWithAggregatesFilter<"SkillQuestion"> | string
  }

  export type SkillResultWhereInput = {
    AND?: SkillResultWhereInput | SkillResultWhereInput[]
    OR?: SkillResultWhereInput[]
    NOT?: SkillResultWhereInput | SkillResultWhereInput[]
    id?: IntFilter<"SkillResult"> | number
    userId?: IntFilter<"SkillResult"> | number
    assessmentId?: IntFilter<"SkillResult"> | number
    score?: IntFilter<"SkillResult"> | number
    isPassed?: BoolFilter<"SkillResult"> | boolean
    certificateUrl?: StringNullableFilter<"SkillResult"> | string | null
    certificateCode?: StringNullableFilter<"SkillResult"> | string | null
    startedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    finishedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    createdAt?: DateTimeFilter<"SkillResult"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    assessment?: XOR<SkillAssessmentScalarRelationFilter, SkillAssessmentWhereInput>
  }

  export type SkillResultOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
    isPassed?: SortOrder
    certificateUrl?: SortOrderInput | SortOrder
    certificateCode?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    assessment?: SkillAssessmentOrderByWithRelationInput
  }

  export type SkillResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_assessmentId?: SkillResultUserIdAssessmentIdCompoundUniqueInput
    AND?: SkillResultWhereInput | SkillResultWhereInput[]
    OR?: SkillResultWhereInput[]
    NOT?: SkillResultWhereInput | SkillResultWhereInput[]
    userId?: IntFilter<"SkillResult"> | number
    assessmentId?: IntFilter<"SkillResult"> | number
    score?: IntFilter<"SkillResult"> | number
    isPassed?: BoolFilter<"SkillResult"> | boolean
    certificateUrl?: StringNullableFilter<"SkillResult"> | string | null
    certificateCode?: StringNullableFilter<"SkillResult"> | string | null
    startedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    finishedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    createdAt?: DateTimeFilter<"SkillResult"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    assessment?: XOR<SkillAssessmentScalarRelationFilter, SkillAssessmentWhereInput>
  }, "id" | "userId_assessmentId">

  export type SkillResultOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
    isPassed?: SortOrder
    certificateUrl?: SortOrderInput | SortOrder
    certificateCode?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SkillResultCountOrderByAggregateInput
    _avg?: SkillResultAvgOrderByAggregateInput
    _max?: SkillResultMaxOrderByAggregateInput
    _min?: SkillResultMinOrderByAggregateInput
    _sum?: SkillResultSumOrderByAggregateInput
  }

  export type SkillResultScalarWhereWithAggregatesInput = {
    AND?: SkillResultScalarWhereWithAggregatesInput | SkillResultScalarWhereWithAggregatesInput[]
    OR?: SkillResultScalarWhereWithAggregatesInput[]
    NOT?: SkillResultScalarWhereWithAggregatesInput | SkillResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillResult"> | number
    userId?: IntWithAggregatesFilter<"SkillResult"> | number
    assessmentId?: IntWithAggregatesFilter<"SkillResult"> | number
    score?: IntWithAggregatesFilter<"SkillResult"> | number
    isPassed?: BoolWithAggregatesFilter<"SkillResult"> | boolean
    certificateUrl?: StringNullableWithAggregatesFilter<"SkillResult"> | string | null
    certificateCode?: StringNullableWithAggregatesFilter<"SkillResult"> | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"SkillResult"> | Date | string | null
    finishedAt?: DateTimeNullableWithAggregatesFilter<"SkillResult"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SkillResult"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: IntFilter<"UserBadge"> | number
    userId?: IntFilter<"UserBadge"> | number
    badgeName?: StringFilter<"UserBadge"> | string
    badgeIcon?: StringNullableFilter<"UserBadge"> | string | null
    awardedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeName?: SortOrder
    badgeIcon?: SortOrderInput | SortOrder
    awardedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: IntFilter<"UserBadge"> | number
    badgeName?: StringFilter<"UserBadge"> | string
    badgeIcon?: StringNullableFilter<"UserBadge"> | string | null
    awardedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeName?: SortOrder
    badgeIcon?: SortOrderInput | SortOrder
    awardedAt?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _avg?: UserBadgeAvgOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
    _sum?: UserBadgeSumOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserBadge"> | number
    userId?: IntWithAggregatesFilter<"UserBadge"> | number
    badgeName?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeIcon?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    awardedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
  }

  export type GeneratedCVWhereInput = {
    AND?: GeneratedCVWhereInput | GeneratedCVWhereInput[]
    OR?: GeneratedCVWhereInput[]
    NOT?: GeneratedCVWhereInput | GeneratedCVWhereInput[]
    id?: IntFilter<"GeneratedCV"> | number
    userId?: IntFilter<"GeneratedCV"> | number
    fileUrl?: StringFilter<"GeneratedCV"> | string
    templateUsed?: StringFilter<"GeneratedCV"> | string
    additionalInfo?: JsonNullableFilter<"GeneratedCV">
    createdAt?: DateTimeFilter<"GeneratedCV"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GeneratedCVOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileUrl?: SortOrder
    templateUsed?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GeneratedCVWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GeneratedCVWhereInput | GeneratedCVWhereInput[]
    OR?: GeneratedCVWhereInput[]
    NOT?: GeneratedCVWhereInput | GeneratedCVWhereInput[]
    userId?: IntFilter<"GeneratedCV"> | number
    fileUrl?: StringFilter<"GeneratedCV"> | string
    templateUsed?: StringFilter<"GeneratedCV"> | string
    additionalInfo?: JsonNullableFilter<"GeneratedCV">
    createdAt?: DateTimeFilter<"GeneratedCV"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GeneratedCVOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileUrl?: SortOrder
    templateUsed?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: GeneratedCVCountOrderByAggregateInput
    _avg?: GeneratedCVAvgOrderByAggregateInput
    _max?: GeneratedCVMaxOrderByAggregateInput
    _min?: GeneratedCVMinOrderByAggregateInput
    _sum?: GeneratedCVSumOrderByAggregateInput
  }

  export type GeneratedCVScalarWhereWithAggregatesInput = {
    AND?: GeneratedCVScalarWhereWithAggregatesInput | GeneratedCVScalarWhereWithAggregatesInput[]
    OR?: GeneratedCVScalarWhereWithAggregatesInput[]
    NOT?: GeneratedCVScalarWhereWithAggregatesInput | GeneratedCVScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GeneratedCV"> | number
    userId?: IntWithAggregatesFilter<"GeneratedCV"> | number
    fileUrl?: StringWithAggregatesFilter<"GeneratedCV"> | string
    templateUsed?: StringWithAggregatesFilter<"GeneratedCV"> | string
    additionalInfo?: JsonNullableWithAggregatesFilter<"GeneratedCV">
    createdAt?: DateTimeWithAggregatesFilter<"GeneratedCV"> | Date | string
  }

  export type SubscriptionPlanWhereInput = {
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    id?: IntFilter<"SubscriptionPlan"> | number
    planName?: StringFilter<"SubscriptionPlan"> | string
    planPrice?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    planDescription?: StringNullableFilter<"SubscriptionPlan"> | string | null
    subscriptions?: SubscriptionListRelationFilter
  }

  export type SubscriptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planDescription?: SortOrderInput | SortOrder
    subscriptions?: SubscriptionOrderByRelationAggregateInput
  }

  export type SubscriptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    planName?: StringFilter<"SubscriptionPlan"> | string
    planPrice?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    planDescription?: StringNullableFilter<"SubscriptionPlan"> | string | null
    subscriptions?: SubscriptionListRelationFilter
  }, "id">

  export type SubscriptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planDescription?: SortOrderInput | SortOrder
    _count?: SubscriptionPlanCountOrderByAggregateInput
    _avg?: SubscriptionPlanAvgOrderByAggregateInput
    _max?: SubscriptionPlanMaxOrderByAggregateInput
    _min?: SubscriptionPlanMinOrderByAggregateInput
    _sum?: SubscriptionPlanSumOrderByAggregateInput
  }

  export type SubscriptionPlanScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPlanScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    planName?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    planPrice?: DecimalWithAggregatesFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    planDescription?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: IntFilter<"Subscription"> | number
    userId?: IntFilter<"Subscription"> | number
    subscriptionPlanId?: IntFilter<"Subscription"> | number
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    isActive?: BoolFilter<"Subscription"> | boolean
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    plan?: SubscriptionPlanOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    userId?: IntFilter<"Subscription"> | number
    subscriptionPlanId?: IntFilter<"Subscription"> | number
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    isActive?: BoolFilter<"Subscription"> | boolean
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    payments?: PaymentListRelationFilter
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _avg?: SubscriptionAvgOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
    _sum?: SubscriptionSumOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subscription"> | number
    userId?: IntWithAggregatesFilter<"Subscription"> | number
    subscriptionPlanId?: IntWithAggregatesFilter<"Subscription"> | number
    startDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Subscription"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    subscriptionId?: IntFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentProof?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    approvedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    gatewayTransactionId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    expiredAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentMethod?: SortOrder
    paymentProof?: SortOrderInput | SortOrder
    status?: SortOrder
    amount?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    gatewayTransactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrderInput | SortOrder
    subscription?: SubscriptionOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    subscriptionId?: IntFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentProof?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    approvedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    gatewayTransactionId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    expiredAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentMethod?: SortOrder
    paymentProof?: SortOrderInput | SortOrder
    status?: SortOrder
    amount?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    gatewayTransactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    subscriptionId?: IntWithAggregatesFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    paymentProof?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    approvedAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    gatewayTransactionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    expiredAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
  }

  export type EmploymentWhereInput = {
    AND?: EmploymentWhereInput | EmploymentWhereInput[]
    OR?: EmploymentWhereInput[]
    NOT?: EmploymentWhereInput | EmploymentWhereInput[]
    id?: IntFilter<"Employment"> | number
    userId?: IntFilter<"Employment"> | number
    companyId?: IntNullableFilter<"Employment"> | number | null
    startDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    reviews?: CompanyReviewListRelationFilter
  }

  export type EmploymentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    reviews?: CompanyReviewOrderByRelationAggregateInput
  }

  export type EmploymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_companyId?: EmploymentUserIdCompanyIdCompoundUniqueInput
    AND?: EmploymentWhereInput | EmploymentWhereInput[]
    OR?: EmploymentWhereInput[]
    NOT?: EmploymentWhereInput | EmploymentWhereInput[]
    userId?: IntFilter<"Employment"> | number
    companyId?: IntNullableFilter<"Employment"> | number | null
    startDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    reviews?: CompanyReviewListRelationFilter
  }, "id" | "userId_companyId">

  export type EmploymentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EmploymentCountOrderByAggregateInput
    _avg?: EmploymentAvgOrderByAggregateInput
    _max?: EmploymentMaxOrderByAggregateInput
    _min?: EmploymentMinOrderByAggregateInput
    _sum?: EmploymentSumOrderByAggregateInput
  }

  export type EmploymentScalarWhereWithAggregatesInput = {
    AND?: EmploymentScalarWhereWithAggregatesInput | EmploymentScalarWhereWithAggregatesInput[]
    OR?: EmploymentScalarWhereWithAggregatesInput[]
    NOT?: EmploymentScalarWhereWithAggregatesInput | EmploymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employment"> | number
    userId?: IntWithAggregatesFilter<"Employment"> | number
    companyId?: IntNullableWithAggregatesFilter<"Employment"> | number | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Employment"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Employment"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Employment"> | Date | string
  }

  export type CompanyReviewWhereInput = {
    AND?: CompanyReviewWhereInput | CompanyReviewWhereInput[]
    OR?: CompanyReviewWhereInput[]
    NOT?: CompanyReviewWhereInput | CompanyReviewWhereInput[]
    id?: IntFilter<"CompanyReview"> | number
    employmentId?: IntFilter<"CompanyReview"> | number
    position?: StringFilter<"CompanyReview"> | string
    salaryEstimate?: IntNullableFilter<"CompanyReview"> | number | null
    cultureRating?: IntFilter<"CompanyReview"> | number
    worklifeRating?: IntFilter<"CompanyReview"> | number
    facilityRating?: IntFilter<"CompanyReview"> | number
    careerRating?: IntFilter<"CompanyReview"> | number
    comment?: StringNullableFilter<"CompanyReview"> | string | null
    createdAt?: DateTimeFilter<"CompanyReview"> | Date | string
    employment?: XOR<EmploymentScalarRelationFilter, EmploymentWhereInput>
  }

  export type CompanyReviewOrderByWithRelationInput = {
    id?: SortOrder
    employmentId?: SortOrder
    position?: SortOrder
    salaryEstimate?: SortOrderInput | SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    employment?: EmploymentOrderByWithRelationInput
  }

  export type CompanyReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employmentId?: number
    AND?: CompanyReviewWhereInput | CompanyReviewWhereInput[]
    OR?: CompanyReviewWhereInput[]
    NOT?: CompanyReviewWhereInput | CompanyReviewWhereInput[]
    position?: StringFilter<"CompanyReview"> | string
    salaryEstimate?: IntNullableFilter<"CompanyReview"> | number | null
    cultureRating?: IntFilter<"CompanyReview"> | number
    worklifeRating?: IntFilter<"CompanyReview"> | number
    facilityRating?: IntFilter<"CompanyReview"> | number
    careerRating?: IntFilter<"CompanyReview"> | number
    comment?: StringNullableFilter<"CompanyReview"> | string | null
    createdAt?: DateTimeFilter<"CompanyReview"> | Date | string
    employment?: XOR<EmploymentScalarRelationFilter, EmploymentWhereInput>
  }, "id" | "employmentId">

  export type CompanyReviewOrderByWithAggregationInput = {
    id?: SortOrder
    employmentId?: SortOrder
    position?: SortOrder
    salaryEstimate?: SortOrderInput | SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CompanyReviewCountOrderByAggregateInput
    _avg?: CompanyReviewAvgOrderByAggregateInput
    _max?: CompanyReviewMaxOrderByAggregateInput
    _min?: CompanyReviewMinOrderByAggregateInput
    _sum?: CompanyReviewSumOrderByAggregateInput
  }

  export type CompanyReviewScalarWhereWithAggregatesInput = {
    AND?: CompanyReviewScalarWhereWithAggregatesInput | CompanyReviewScalarWhereWithAggregatesInput[]
    OR?: CompanyReviewScalarWhereWithAggregatesInput[]
    NOT?: CompanyReviewScalarWhereWithAggregatesInput | CompanyReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompanyReview"> | number
    employmentId?: IntWithAggregatesFilter<"CompanyReview"> | number
    position?: StringWithAggregatesFilter<"CompanyReview"> | string
    salaryEstimate?: IntNullableWithAggregatesFilter<"CompanyReview"> | number | null
    cultureRating?: IntWithAggregatesFilter<"CompanyReview"> | number
    worklifeRating?: IntWithAggregatesFilter<"CompanyReview"> | number
    facilityRating?: IntWithAggregatesFilter<"CompanyReview"> | number
    careerRating?: IntWithAggregatesFilter<"CompanyReview"> | number
    comment?: StringNullableWithAggregatesFilter<"CompanyReview"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CompanyReview"> | Date | string
  }

  export type JobShareWhereInput = {
    AND?: JobShareWhereInput | JobShareWhereInput[]
    OR?: JobShareWhereInput[]
    NOT?: JobShareWhereInput | JobShareWhereInput[]
    id?: IntFilter<"JobShare"> | number
    userId?: IntFilter<"JobShare"> | number
    jobId?: IntFilter<"JobShare"> | number
    platform?: EnumSharePlatformFilter<"JobShare"> | $Enums.SharePlatform
    sharedUrl?: StringNullableFilter<"JobShare"> | string | null
    customMessage?: StringNullableFilter<"JobShare"> | string | null
    createdAt?: DateTimeFilter<"JobShare"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type JobShareOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    platform?: SortOrder
    sharedUrl?: SortOrderInput | SortOrder
    customMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
  }

  export type JobShareWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobShareWhereInput | JobShareWhereInput[]
    OR?: JobShareWhereInput[]
    NOT?: JobShareWhereInput | JobShareWhereInput[]
    userId?: IntFilter<"JobShare"> | number
    jobId?: IntFilter<"JobShare"> | number
    platform?: EnumSharePlatformFilter<"JobShare"> | $Enums.SharePlatform
    sharedUrl?: StringNullableFilter<"JobShare"> | string | null
    customMessage?: StringNullableFilter<"JobShare"> | string | null
    createdAt?: DateTimeFilter<"JobShare"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id">

  export type JobShareOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    platform?: SortOrder
    sharedUrl?: SortOrderInput | SortOrder
    customMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: JobShareCountOrderByAggregateInput
    _avg?: JobShareAvgOrderByAggregateInput
    _max?: JobShareMaxOrderByAggregateInput
    _min?: JobShareMinOrderByAggregateInput
    _sum?: JobShareSumOrderByAggregateInput
  }

  export type JobShareScalarWhereWithAggregatesInput = {
    AND?: JobShareScalarWhereWithAggregatesInput | JobShareScalarWhereWithAggregatesInput[]
    OR?: JobShareScalarWhereWithAggregatesInput[]
    NOT?: JobShareScalarWhereWithAggregatesInput | JobShareScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobShare"> | number
    userId?: IntWithAggregatesFilter<"JobShare"> | number
    jobId?: IntWithAggregatesFilter<"JobShare"> | number
    platform?: EnumSharePlatformWithAggregatesFilter<"JobShare"> | $Enums.SharePlatform
    sharedUrl?: StringNullableWithAggregatesFilter<"JobShare"> | string | null
    customMessage?: StringNullableWithAggregatesFilter<"JobShare"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JobShare"> | Date | string
  }

  export type UserCreateInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProviderCreateInput = {
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProvidersInput
  }

  export type UserProviderUncheckedCreateInput = {
    id?: number
    userId: number
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserProviderUpdateInput = {
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProvidersNestedInput
  }

  export type UserProviderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProviderCreateManyInput = {
    id?: number
    userId: number
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserProviderUpdateManyMutationInput = {
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProviderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: UserCreateNestedOneWithoutAdminOfInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    employments?: EmploymentCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId?: number | null
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneWithoutAdminOfNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    employments?: EmploymentUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId?: number | null
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JobCreateInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestCreateNestedManyWithoutJobInput
    savedBy?: SavedJobCreateNestedManyWithoutJobInput
    shares?: JobShareCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestUncheckedCreateNestedManyWithoutJobInput
    savedBy?: SavedJobUncheckedCreateNestedManyWithoutJobInput
    shares?: JobShareUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUpdateManyWithoutJobNestedInput
    shares?: JobShareUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUncheckedUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUncheckedUpdateManyWithoutJobNestedInput
    shares?: JobShareUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateInput = {
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicationsInput
    job: JobCreateNestedOneWithoutApplicationsInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    userId: number
    jobId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    userId: number
    jobId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateManyMutationInput = {
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSavedJobsInput
    job: JobCreateNestedOneWithoutSavedByInput
  }

  export type SavedJobUncheckedCreateInput = {
    id?: number
    userId: number
    jobId: number
    createdAt?: Date | string
  }

  export type SavedJobUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedJobsNestedInput
    job?: JobUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedJobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobCreateManyInput = {
    id?: number
    userId: number
    jobId: number
    createdAt?: Date | string
  }

  export type SavedJobUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewCreateInput = {
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
    application: ApplicationCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateInput = {
    id?: number
    applicationId: number
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
  }

  export type InterviewUpdateInput = {
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    application?: ApplicationUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InterviewCreateManyInput = {
    id?: number
    applicationId: number
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
  }

  export type InterviewUpdateManyMutationInput = {
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InterviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PreselectionTestCreateInput = {
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutPreselectionTestsInput
    questions?: PreselectionQuestionCreateNestedManyWithoutTestInput
    results?: PreselectionResultCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestUncheckedCreateInput = {
    id?: number
    jobId: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    questions?: PreselectionQuestionUncheckedCreateNestedManyWithoutTestInput
    results?: PreselectionResultUncheckedCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestUpdateInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPreselectionTestsNestedInput
    questions?: PreselectionQuestionUpdateManyWithoutTestNestedInput
    results?: PreselectionResultUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: PreselectionQuestionUncheckedUpdateManyWithoutTestNestedInput
    results?: PreselectionResultUncheckedUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestCreateManyInput = {
    id?: number
    jobId: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
  }

  export type PreselectionTestUpdateManyMutationInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionTestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionQuestionCreateInput = {
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    test: PreselectionTestCreateNestedOneWithoutQuestionsInput
    answers?: ApplicantAnswerCreateNestedManyWithoutQuestionInput
  }

  export type PreselectionQuestionUncheckedCreateInput = {
    id?: number
    testId: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    answers?: ApplicantAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type PreselectionQuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    test?: PreselectionTestUpdateOneRequiredWithoutQuestionsNestedInput
    answers?: ApplicantAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type PreselectionQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    answers?: ApplicantAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type PreselectionQuestionCreateManyInput = {
    id?: number
    testId: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type PreselectionQuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type PreselectionQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type PreselectionResultCreateInput = {
    score: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPreselectionResultsInput
    test: PreselectionTestCreateNestedOneWithoutResultsInput
    answers?: ApplicantAnswerCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultUncheckedCreateInput = {
    id?: number
    userId: number
    testId: number
    score: number
    createdAt?: Date | string
    answers?: ApplicantAnswerUncheckedCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreselectionResultsNestedInput
    test?: PreselectionTestUpdateOneRequiredWithoutResultsNestedInput
    answers?: ApplicantAnswerUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: ApplicantAnswerUncheckedUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultCreateManyInput = {
    id?: number
    userId: number
    testId: number
    score: number
    createdAt?: Date | string
  }

  export type PreselectionResultUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantAnswerCreateInput = {
    selected: string
    isCorrect: boolean
    result: PreselectionResultCreateNestedOneWithoutAnswersInput
    question: PreselectionQuestionCreateNestedOneWithoutAnswersInput
  }

  export type ApplicantAnswerUncheckedCreateInput = {
    id?: number
    resultId: number
    questionId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerUpdateInput = {
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    result?: PreselectionResultUpdateOneRequiredWithoutAnswersNestedInput
    question?: PreselectionQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ApplicantAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicantAnswerCreateManyInput = {
    id?: number
    resultId: number
    questionId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerUpdateManyMutationInput = {
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicantAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillAssessmentCreateInput = {
    title: string
    description?: string | null
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedAssessmentsInput
    questions?: SkillQuestionCreateNestedManyWithoutAssessmentInput
    results?: SkillResultCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    createdBy: number
    createdAt?: Date | string
    questions?: SkillQuestionUncheckedCreateNestedManyWithoutAssessmentInput
    results?: SkillResultUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
    questions?: SkillQuestionUpdateManyWithoutAssessmentNestedInput
    results?: SkillResultUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: SkillQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
    results?: SkillResultUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    createdBy: number
    createdAt?: Date | string
  }

  export type SkillAssessmentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillQuestionCreateInput = {
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    assessment: SkillAssessmentCreateNestedOneWithoutQuestionsInput
  }

  export type SkillQuestionUncheckedCreateInput = {
    id?: number
    assessmentId: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type SkillQuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    assessment?: SkillAssessmentUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type SkillQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillQuestionCreateManyInput = {
    id?: number
    assessmentId: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type SkillQuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillResultCreateInput = {
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSkillResultsInput
    assessment: SkillAssessmentCreateNestedOneWithoutResultsInput
  }

  export type SkillResultUncheckedCreateInput = {
    id?: number
    userId: number
    assessmentId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillResultUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSkillResultsNestedInput
    assessment?: SkillAssessmentUpdateOneRequiredWithoutResultsNestedInput
  }

  export type SkillResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillResultCreateManyInput = {
    id?: number
    userId: number
    assessmentId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillResultUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
    user: UserCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: number
    userId: number
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
  }

  export type UserBadgeUpdateInput = {
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyInput = {
    id?: number
    userId: number
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
  }

  export type UserBadgeUpdateManyMutationInput = {
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVCreateInput = {
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGeneratedCvsInput
  }

  export type GeneratedCVUncheckedCreateInput = {
    id?: number
    userId: number
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type GeneratedCVUpdateInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGeneratedCvsNestedInput
  }

  export type GeneratedCVUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVCreateManyInput = {
    id?: number
    userId: number
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type GeneratedCVUpdateManyMutationInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanCreateInput = {
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planDescription?: string | null
    subscriptions?: SubscriptionCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUncheckedCreateInput = {
    id?: number
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planDescription?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUpdateInput = {
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanCreateManyInput = {
    id?: number
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planDescription?: string | null
  }

  export type SubscriptionPlanUpdateManyMutationInput = {
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionCreateInput = {
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionsInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    payments?: PaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: number
    userId: number
    subscriptionPlanId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    payments?: PaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    subscriptionPlanId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionCreateManyInput = {
    id?: number
    userId: number
    subscriptionPlanId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    subscriptionPlanId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
    subscription: SubscriptionCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    subscriptionId: number
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type PaymentUpdateInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscription?: SubscriptionUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateManyInput = {
    id?: number
    subscriptionId: number
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type PaymentUpdateManyMutationInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionId?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmploymentCreateInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmploymentsInput
    company?: CompanyCreateNestedOneWithoutEmploymentsInput
    reviews?: CompanyReviewCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentUncheckedCreateInput = {
    id?: number
    userId: number
    companyId?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    reviews?: CompanyReviewUncheckedCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentUpdateInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmploymentsNestedInput
    company?: CompanyUpdateOneWithoutEmploymentsNestedInput
    reviews?: CompanyReviewUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: CompanyReviewUncheckedUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentCreateManyInput = {
    id?: number
    userId: number
    companyId?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type EmploymentUpdateManyMutationInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyReviewCreateInput = {
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
    employment: EmploymentCreateNestedOneWithoutReviewsInput
  }

  export type CompanyReviewUncheckedCreateInput = {
    id?: number
    employmentId: number
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CompanyReviewUpdateInput = {
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employment?: EmploymentUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type CompanyReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employmentId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyReviewCreateManyInput = {
    id?: number
    employmentId: number
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CompanyReviewUpdateManyMutationInput = {
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employmentId?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareCreateInput = {
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutJobSharesInput
    job: JobCreateNestedOneWithoutSharesInput
  }

  export type JobShareUncheckedCreateInput = {
    id?: number
    userId: number
    jobId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type JobShareUpdateInput = {
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobSharesNestedInput
    job?: JobUpdateOneRequiredWithoutSharesNestedInput
  }

  export type JobShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareCreateManyInput = {
    id?: number
    userId: number
    jobId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type JobShareUpdateManyMutationInput = {
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserProviderListRelationFilter = {
    every?: UserProviderWhereInput
    some?: UserProviderWhereInput
    none?: UserProviderWhereInput
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type EmploymentListRelationFilter = {
    every?: EmploymentWhereInput
    some?: EmploymentWhereInput
    none?: EmploymentWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type PreselectionResultListRelationFilter = {
    every?: PreselectionResultWhereInput
    some?: PreselectionResultWhereInput
    none?: PreselectionResultWhereInput
  }

  export type SkillResultListRelationFilter = {
    every?: SkillResultWhereInput
    some?: SkillResultWhereInput
    none?: SkillResultWhereInput
  }

  export type SkillAssessmentListRelationFilter = {
    every?: SkillAssessmentWhereInput
    some?: SkillAssessmentWhereInput
    none?: SkillAssessmentWhereInput
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type GeneratedCVListRelationFilter = {
    every?: GeneratedCVWhereInput
    some?: GeneratedCVWhereInput
    none?: GeneratedCVWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type SavedJobListRelationFilter = {
    every?: SavedJobWhereInput
    some?: SavedJobWhereInput
    none?: SavedJobWhereInput
  }

  export type JobShareListRelationFilter = {
    every?: JobShareWhereInput
    some?: JobShareWhereInput
    none?: JobShareWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmploymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreselectionResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneratedCVOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    education?: SortOrder
    address?: SortOrder
    profilePicture?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    education?: SortOrder
    address?: SortOrder
    profilePicture?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    education?: SortOrder
    address?: SortOrder
    profilePicture?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProviderProviderProviderIdCompoundUniqueInput = {
    provider: $Enums.ProviderType
    providerId: string
  }

  export type UserProviderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProviderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProviderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
  }

  export type UserProviderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    location?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    location?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    location?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type PreselectionTestListRelationFilter = {
    every?: PreselectionTestWhereInput
    some?: PreselectionTestWhereInput
    none?: PreselectionTestWhereInput
  }

  export type PreselectionTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    city?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    tags?: SortOrder
    banner?: SortOrder
    deadline?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    city?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    banner?: SortOrder
    deadline?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    city?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    banner?: SortOrder
    deadline?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type InterviewListRelationFilter = {
    every?: InterviewWhereInput
    some?: InterviewWhereInput
    none?: InterviewWhereInput
  }

  export type InterviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationUserIdJobIdCompoundUniqueInput = {
    userId: number
    jobId: number
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    cvFile?: SortOrder
    expectedSalary?: SortOrder
    status?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    expectedSalary?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    cvFile?: SortOrder
    expectedSalary?: SortOrder
    status?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    cvFile?: SortOrder
    expectedSalary?: SortOrder
    status?: SortOrder
    reviewNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    expectedSalary?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type SavedJobUserIdJobIdCompoundUniqueInput = {
    userId: number
    jobId: number
  }

  export type SavedJobCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
  }

  export type SavedJobAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
  }

  export type SavedJobMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
  }

  export type SavedJobMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    createdAt?: SortOrder
  }

  export type SavedJobSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
  }

  export type EnumInterviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusFilter<$PrismaModel> | $Enums.InterviewStatus
  }

  export type ApplicationScalarRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type InterviewCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    scheduleDate?: SortOrder
    locationOrLink?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reminderSentAt?: SortOrder
  }

  export type InterviewAvgOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type InterviewMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    scheduleDate?: SortOrder
    locationOrLink?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reminderSentAt?: SortOrder
  }

  export type InterviewMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    scheduleDate?: SortOrder
    locationOrLink?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reminderSentAt?: SortOrder
  }

  export type InterviewSumOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
  }

  export type EnumInterviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewStatusFilter<$PrismaModel>
    _max?: NestedEnumInterviewStatusFilter<$PrismaModel>
  }

  export type PreselectionQuestionListRelationFilter = {
    every?: PreselectionQuestionWhereInput
    some?: PreselectionQuestionWhereInput
    none?: PreselectionQuestionWhereInput
  }

  export type PreselectionQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreselectionTestCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isActive?: SortOrder
    passingScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionTestAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    passingScore?: SortOrder
  }

  export type PreselectionTestMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isActive?: SortOrder
    passingScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionTestMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isActive?: SortOrder
    passingScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionTestSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    passingScore?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PreselectionTestScalarRelationFilter = {
    is?: PreselectionTestWhereInput
    isNot?: PreselectionTestWhereInput
  }

  export type ApplicantAnswerListRelationFilter = {
    every?: ApplicantAnswerWhereInput
    some?: ApplicantAnswerWhereInput
    none?: ApplicantAnswerWhereInput
  }

  export type ApplicantAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreselectionQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
  }

  export type PreselectionQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
  }

  export type PreselectionQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type PreselectionQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type PreselectionQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PreselectionResultUserIdTestIdCompoundUniqueInput = {
    userId: number
    testId: number
  }

  export type PreselectionResultCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionResultAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
  }

  export type PreselectionResultMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionResultMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type PreselectionResultSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testId?: SortOrder
    score?: SortOrder
  }

  export type PreselectionResultScalarRelationFilter = {
    is?: PreselectionResultWhereInput
    isNot?: PreselectionResultWhereInput
  }

  export type PreselectionQuestionScalarRelationFilter = {
    is?: PreselectionQuestionWhereInput
    isNot?: PreselectionQuestionWhereInput
  }

  export type ApplicantAnswerResultIdQuestionIdCompoundUniqueInput = {
    resultId: number
    questionId: number
  }

  export type ApplicantAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
    selected?: SortOrder
    isCorrect?: SortOrder
  }

  export type ApplicantAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
  }

  export type ApplicantAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
    selected?: SortOrder
    isCorrect?: SortOrder
  }

  export type ApplicantAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
    selected?: SortOrder
    isCorrect?: SortOrder
  }

  export type ApplicantAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    questionId?: SortOrder
  }

  export type SkillQuestionListRelationFilter = {
    every?: SkillQuestionWhereInput
    some?: SkillQuestionWhereInput
    none?: SkillQuestionWhereInput
  }

  export type SkillQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type SkillAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type SkillAssessmentScalarRelationFilter = {
    is?: SkillAssessmentWhereInput
    isNot?: SkillAssessmentWhereInput
  }

  export type SkillQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    question?: SortOrder
    options?: SortOrder
    answer?: SortOrder
  }

  export type SkillQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
  }

  export type SkillQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type SkillQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
  }

  export type SkillQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
  }

  export type SkillResultUserIdAssessmentIdCompoundUniqueInput = {
    userId: number
    assessmentId: number
  }

  export type SkillResultCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
    isPassed?: SortOrder
    certificateUrl?: SortOrder
    certificateCode?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillResultAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
  }

  export type SkillResultMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
    isPassed?: SortOrder
    certificateUrl?: SortOrder
    certificateCode?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillResultMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
    isPassed?: SortOrder
    certificateUrl?: SortOrder
    certificateCode?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillResultSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    assessmentId?: SortOrder
    score?: SortOrder
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeName?: SortOrder
    badgeIcon?: SortOrder
    awardedAt?: SortOrder
  }

  export type UserBadgeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeName?: SortOrder
    badgeIcon?: SortOrder
    awardedAt?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeName?: SortOrder
    badgeIcon?: SortOrder
    awardedAt?: SortOrder
  }

  export type UserBadgeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type GeneratedCVCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileUrl?: SortOrder
    templateUsed?: SortOrder
    additionalInfo?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedCVAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type GeneratedCVMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileUrl?: SortOrder
    templateUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedCVMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileUrl?: SortOrder
    templateUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type GeneratedCVSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type SubscriptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planDescription?: SortOrder
  }

  export type SubscriptionPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    planPrice?: SortOrder
  }

  export type SubscriptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planDescription?: SortOrder
  }

  export type SubscriptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planPrice?: SortOrder
    planDescription?: SortOrder
  }

  export type SubscriptionPlanSumOrderByAggregateInput = {
    id?: SortOrder
    planPrice?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type SubscriptionPlanScalarRelationFilter = {
    is?: SubscriptionPlanWhereInput
    isNot?: SubscriptionPlanWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscriptionPlanId?: SortOrder
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type SubscriptionScalarRelationFilter = {
    is?: SubscriptionWhereInput
    isNot?: SubscriptionWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentMethod?: SortOrder
    paymentProof?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    approvedAt?: SortOrder
    gatewayTransactionId?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentMethod?: SortOrder
    paymentProof?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    approvedAt?: SortOrder
    gatewayTransactionId?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentMethod?: SortOrder
    paymentProof?: SortOrder
    status?: SortOrder
    amount?: SortOrder
    approvedAt?: SortOrder
    gatewayTransactionId?: SortOrder
    createdAt?: SortOrder
    expiredAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type CompanyReviewListRelationFilter = {
    every?: CompanyReviewWhereInput
    some?: CompanyReviewWhereInput
    none?: CompanyReviewWhereInput
  }

  export type CompanyReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmploymentUserIdCompanyIdCompoundUniqueInput = {
    userId: number
    companyId: number
  }

  export type EmploymentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EmploymentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type EmploymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EmploymentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EmploymentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type EmploymentScalarRelationFilter = {
    is?: EmploymentWhereInput
    isNot?: EmploymentWhereInput
  }

  export type CompanyReviewCountOrderByAggregateInput = {
    id?: SortOrder
    employmentId?: SortOrder
    position?: SortOrder
    salaryEstimate?: SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type CompanyReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    employmentId?: SortOrder
    salaryEstimate?: SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
  }

  export type CompanyReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    employmentId?: SortOrder
    position?: SortOrder
    salaryEstimate?: SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type CompanyReviewMinOrderByAggregateInput = {
    id?: SortOrder
    employmentId?: SortOrder
    position?: SortOrder
    salaryEstimate?: SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type CompanyReviewSumOrderByAggregateInput = {
    id?: SortOrder
    employmentId?: SortOrder
    salaryEstimate?: SortOrder
    cultureRating?: SortOrder
    worklifeRating?: SortOrder
    facilityRating?: SortOrder
    careerRating?: SortOrder
  }

  export type EnumSharePlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.SharePlatform | EnumSharePlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSharePlatformFilter<$PrismaModel> | $Enums.SharePlatform
  }

  export type JobShareCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    platform?: SortOrder
    sharedUrl?: SortOrder
    customMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type JobShareAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
  }

  export type JobShareMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    platform?: SortOrder
    sharedUrl?: SortOrder
    customMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type JobShareMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
    platform?: SortOrder
    sharedUrl?: SortOrder
    customMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type JobShareSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    jobId?: SortOrder
  }

  export type EnumSharePlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SharePlatform | EnumSharePlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSharePlatformWithAggregatesFilter<$PrismaModel> | $Enums.SharePlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSharePlatformFilter<$PrismaModel>
    _max?: NestedEnumSharePlatformFilter<$PrismaModel>
  }

  export type UserProviderCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput> | UserProviderCreateWithoutUserInput[] | UserProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProviderCreateOrConnectWithoutUserInput | UserProviderCreateOrConnectWithoutUserInput[]
    createMany?: UserProviderCreateManyUserInputEnvelope
    connect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutAdminInput = {
    create?: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAdminInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmploymentCreateNestedManyWithoutUserInput = {
    create?: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput> | EmploymentCreateWithoutUserInput[] | EmploymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutUserInput | EmploymentCreateOrConnectWithoutUserInput[]
    createMany?: EmploymentCreateManyUserInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type PreselectionResultCreateNestedManyWithoutUserInput = {
    create?: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput> | PreselectionResultCreateWithoutUserInput[] | PreselectionResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutUserInput | PreselectionResultCreateOrConnectWithoutUserInput[]
    createMany?: PreselectionResultCreateManyUserInputEnvelope
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
  }

  export type SkillResultCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput> | SkillResultCreateWithoutUserInput[] | SkillResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutUserInput | SkillResultCreateOrConnectWithoutUserInput[]
    createMany?: SkillResultCreateManyUserInputEnvelope
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
  }

  export type SkillAssessmentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput> | SkillAssessmentCreateWithoutCreatorInput[] | SkillAssessmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutCreatorInput | SkillAssessmentCreateOrConnectWithoutCreatorInput[]
    createMany?: SkillAssessmentCreateManyCreatorInputEnvelope
    connect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type GeneratedCVCreateNestedManyWithoutUserInput = {
    create?: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput> | GeneratedCVCreateWithoutUserInput[] | GeneratedCVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GeneratedCVCreateOrConnectWithoutUserInput | GeneratedCVCreateOrConnectWithoutUserInput[]
    createMany?: GeneratedCVCreateManyUserInputEnvelope
    connect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SavedJobCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput> | SavedJobCreateWithoutUserInput[] | SavedJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutUserInput | SavedJobCreateOrConnectWithoutUserInput[]
    createMany?: SavedJobCreateManyUserInputEnvelope
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
  }

  export type JobShareCreateNestedManyWithoutUserInput = {
    create?: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput> | JobShareCreateWithoutUserInput[] | JobShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutUserInput | JobShareCreateOrConnectWithoutUserInput[]
    createMany?: JobShareCreateManyUserInputEnvelope
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
  }

  export type UserProviderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput> | UserProviderCreateWithoutUserInput[] | UserProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProviderCreateOrConnectWithoutUserInput | UserProviderCreateOrConnectWithoutUserInput[]
    createMany?: UserProviderCreateManyUserInputEnvelope
    connect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedOneWithoutAdminInput = {
    create?: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAdminInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmploymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput> | EmploymentCreateWithoutUserInput[] | EmploymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutUserInput | EmploymentCreateOrConnectWithoutUserInput[]
    createMany?: EmploymentCreateManyUserInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type PreselectionResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput> | PreselectionResultCreateWithoutUserInput[] | PreselectionResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutUserInput | PreselectionResultCreateOrConnectWithoutUserInput[]
    createMany?: PreselectionResultCreateManyUserInputEnvelope
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
  }

  export type SkillResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput> | SkillResultCreateWithoutUserInput[] | SkillResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutUserInput | SkillResultCreateOrConnectWithoutUserInput[]
    createMany?: SkillResultCreateManyUserInputEnvelope
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
  }

  export type SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput> | SkillAssessmentCreateWithoutCreatorInput[] | SkillAssessmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutCreatorInput | SkillAssessmentCreateOrConnectWithoutCreatorInput[]
    createMany?: SkillAssessmentCreateManyCreatorInputEnvelope
    connect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type GeneratedCVUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput> | GeneratedCVCreateWithoutUserInput[] | GeneratedCVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GeneratedCVCreateOrConnectWithoutUserInput | GeneratedCVCreateOrConnectWithoutUserInput[]
    createMany?: GeneratedCVCreateManyUserInputEnvelope
    connect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SavedJobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput> | SavedJobCreateWithoutUserInput[] | SavedJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutUserInput | SavedJobCreateOrConnectWithoutUserInput[]
    createMany?: SavedJobCreateManyUserInputEnvelope
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
  }

  export type JobShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput> | JobShareCreateWithoutUserInput[] | JobShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutUserInput | JobShareCreateOrConnectWithoutUserInput[]
    createMany?: JobShareCreateManyUserInputEnvelope
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProviderUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput> | UserProviderCreateWithoutUserInput[] | UserProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProviderCreateOrConnectWithoutUserInput | UserProviderCreateOrConnectWithoutUserInput[]
    upsert?: UserProviderUpsertWithWhereUniqueWithoutUserInput | UserProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProviderCreateManyUserInputEnvelope
    set?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    disconnect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    delete?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    connect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    update?: UserProviderUpdateWithWhereUniqueWithoutUserInput | UserProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProviderUpdateManyWithWhereWithoutUserInput | UserProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProviderScalarWhereInput | UserProviderScalarWhereInput[]
  }

  export type CompanyUpdateOneWithoutAdminNestedInput = {
    create?: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAdminInput
    upsert?: CompanyUpsertWithoutAdminInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAdminInput, CompanyUpdateWithoutAdminInput>, CompanyUncheckedUpdateWithoutAdminInput>
  }

  export type EmploymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput> | EmploymentCreateWithoutUserInput[] | EmploymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutUserInput | EmploymentCreateOrConnectWithoutUserInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutUserInput | EmploymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmploymentCreateManyUserInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutUserInput | EmploymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutUserInput | EmploymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutUserInput | ApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutUserInput | ApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutUserInput | ApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type PreselectionResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput> | PreselectionResultCreateWithoutUserInput[] | PreselectionResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutUserInput | PreselectionResultCreateOrConnectWithoutUserInput[]
    upsert?: PreselectionResultUpsertWithWhereUniqueWithoutUserInput | PreselectionResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PreselectionResultCreateManyUserInputEnvelope
    set?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    disconnect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    delete?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    update?: PreselectionResultUpdateWithWhereUniqueWithoutUserInput | PreselectionResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PreselectionResultUpdateManyWithWhereWithoutUserInput | PreselectionResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
  }

  export type SkillResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput> | SkillResultCreateWithoutUserInput[] | SkillResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutUserInput | SkillResultCreateOrConnectWithoutUserInput[]
    upsert?: SkillResultUpsertWithWhereUniqueWithoutUserInput | SkillResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillResultCreateManyUserInputEnvelope
    set?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    disconnect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    delete?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    update?: SkillResultUpdateWithWhereUniqueWithoutUserInput | SkillResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillResultUpdateManyWithWhereWithoutUserInput | SkillResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
  }

  export type SkillAssessmentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput> | SkillAssessmentCreateWithoutCreatorInput[] | SkillAssessmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutCreatorInput | SkillAssessmentCreateOrConnectWithoutCreatorInput[]
    upsert?: SkillAssessmentUpsertWithWhereUniqueWithoutCreatorInput | SkillAssessmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SkillAssessmentCreateManyCreatorInputEnvelope
    set?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    disconnect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    delete?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    connect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    update?: SkillAssessmentUpdateWithWhereUniqueWithoutCreatorInput | SkillAssessmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SkillAssessmentUpdateManyWithWhereWithoutCreatorInput | SkillAssessmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SkillAssessmentScalarWhereInput | SkillAssessmentScalarWhereInput[]
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type GeneratedCVUpdateManyWithoutUserNestedInput = {
    create?: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput> | GeneratedCVCreateWithoutUserInput[] | GeneratedCVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GeneratedCVCreateOrConnectWithoutUserInput | GeneratedCVCreateOrConnectWithoutUserInput[]
    upsert?: GeneratedCVUpsertWithWhereUniqueWithoutUserInput | GeneratedCVUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GeneratedCVCreateManyUserInputEnvelope
    set?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    disconnect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    delete?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    connect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    update?: GeneratedCVUpdateWithWhereUniqueWithoutUserInput | GeneratedCVUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GeneratedCVUpdateManyWithWhereWithoutUserInput | GeneratedCVUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GeneratedCVScalarWhereInput | GeneratedCVScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SavedJobUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput> | SavedJobCreateWithoutUserInput[] | SavedJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutUserInput | SavedJobCreateOrConnectWithoutUserInput[]
    upsert?: SavedJobUpsertWithWhereUniqueWithoutUserInput | SavedJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedJobCreateManyUserInputEnvelope
    set?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    disconnect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    delete?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    update?: SavedJobUpdateWithWhereUniqueWithoutUserInput | SavedJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedJobUpdateManyWithWhereWithoutUserInput | SavedJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
  }

  export type JobShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput> | JobShareCreateWithoutUserInput[] | JobShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutUserInput | JobShareCreateOrConnectWithoutUserInput[]
    upsert?: JobShareUpsertWithWhereUniqueWithoutUserInput | JobShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobShareCreateManyUserInputEnvelope
    set?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    disconnect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    delete?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    update?: JobShareUpdateWithWhereUniqueWithoutUserInput | JobShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobShareUpdateManyWithWhereWithoutUserInput | JobShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProviderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput> | UserProviderCreateWithoutUserInput[] | UserProviderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProviderCreateOrConnectWithoutUserInput | UserProviderCreateOrConnectWithoutUserInput[]
    upsert?: UserProviderUpsertWithWhereUniqueWithoutUserInput | UserProviderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProviderCreateManyUserInputEnvelope
    set?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    disconnect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    delete?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    connect?: UserProviderWhereUniqueInput | UserProviderWhereUniqueInput[]
    update?: UserProviderUpdateWithWhereUniqueWithoutUserInput | UserProviderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProviderUpdateManyWithWhereWithoutUserInput | UserProviderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProviderScalarWhereInput | UserProviderScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateOneWithoutAdminNestedInput = {
    create?: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAdminInput
    upsert?: CompanyUpsertWithoutAdminInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAdminInput, CompanyUpdateWithoutAdminInput>, CompanyUncheckedUpdateWithoutAdminInput>
  }

  export type EmploymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput> | EmploymentCreateWithoutUserInput[] | EmploymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutUserInput | EmploymentCreateOrConnectWithoutUserInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutUserInput | EmploymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmploymentCreateManyUserInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutUserInput | EmploymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutUserInput | EmploymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutUserInput | ApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutUserInput | ApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutUserInput | ApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type PreselectionResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput> | PreselectionResultCreateWithoutUserInput[] | PreselectionResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutUserInput | PreselectionResultCreateOrConnectWithoutUserInput[]
    upsert?: PreselectionResultUpsertWithWhereUniqueWithoutUserInput | PreselectionResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PreselectionResultCreateManyUserInputEnvelope
    set?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    disconnect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    delete?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    update?: PreselectionResultUpdateWithWhereUniqueWithoutUserInput | PreselectionResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PreselectionResultUpdateManyWithWhereWithoutUserInput | PreselectionResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
  }

  export type SkillResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput> | SkillResultCreateWithoutUserInput[] | SkillResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutUserInput | SkillResultCreateOrConnectWithoutUserInput[]
    upsert?: SkillResultUpsertWithWhereUniqueWithoutUserInput | SkillResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SkillResultCreateManyUserInputEnvelope
    set?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    disconnect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    delete?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    update?: SkillResultUpdateWithWhereUniqueWithoutUserInput | SkillResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SkillResultUpdateManyWithWhereWithoutUserInput | SkillResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
  }

  export type SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput> | SkillAssessmentCreateWithoutCreatorInput[] | SkillAssessmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutCreatorInput | SkillAssessmentCreateOrConnectWithoutCreatorInput[]
    upsert?: SkillAssessmentUpsertWithWhereUniqueWithoutCreatorInput | SkillAssessmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SkillAssessmentCreateManyCreatorInputEnvelope
    set?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    disconnect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    delete?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    connect?: SkillAssessmentWhereUniqueInput | SkillAssessmentWhereUniqueInput[]
    update?: SkillAssessmentUpdateWithWhereUniqueWithoutCreatorInput | SkillAssessmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SkillAssessmentUpdateManyWithWhereWithoutCreatorInput | SkillAssessmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SkillAssessmentScalarWhereInput | SkillAssessmentScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type GeneratedCVUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput> | GeneratedCVCreateWithoutUserInput[] | GeneratedCVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GeneratedCVCreateOrConnectWithoutUserInput | GeneratedCVCreateOrConnectWithoutUserInput[]
    upsert?: GeneratedCVUpsertWithWhereUniqueWithoutUserInput | GeneratedCVUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GeneratedCVCreateManyUserInputEnvelope
    set?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    disconnect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    delete?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    connect?: GeneratedCVWhereUniqueInput | GeneratedCVWhereUniqueInput[]
    update?: GeneratedCVUpdateWithWhereUniqueWithoutUserInput | GeneratedCVUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GeneratedCVUpdateManyWithWhereWithoutUserInput | GeneratedCVUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GeneratedCVScalarWhereInput | GeneratedCVScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SavedJobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput> | SavedJobCreateWithoutUserInput[] | SavedJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutUserInput | SavedJobCreateOrConnectWithoutUserInput[]
    upsert?: SavedJobUpsertWithWhereUniqueWithoutUserInput | SavedJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedJobCreateManyUserInputEnvelope
    set?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    disconnect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    delete?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    update?: SavedJobUpdateWithWhereUniqueWithoutUserInput | SavedJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedJobUpdateManyWithWhereWithoutUserInput | SavedJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
  }

  export type JobShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput> | JobShareCreateWithoutUserInput[] | JobShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutUserInput | JobShareCreateOrConnectWithoutUserInput[]
    upsert?: JobShareUpsertWithWhereUniqueWithoutUserInput | JobShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobShareCreateManyUserInputEnvelope
    set?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    disconnect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    delete?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    update?: JobShareUpdateWithWhereUniqueWithoutUserInput | JobShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobShareUpdateManyWithWhereWithoutUserInput | JobShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProvidersInput = {
    create?: XOR<UserCreateWithoutProvidersInput, UserUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProvidersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumProviderTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProviderType
  }

  export type UserUpdateOneRequiredWithoutProvidersNestedInput = {
    create?: XOR<UserCreateWithoutProvidersInput, UserUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProvidersInput
    upsert?: UserUpsertWithoutProvidersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProvidersInput, UserUpdateWithoutProvidersInput>, UserUncheckedUpdateWithoutProvidersInput>
  }

  export type UserCreateNestedOneWithoutAdminOfInput = {
    create?: XOR<UserCreateWithoutAdminOfInput, UserUncheckedCreateWithoutAdminOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminOfInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type EmploymentCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput> | EmploymentCreateWithoutCompanyInput[] | EmploymentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutCompanyInput | EmploymentCreateOrConnectWithoutCompanyInput[]
    createMany?: EmploymentCreateManyCompanyInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type EmploymentUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput> | EmploymentCreateWithoutCompanyInput[] | EmploymentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutCompanyInput | EmploymentCreateOrConnectWithoutCompanyInput[]
    createMany?: EmploymentCreateManyCompanyInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutAdminOfNestedInput = {
    create?: XOR<UserCreateWithoutAdminOfInput, UserUncheckedCreateWithoutAdminOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminOfInput
    upsert?: UserUpsertWithoutAdminOfInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminOfInput, UserUpdateWithoutAdminOfInput>, UserUncheckedUpdateWithoutAdminOfInput>
  }

  export type JobUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type EmploymentUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput> | EmploymentCreateWithoutCompanyInput[] | EmploymentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutCompanyInput | EmploymentCreateOrConnectWithoutCompanyInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutCompanyInput | EmploymentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmploymentCreateManyCompanyInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutCompanyInput | EmploymentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutCompanyInput | EmploymentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type EmploymentUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput> | EmploymentCreateWithoutCompanyInput[] | EmploymentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutCompanyInput | EmploymentCreateOrConnectWithoutCompanyInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutCompanyInput | EmploymentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmploymentCreateManyCompanyInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutCompanyInput | EmploymentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutCompanyInput | EmploymentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type JobCreatetagsInput = {
    set: string[]
  }

  export type CompanyCreateNestedOneWithoutJobsInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    connect?: CompanyWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type PreselectionTestCreateNestedManyWithoutJobInput = {
    create?: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput> | PreselectionTestCreateWithoutJobInput[] | PreselectionTestUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutJobInput | PreselectionTestCreateOrConnectWithoutJobInput[]
    createMany?: PreselectionTestCreateManyJobInputEnvelope
    connect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
  }

  export type SavedJobCreateNestedManyWithoutJobInput = {
    create?: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput> | SavedJobCreateWithoutJobInput[] | SavedJobUncheckedCreateWithoutJobInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutJobInput | SavedJobCreateOrConnectWithoutJobInput[]
    createMany?: SavedJobCreateManyJobInputEnvelope
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
  }

  export type JobShareCreateNestedManyWithoutJobInput = {
    create?: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput> | JobShareCreateWithoutJobInput[] | JobShareUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutJobInput | JobShareCreateOrConnectWithoutJobInput[]
    createMany?: JobShareCreateManyJobInputEnvelope
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type PreselectionTestUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput> | PreselectionTestCreateWithoutJobInput[] | PreselectionTestUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutJobInput | PreselectionTestCreateOrConnectWithoutJobInput[]
    createMany?: PreselectionTestCreateManyJobInputEnvelope
    connect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
  }

  export type SavedJobUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput> | SavedJobCreateWithoutJobInput[] | SavedJobUncheckedCreateWithoutJobInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutJobInput | SavedJobCreateOrConnectWithoutJobInput[]
    createMany?: SavedJobCreateManyJobInputEnvelope
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
  }

  export type JobShareUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput> | JobShareCreateWithoutJobInput[] | JobShareUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutJobInput | JobShareCreateOrConnectWithoutJobInput[]
    createMany?: JobShareCreateManyJobInputEnvelope
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
  }

  export type JobUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    upsert?: CompanyUpsertWithoutJobsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobsInput, CompanyUpdateWithoutJobsInput>, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type ApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type PreselectionTestUpdateManyWithoutJobNestedInput = {
    create?: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput> | PreselectionTestCreateWithoutJobInput[] | PreselectionTestUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutJobInput | PreselectionTestCreateOrConnectWithoutJobInput[]
    upsert?: PreselectionTestUpsertWithWhereUniqueWithoutJobInput | PreselectionTestUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: PreselectionTestCreateManyJobInputEnvelope
    set?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    disconnect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    delete?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    connect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    update?: PreselectionTestUpdateWithWhereUniqueWithoutJobInput | PreselectionTestUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: PreselectionTestUpdateManyWithWhereWithoutJobInput | PreselectionTestUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: PreselectionTestScalarWhereInput | PreselectionTestScalarWhereInput[]
  }

  export type SavedJobUpdateManyWithoutJobNestedInput = {
    create?: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput> | SavedJobCreateWithoutJobInput[] | SavedJobUncheckedCreateWithoutJobInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutJobInput | SavedJobCreateOrConnectWithoutJobInput[]
    upsert?: SavedJobUpsertWithWhereUniqueWithoutJobInput | SavedJobUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: SavedJobCreateManyJobInputEnvelope
    set?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    disconnect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    delete?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    update?: SavedJobUpdateWithWhereUniqueWithoutJobInput | SavedJobUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: SavedJobUpdateManyWithWhereWithoutJobInput | SavedJobUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
  }

  export type JobShareUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput> | JobShareCreateWithoutJobInput[] | JobShareUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutJobInput | JobShareCreateOrConnectWithoutJobInput[]
    upsert?: JobShareUpsertWithWhereUniqueWithoutJobInput | JobShareUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobShareCreateManyJobInputEnvelope
    set?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    disconnect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    delete?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    update?: JobShareUpdateWithWhereUniqueWithoutJobInput | JobShareUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobShareUpdateManyWithWhereWithoutJobInput | JobShareUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type PreselectionTestUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput> | PreselectionTestCreateWithoutJobInput[] | PreselectionTestUncheckedCreateWithoutJobInput[]
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutJobInput | PreselectionTestCreateOrConnectWithoutJobInput[]
    upsert?: PreselectionTestUpsertWithWhereUniqueWithoutJobInput | PreselectionTestUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: PreselectionTestCreateManyJobInputEnvelope
    set?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    disconnect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    delete?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    connect?: PreselectionTestWhereUniqueInput | PreselectionTestWhereUniqueInput[]
    update?: PreselectionTestUpdateWithWhereUniqueWithoutJobInput | PreselectionTestUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: PreselectionTestUpdateManyWithWhereWithoutJobInput | PreselectionTestUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: PreselectionTestScalarWhereInput | PreselectionTestScalarWhereInput[]
  }

  export type SavedJobUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput> | SavedJobCreateWithoutJobInput[] | SavedJobUncheckedCreateWithoutJobInput[]
    connectOrCreate?: SavedJobCreateOrConnectWithoutJobInput | SavedJobCreateOrConnectWithoutJobInput[]
    upsert?: SavedJobUpsertWithWhereUniqueWithoutJobInput | SavedJobUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: SavedJobCreateManyJobInputEnvelope
    set?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    disconnect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    delete?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    connect?: SavedJobWhereUniqueInput | SavedJobWhereUniqueInput[]
    update?: SavedJobUpdateWithWhereUniqueWithoutJobInput | SavedJobUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: SavedJobUpdateManyWithWhereWithoutJobInput | SavedJobUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
  }

  export type JobShareUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput> | JobShareCreateWithoutJobInput[] | JobShareUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobShareCreateOrConnectWithoutJobInput | JobShareCreateOrConnectWithoutJobInput[]
    upsert?: JobShareUpsertWithWhereUniqueWithoutJobInput | JobShareUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobShareCreateManyJobInputEnvelope
    set?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    disconnect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    delete?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    connect?: JobShareWhereUniqueInput | JobShareWhereUniqueInput[]
    update?: JobShareUpdateWithWhereUniqueWithoutJobInput | JobShareUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobShareUpdateManyWithWhereWithoutJobInput | JobShareUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    connect?: JobWhereUniqueInput
  }

  export type InterviewCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type UserUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    upsert?: UserUpsertWithoutApplicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicationsInput, UserUpdateWithoutApplicationsInput>, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    upsert?: JobUpsertWithoutApplicationsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutApplicationsInput, JobUpdateWithoutApplicationsInput>, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type InterviewUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSavedJobsInput = {
    create?: XOR<UserCreateWithoutSavedJobsInput, UserUncheckedCreateWithoutSavedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedJobsInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutSavedByInput = {
    create?: XOR<JobCreateWithoutSavedByInput, JobUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: JobCreateOrConnectWithoutSavedByInput
    connect?: JobWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSavedJobsNestedInput = {
    create?: XOR<UserCreateWithoutSavedJobsInput, UserUncheckedCreateWithoutSavedJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedJobsInput
    upsert?: UserUpsertWithoutSavedJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSavedJobsInput, UserUpdateWithoutSavedJobsInput>, UserUncheckedUpdateWithoutSavedJobsInput>
  }

  export type JobUpdateOneRequiredWithoutSavedByNestedInput = {
    create?: XOR<JobCreateWithoutSavedByInput, JobUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: JobCreateOrConnectWithoutSavedByInput
    upsert?: JobUpsertWithoutSavedByInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutSavedByInput, JobUpdateWithoutSavedByInput>, JobUncheckedUpdateWithoutSavedByInput>
  }

  export type ApplicationCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type EnumInterviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.InterviewStatus
  }

  export type ApplicationUpdateOneRequiredWithoutInterviewsNestedInput = {
    create?: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewsInput
    upsert?: ApplicationUpsertWithoutInterviewsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutInterviewsInput, ApplicationUpdateWithoutInterviewsInput>, ApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobCreateNestedOneWithoutPreselectionTestsInput = {
    create?: XOR<JobCreateWithoutPreselectionTestsInput, JobUncheckedCreateWithoutPreselectionTestsInput>
    connectOrCreate?: JobCreateOrConnectWithoutPreselectionTestsInput
    connect?: JobWhereUniqueInput
  }

  export type PreselectionQuestionCreateNestedManyWithoutTestInput = {
    create?: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput> | PreselectionQuestionCreateWithoutTestInput[] | PreselectionQuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutTestInput | PreselectionQuestionCreateOrConnectWithoutTestInput[]
    createMany?: PreselectionQuestionCreateManyTestInputEnvelope
    connect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
  }

  export type PreselectionResultCreateNestedManyWithoutTestInput = {
    create?: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput> | PreselectionResultCreateWithoutTestInput[] | PreselectionResultUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutTestInput | PreselectionResultCreateOrConnectWithoutTestInput[]
    createMany?: PreselectionResultCreateManyTestInputEnvelope
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
  }

  export type PreselectionQuestionUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput> | PreselectionQuestionCreateWithoutTestInput[] | PreselectionQuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutTestInput | PreselectionQuestionCreateOrConnectWithoutTestInput[]
    createMany?: PreselectionQuestionCreateManyTestInputEnvelope
    connect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
  }

  export type PreselectionResultUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput> | PreselectionResultCreateWithoutTestInput[] | PreselectionResultUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutTestInput | PreselectionResultCreateOrConnectWithoutTestInput[]
    createMany?: PreselectionResultCreateManyTestInputEnvelope
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
  }

  export type JobUpdateOneRequiredWithoutPreselectionTestsNestedInput = {
    create?: XOR<JobCreateWithoutPreselectionTestsInput, JobUncheckedCreateWithoutPreselectionTestsInput>
    connectOrCreate?: JobCreateOrConnectWithoutPreselectionTestsInput
    upsert?: JobUpsertWithoutPreselectionTestsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutPreselectionTestsInput, JobUpdateWithoutPreselectionTestsInput>, JobUncheckedUpdateWithoutPreselectionTestsInput>
  }

  export type PreselectionQuestionUpdateManyWithoutTestNestedInput = {
    create?: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput> | PreselectionQuestionCreateWithoutTestInput[] | PreselectionQuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutTestInput | PreselectionQuestionCreateOrConnectWithoutTestInput[]
    upsert?: PreselectionQuestionUpsertWithWhereUniqueWithoutTestInput | PreselectionQuestionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: PreselectionQuestionCreateManyTestInputEnvelope
    set?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    disconnect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    delete?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    connect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    update?: PreselectionQuestionUpdateWithWhereUniqueWithoutTestInput | PreselectionQuestionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: PreselectionQuestionUpdateManyWithWhereWithoutTestInput | PreselectionQuestionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: PreselectionQuestionScalarWhereInput | PreselectionQuestionScalarWhereInput[]
  }

  export type PreselectionResultUpdateManyWithoutTestNestedInput = {
    create?: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput> | PreselectionResultCreateWithoutTestInput[] | PreselectionResultUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutTestInput | PreselectionResultCreateOrConnectWithoutTestInput[]
    upsert?: PreselectionResultUpsertWithWhereUniqueWithoutTestInput | PreselectionResultUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: PreselectionResultCreateManyTestInputEnvelope
    set?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    disconnect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    delete?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    update?: PreselectionResultUpdateWithWhereUniqueWithoutTestInput | PreselectionResultUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: PreselectionResultUpdateManyWithWhereWithoutTestInput | PreselectionResultUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
  }

  export type PreselectionQuestionUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput> | PreselectionQuestionCreateWithoutTestInput[] | PreselectionQuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutTestInput | PreselectionQuestionCreateOrConnectWithoutTestInput[]
    upsert?: PreselectionQuestionUpsertWithWhereUniqueWithoutTestInput | PreselectionQuestionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: PreselectionQuestionCreateManyTestInputEnvelope
    set?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    disconnect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    delete?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    connect?: PreselectionQuestionWhereUniqueInput | PreselectionQuestionWhereUniqueInput[]
    update?: PreselectionQuestionUpdateWithWhereUniqueWithoutTestInput | PreselectionQuestionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: PreselectionQuestionUpdateManyWithWhereWithoutTestInput | PreselectionQuestionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: PreselectionQuestionScalarWhereInput | PreselectionQuestionScalarWhereInput[]
  }

  export type PreselectionResultUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput> | PreselectionResultCreateWithoutTestInput[] | PreselectionResultUncheckedCreateWithoutTestInput[]
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutTestInput | PreselectionResultCreateOrConnectWithoutTestInput[]
    upsert?: PreselectionResultUpsertWithWhereUniqueWithoutTestInput | PreselectionResultUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: PreselectionResultCreateManyTestInputEnvelope
    set?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    disconnect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    delete?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    connect?: PreselectionResultWhereUniqueInput | PreselectionResultWhereUniqueInput[]
    update?: PreselectionResultUpdateWithWhereUniqueWithoutTestInput | PreselectionResultUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: PreselectionResultUpdateManyWithWhereWithoutTestInput | PreselectionResultUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
  }

  export type PreselectionTestCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<PreselectionTestCreateWithoutQuestionsInput, PreselectionTestUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutQuestionsInput
    connect?: PreselectionTestWhereUniqueInput
  }

  export type ApplicantAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput> | ApplicantAnswerCreateWithoutQuestionInput[] | ApplicantAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutQuestionInput | ApplicantAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ApplicantAnswerCreateManyQuestionInputEnvelope
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
  }

  export type ApplicantAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput> | ApplicantAnswerCreateWithoutQuestionInput[] | ApplicantAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutQuestionInput | ApplicantAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ApplicantAnswerCreateManyQuestionInputEnvelope
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
  }

  export type PreselectionTestUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<PreselectionTestCreateWithoutQuestionsInput, PreselectionTestUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutQuestionsInput
    upsert?: PreselectionTestUpsertWithoutQuestionsInput
    connect?: PreselectionTestWhereUniqueInput
    update?: XOR<XOR<PreselectionTestUpdateToOneWithWhereWithoutQuestionsInput, PreselectionTestUpdateWithoutQuestionsInput>, PreselectionTestUncheckedUpdateWithoutQuestionsInput>
  }

  export type ApplicantAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput> | ApplicantAnswerCreateWithoutQuestionInput[] | ApplicantAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutQuestionInput | ApplicantAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ApplicantAnswerUpsertWithWhereUniqueWithoutQuestionInput | ApplicantAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ApplicantAnswerCreateManyQuestionInputEnvelope
    set?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    disconnect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    delete?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    update?: ApplicantAnswerUpdateWithWhereUniqueWithoutQuestionInput | ApplicantAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ApplicantAnswerUpdateManyWithWhereWithoutQuestionInput | ApplicantAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
  }

  export type ApplicantAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput> | ApplicantAnswerCreateWithoutQuestionInput[] | ApplicantAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutQuestionInput | ApplicantAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ApplicantAnswerUpsertWithWhereUniqueWithoutQuestionInput | ApplicantAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ApplicantAnswerCreateManyQuestionInputEnvelope
    set?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    disconnect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    delete?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    update?: ApplicantAnswerUpdateWithWhereUniqueWithoutQuestionInput | ApplicantAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ApplicantAnswerUpdateManyWithWhereWithoutQuestionInput | ApplicantAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPreselectionResultsInput = {
    create?: XOR<UserCreateWithoutPreselectionResultsInput, UserUncheckedCreateWithoutPreselectionResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreselectionResultsInput
    connect?: UserWhereUniqueInput
  }

  export type PreselectionTestCreateNestedOneWithoutResultsInput = {
    create?: XOR<PreselectionTestCreateWithoutResultsInput, PreselectionTestUncheckedCreateWithoutResultsInput>
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutResultsInput
    connect?: PreselectionTestWhereUniqueInput
  }

  export type ApplicantAnswerCreateNestedManyWithoutResultInput = {
    create?: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput> | ApplicantAnswerCreateWithoutResultInput[] | ApplicantAnswerUncheckedCreateWithoutResultInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutResultInput | ApplicantAnswerCreateOrConnectWithoutResultInput[]
    createMany?: ApplicantAnswerCreateManyResultInputEnvelope
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
  }

  export type ApplicantAnswerUncheckedCreateNestedManyWithoutResultInput = {
    create?: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput> | ApplicantAnswerCreateWithoutResultInput[] | ApplicantAnswerUncheckedCreateWithoutResultInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutResultInput | ApplicantAnswerCreateOrConnectWithoutResultInput[]
    createMany?: ApplicantAnswerCreateManyResultInputEnvelope
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPreselectionResultsNestedInput = {
    create?: XOR<UserCreateWithoutPreselectionResultsInput, UserUncheckedCreateWithoutPreselectionResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreselectionResultsInput
    upsert?: UserUpsertWithoutPreselectionResultsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreselectionResultsInput, UserUpdateWithoutPreselectionResultsInput>, UserUncheckedUpdateWithoutPreselectionResultsInput>
  }

  export type PreselectionTestUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<PreselectionTestCreateWithoutResultsInput, PreselectionTestUncheckedCreateWithoutResultsInput>
    connectOrCreate?: PreselectionTestCreateOrConnectWithoutResultsInput
    upsert?: PreselectionTestUpsertWithoutResultsInput
    connect?: PreselectionTestWhereUniqueInput
    update?: XOR<XOR<PreselectionTestUpdateToOneWithWhereWithoutResultsInput, PreselectionTestUpdateWithoutResultsInput>, PreselectionTestUncheckedUpdateWithoutResultsInput>
  }

  export type ApplicantAnswerUpdateManyWithoutResultNestedInput = {
    create?: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput> | ApplicantAnswerCreateWithoutResultInput[] | ApplicantAnswerUncheckedCreateWithoutResultInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutResultInput | ApplicantAnswerCreateOrConnectWithoutResultInput[]
    upsert?: ApplicantAnswerUpsertWithWhereUniqueWithoutResultInput | ApplicantAnswerUpsertWithWhereUniqueWithoutResultInput[]
    createMany?: ApplicantAnswerCreateManyResultInputEnvelope
    set?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    disconnect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    delete?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    update?: ApplicantAnswerUpdateWithWhereUniqueWithoutResultInput | ApplicantAnswerUpdateWithWhereUniqueWithoutResultInput[]
    updateMany?: ApplicantAnswerUpdateManyWithWhereWithoutResultInput | ApplicantAnswerUpdateManyWithWhereWithoutResultInput[]
    deleteMany?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
  }

  export type ApplicantAnswerUncheckedUpdateManyWithoutResultNestedInput = {
    create?: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput> | ApplicantAnswerCreateWithoutResultInput[] | ApplicantAnswerUncheckedCreateWithoutResultInput[]
    connectOrCreate?: ApplicantAnswerCreateOrConnectWithoutResultInput | ApplicantAnswerCreateOrConnectWithoutResultInput[]
    upsert?: ApplicantAnswerUpsertWithWhereUniqueWithoutResultInput | ApplicantAnswerUpsertWithWhereUniqueWithoutResultInput[]
    createMany?: ApplicantAnswerCreateManyResultInputEnvelope
    set?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    disconnect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    delete?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    connect?: ApplicantAnswerWhereUniqueInput | ApplicantAnswerWhereUniqueInput[]
    update?: ApplicantAnswerUpdateWithWhereUniqueWithoutResultInput | ApplicantAnswerUpdateWithWhereUniqueWithoutResultInput[]
    updateMany?: ApplicantAnswerUpdateManyWithWhereWithoutResultInput | ApplicantAnswerUpdateManyWithWhereWithoutResultInput[]
    deleteMany?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
  }

  export type PreselectionResultCreateNestedOneWithoutAnswersInput = {
    create?: XOR<PreselectionResultCreateWithoutAnswersInput, PreselectionResultUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutAnswersInput
    connect?: PreselectionResultWhereUniqueInput
  }

  export type PreselectionQuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<PreselectionQuestionCreateWithoutAnswersInput, PreselectionQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutAnswersInput
    connect?: PreselectionQuestionWhereUniqueInput
  }

  export type PreselectionResultUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<PreselectionResultCreateWithoutAnswersInput, PreselectionResultUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: PreselectionResultCreateOrConnectWithoutAnswersInput
    upsert?: PreselectionResultUpsertWithoutAnswersInput
    connect?: PreselectionResultWhereUniqueInput
    update?: XOR<XOR<PreselectionResultUpdateToOneWithWhereWithoutAnswersInput, PreselectionResultUpdateWithoutAnswersInput>, PreselectionResultUncheckedUpdateWithoutAnswersInput>
  }

  export type PreselectionQuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<PreselectionQuestionCreateWithoutAnswersInput, PreselectionQuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: PreselectionQuestionCreateOrConnectWithoutAnswersInput
    upsert?: PreselectionQuestionUpsertWithoutAnswersInput
    connect?: PreselectionQuestionWhereUniqueInput
    update?: XOR<XOR<PreselectionQuestionUpdateToOneWithWhereWithoutAnswersInput, PreselectionQuestionUpdateWithoutAnswersInput>, PreselectionQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type UserCreateNestedOneWithoutCreatedAssessmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
  }

  export type SkillQuestionCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput> | SkillQuestionCreateWithoutAssessmentInput[] | SkillQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillQuestionCreateOrConnectWithoutAssessmentInput | SkillQuestionCreateOrConnectWithoutAssessmentInput[]
    createMany?: SkillQuestionCreateManyAssessmentInputEnvelope
    connect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
  }

  export type SkillResultCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput> | SkillResultCreateWithoutAssessmentInput[] | SkillResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutAssessmentInput | SkillResultCreateOrConnectWithoutAssessmentInput[]
    createMany?: SkillResultCreateManyAssessmentInputEnvelope
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
  }

  export type SkillQuestionUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput> | SkillQuestionCreateWithoutAssessmentInput[] | SkillQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillQuestionCreateOrConnectWithoutAssessmentInput | SkillQuestionCreateOrConnectWithoutAssessmentInput[]
    createMany?: SkillQuestionCreateManyAssessmentInputEnvelope
    connect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
  }

  export type SkillResultUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput> | SkillResultCreateWithoutAssessmentInput[] | SkillResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutAssessmentInput | SkillResultCreateOrConnectWithoutAssessmentInput[]
    createMany?: SkillResultCreateManyAssessmentInputEnvelope
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssessmentsInput
    upsert?: UserUpsertWithoutCreatedAssessmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput, UserUpdateWithoutCreatedAssessmentsInput>, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type SkillQuestionUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput> | SkillQuestionCreateWithoutAssessmentInput[] | SkillQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillQuestionCreateOrConnectWithoutAssessmentInput | SkillQuestionCreateOrConnectWithoutAssessmentInput[]
    upsert?: SkillQuestionUpsertWithWhereUniqueWithoutAssessmentInput | SkillQuestionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: SkillQuestionCreateManyAssessmentInputEnvelope
    set?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    disconnect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    delete?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    connect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    update?: SkillQuestionUpdateWithWhereUniqueWithoutAssessmentInput | SkillQuestionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: SkillQuestionUpdateManyWithWhereWithoutAssessmentInput | SkillQuestionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: SkillQuestionScalarWhereInput | SkillQuestionScalarWhereInput[]
  }

  export type SkillResultUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput> | SkillResultCreateWithoutAssessmentInput[] | SkillResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutAssessmentInput | SkillResultCreateOrConnectWithoutAssessmentInput[]
    upsert?: SkillResultUpsertWithWhereUniqueWithoutAssessmentInput | SkillResultUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: SkillResultCreateManyAssessmentInputEnvelope
    set?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    disconnect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    delete?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    update?: SkillResultUpdateWithWhereUniqueWithoutAssessmentInput | SkillResultUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: SkillResultUpdateManyWithWhereWithoutAssessmentInput | SkillResultUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
  }

  export type SkillQuestionUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput> | SkillQuestionCreateWithoutAssessmentInput[] | SkillQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillQuestionCreateOrConnectWithoutAssessmentInput | SkillQuestionCreateOrConnectWithoutAssessmentInput[]
    upsert?: SkillQuestionUpsertWithWhereUniqueWithoutAssessmentInput | SkillQuestionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: SkillQuestionCreateManyAssessmentInputEnvelope
    set?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    disconnect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    delete?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    connect?: SkillQuestionWhereUniqueInput | SkillQuestionWhereUniqueInput[]
    update?: SkillQuestionUpdateWithWhereUniqueWithoutAssessmentInput | SkillQuestionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: SkillQuestionUpdateManyWithWhereWithoutAssessmentInput | SkillQuestionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: SkillQuestionScalarWhereInput | SkillQuestionScalarWhereInput[]
  }

  export type SkillResultUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput> | SkillResultCreateWithoutAssessmentInput[] | SkillResultUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: SkillResultCreateOrConnectWithoutAssessmentInput | SkillResultCreateOrConnectWithoutAssessmentInput[]
    upsert?: SkillResultUpsertWithWhereUniqueWithoutAssessmentInput | SkillResultUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: SkillResultCreateManyAssessmentInputEnvelope
    set?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    disconnect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    delete?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    connect?: SkillResultWhereUniqueInput | SkillResultWhereUniqueInput[]
    update?: SkillResultUpdateWithWhereUniqueWithoutAssessmentInput | SkillResultUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: SkillResultUpdateManyWithWhereWithoutAssessmentInput | SkillResultUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
  }

  export type SkillAssessmentCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SkillAssessmentCreateWithoutQuestionsInput, SkillAssessmentUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutQuestionsInput
    connect?: SkillAssessmentWhereUniqueInput
  }

  export type SkillAssessmentUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SkillAssessmentCreateWithoutQuestionsInput, SkillAssessmentUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutQuestionsInput
    upsert?: SkillAssessmentUpsertWithoutQuestionsInput
    connect?: SkillAssessmentWhereUniqueInput
    update?: XOR<XOR<SkillAssessmentUpdateToOneWithWhereWithoutQuestionsInput, SkillAssessmentUpdateWithoutQuestionsInput>, SkillAssessmentUncheckedUpdateWithoutQuestionsInput>
  }

  export type UserCreateNestedOneWithoutSkillResultsInput = {
    create?: XOR<UserCreateWithoutSkillResultsInput, UserUncheckedCreateWithoutSkillResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillResultsInput
    connect?: UserWhereUniqueInput
  }

  export type SkillAssessmentCreateNestedOneWithoutResultsInput = {
    create?: XOR<SkillAssessmentCreateWithoutResultsInput, SkillAssessmentUncheckedCreateWithoutResultsInput>
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutResultsInput
    connect?: SkillAssessmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSkillResultsNestedInput = {
    create?: XOR<UserCreateWithoutSkillResultsInput, UserUncheckedCreateWithoutSkillResultsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillResultsInput
    upsert?: UserUpsertWithoutSkillResultsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSkillResultsInput, UserUpdateWithoutSkillResultsInput>, UserUncheckedUpdateWithoutSkillResultsInput>
  }

  export type SkillAssessmentUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<SkillAssessmentCreateWithoutResultsInput, SkillAssessmentUncheckedCreateWithoutResultsInput>
    connectOrCreate?: SkillAssessmentCreateOrConnectWithoutResultsInput
    upsert?: SkillAssessmentUpsertWithoutResultsInput
    connect?: SkillAssessmentWhereUniqueInput
    update?: XOR<XOR<SkillAssessmentUpdateToOneWithWhereWithoutResultsInput, SkillAssessmentUpdateWithoutResultsInput>, SkillAssessmentUncheckedUpdateWithoutResultsInput>
  }

  export type UserCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    upsert?: UserUpsertWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserBadgesInput, UserUpdateWithoutUserBadgesInput>, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserCreateNestedOneWithoutGeneratedCvsInput = {
    create?: XOR<UserCreateWithoutGeneratedCvsInput, UserUncheckedCreateWithoutGeneratedCvsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGeneratedCvsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGeneratedCvsNestedInput = {
    create?: XOR<UserCreateWithoutGeneratedCvsInput, UserUncheckedCreateWithoutGeneratedCvsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGeneratedCvsInput
    upsert?: UserUpsertWithoutGeneratedCvsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGeneratedCvsInput, UserUpdateWithoutGeneratedCvsInput>, UserUncheckedUpdateWithoutGeneratedCvsInput>
  }

  export type SubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type SubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput> | PaymentCreateWithoutSubscriptionInput[] | PaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionInput | PaymentCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PaymentCreateManySubscriptionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput> | PaymentCreateWithoutSubscriptionInput[] | PaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionInput | PaymentCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PaymentCreateManySubscriptionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    upsert?: SubscriptionPlanUpsertWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
    update?: XOR<XOR<SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput, SubscriptionPlanUpdateWithoutSubscriptionsInput>, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type PaymentUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput> | PaymentCreateWithoutSubscriptionInput[] | PaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionInput | PaymentCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutSubscriptionInput | PaymentUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PaymentCreateManySubscriptionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutSubscriptionInput | PaymentUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutSubscriptionInput | PaymentUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput> | PaymentCreateWithoutSubscriptionInput[] | PaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionInput | PaymentCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutSubscriptionInput | PaymentUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PaymentCreateManySubscriptionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutSubscriptionInput | PaymentUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutSubscriptionInput | PaymentUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SubscriptionCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<SubscriptionCreateWithoutPaymentsInput, SubscriptionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPaymentsInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type SubscriptionUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPaymentsInput, SubscriptionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPaymentsInput
    upsert?: SubscriptionUpsertWithoutPaymentsInput
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutPaymentsInput, SubscriptionUpdateWithoutPaymentsInput>, SubscriptionUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserCreateNestedOneWithoutEmploymentsInput = {
    create?: XOR<UserCreateWithoutEmploymentsInput, UserUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmploymentsInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutEmploymentsInput = {
    create?: XOR<CompanyCreateWithoutEmploymentsInput, CompanyUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmploymentsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyReviewCreateNestedManyWithoutEmploymentInput = {
    create?: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput> | CompanyReviewCreateWithoutEmploymentInput[] | CompanyReviewUncheckedCreateWithoutEmploymentInput[]
    connectOrCreate?: CompanyReviewCreateOrConnectWithoutEmploymentInput | CompanyReviewCreateOrConnectWithoutEmploymentInput[]
    createMany?: CompanyReviewCreateManyEmploymentInputEnvelope
    connect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
  }

  export type CompanyReviewUncheckedCreateNestedManyWithoutEmploymentInput = {
    create?: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput> | CompanyReviewCreateWithoutEmploymentInput[] | CompanyReviewUncheckedCreateWithoutEmploymentInput[]
    connectOrCreate?: CompanyReviewCreateOrConnectWithoutEmploymentInput | CompanyReviewCreateOrConnectWithoutEmploymentInput[]
    createMany?: CompanyReviewCreateManyEmploymentInputEnvelope
    connect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEmploymentsNestedInput = {
    create?: XOR<UserCreateWithoutEmploymentsInput, UserUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmploymentsInput
    upsert?: UserUpsertWithoutEmploymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmploymentsInput, UserUpdateWithoutEmploymentsInput>, UserUncheckedUpdateWithoutEmploymentsInput>
  }

  export type CompanyUpdateOneWithoutEmploymentsNestedInput = {
    create?: XOR<CompanyCreateWithoutEmploymentsInput, CompanyUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmploymentsInput
    upsert?: CompanyUpsertWithoutEmploymentsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmploymentsInput, CompanyUpdateWithoutEmploymentsInput>, CompanyUncheckedUpdateWithoutEmploymentsInput>
  }

  export type CompanyReviewUpdateManyWithoutEmploymentNestedInput = {
    create?: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput> | CompanyReviewCreateWithoutEmploymentInput[] | CompanyReviewUncheckedCreateWithoutEmploymentInput[]
    connectOrCreate?: CompanyReviewCreateOrConnectWithoutEmploymentInput | CompanyReviewCreateOrConnectWithoutEmploymentInput[]
    upsert?: CompanyReviewUpsertWithWhereUniqueWithoutEmploymentInput | CompanyReviewUpsertWithWhereUniqueWithoutEmploymentInput[]
    createMany?: CompanyReviewCreateManyEmploymentInputEnvelope
    set?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    disconnect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    delete?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    connect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    update?: CompanyReviewUpdateWithWhereUniqueWithoutEmploymentInput | CompanyReviewUpdateWithWhereUniqueWithoutEmploymentInput[]
    updateMany?: CompanyReviewUpdateManyWithWhereWithoutEmploymentInput | CompanyReviewUpdateManyWithWhereWithoutEmploymentInput[]
    deleteMany?: CompanyReviewScalarWhereInput | CompanyReviewScalarWhereInput[]
  }

  export type CompanyReviewUncheckedUpdateManyWithoutEmploymentNestedInput = {
    create?: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput> | CompanyReviewCreateWithoutEmploymentInput[] | CompanyReviewUncheckedCreateWithoutEmploymentInput[]
    connectOrCreate?: CompanyReviewCreateOrConnectWithoutEmploymentInput | CompanyReviewCreateOrConnectWithoutEmploymentInput[]
    upsert?: CompanyReviewUpsertWithWhereUniqueWithoutEmploymentInput | CompanyReviewUpsertWithWhereUniqueWithoutEmploymentInput[]
    createMany?: CompanyReviewCreateManyEmploymentInputEnvelope
    set?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    disconnect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    delete?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    connect?: CompanyReviewWhereUniqueInput | CompanyReviewWhereUniqueInput[]
    update?: CompanyReviewUpdateWithWhereUniqueWithoutEmploymentInput | CompanyReviewUpdateWithWhereUniqueWithoutEmploymentInput[]
    updateMany?: CompanyReviewUpdateManyWithWhereWithoutEmploymentInput | CompanyReviewUpdateManyWithWhereWithoutEmploymentInput[]
    deleteMany?: CompanyReviewScalarWhereInput | CompanyReviewScalarWhereInput[]
  }

  export type EmploymentCreateNestedOneWithoutReviewsInput = {
    create?: XOR<EmploymentCreateWithoutReviewsInput, EmploymentUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: EmploymentCreateOrConnectWithoutReviewsInput
    connect?: EmploymentWhereUniqueInput
  }

  export type EmploymentUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<EmploymentCreateWithoutReviewsInput, EmploymentUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: EmploymentCreateOrConnectWithoutReviewsInput
    upsert?: EmploymentUpsertWithoutReviewsInput
    connect?: EmploymentWhereUniqueInput
    update?: XOR<XOR<EmploymentUpdateToOneWithWhereWithoutReviewsInput, EmploymentUpdateWithoutReviewsInput>, EmploymentUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutJobSharesInput = {
    create?: XOR<UserCreateWithoutJobSharesInput, UserUncheckedCreateWithoutJobSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobSharesInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutSharesInput = {
    create?: XOR<JobCreateWithoutSharesInput, JobUncheckedCreateWithoutSharesInput>
    connectOrCreate?: JobCreateOrConnectWithoutSharesInput
    connect?: JobWhereUniqueInput
  }

  export type EnumSharePlatformFieldUpdateOperationsInput = {
    set?: $Enums.SharePlatform
  }

  export type UserUpdateOneRequiredWithoutJobSharesNestedInput = {
    create?: XOR<UserCreateWithoutJobSharesInput, UserUncheckedCreateWithoutJobSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobSharesInput
    upsert?: UserUpsertWithoutJobSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobSharesInput, UserUpdateWithoutJobSharesInput>, UserUncheckedUpdateWithoutJobSharesInput>
  }

  export type JobUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<JobCreateWithoutSharesInput, JobUncheckedCreateWithoutSharesInput>
    connectOrCreate?: JobCreateOrConnectWithoutSharesInput
    upsert?: JobUpsertWithoutSharesInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutSharesInput, JobUpdateWithoutSharesInput>, JobUncheckedUpdateWithoutSharesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProviderType[] | ListEnumProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedEnumInterviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusFilter<$PrismaModel> | $Enums.InterviewStatus
  }

  export type NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InterviewStatus | EnumInterviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InterviewStatus[] | ListEnumInterviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInterviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.InterviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInterviewStatusFilter<$PrismaModel>
    _max?: NestedEnumInterviewStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumSharePlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.SharePlatform | EnumSharePlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSharePlatformFilter<$PrismaModel> | $Enums.SharePlatform
  }

  export type NestedEnumSharePlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SharePlatform | EnumSharePlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SharePlatform[] | ListEnumSharePlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSharePlatformWithAggregatesFilter<$PrismaModel> | $Enums.SharePlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSharePlatformFilter<$PrismaModel>
    _max?: NestedEnumSharePlatformFilter<$PrismaModel>
  }

  export type UserProviderCreateWithoutUserInput = {
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserProviderUncheckedCreateWithoutUserInput = {
    id?: number
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
  }

  export type UserProviderCreateOrConnectWithoutUserInput = {
    where: UserProviderWhereUniqueInput
    create: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput>
  }

  export type UserProviderCreateManyUserInputEnvelope = {
    data: UserProviderCreateManyUserInput | UserProviderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutAdminInput = {
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobCreateNestedManyWithoutCompanyInput
    employments?: EmploymentCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAdminInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
  }

  export type EmploymentCreateWithoutUserInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    company?: CompanyCreateNestedOneWithoutEmploymentsInput
    reviews?: CompanyReviewCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentUncheckedCreateWithoutUserInput = {
    id?: number
    companyId?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    reviews?: CompanyReviewUncheckedCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentCreateOrConnectWithoutUserInput = {
    where: EmploymentWhereUniqueInput
    create: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput>
  }

  export type EmploymentCreateManyUserInputEnvelope = {
    data: EmploymentCreateManyUserInput | EmploymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutUserInput = {
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutUserInput = {
    id?: number
    jobId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationCreateManyUserInputEnvelope = {
    data: ApplicationCreateManyUserInput | ApplicationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PreselectionResultCreateWithoutUserInput = {
    score: number
    createdAt?: Date | string
    test: PreselectionTestCreateNestedOneWithoutResultsInput
    answers?: ApplicantAnswerCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultUncheckedCreateWithoutUserInput = {
    id?: number
    testId: number
    score: number
    createdAt?: Date | string
    answers?: ApplicantAnswerUncheckedCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultCreateOrConnectWithoutUserInput = {
    where: PreselectionResultWhereUniqueInput
    create: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput>
  }

  export type PreselectionResultCreateManyUserInputEnvelope = {
    data: PreselectionResultCreateManyUserInput | PreselectionResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SkillResultCreateWithoutUserInput = {
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
    assessment: SkillAssessmentCreateNestedOneWithoutResultsInput
  }

  export type SkillResultUncheckedCreateWithoutUserInput = {
    id?: number
    assessmentId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillResultCreateOrConnectWithoutUserInput = {
    where: SkillResultWhereUniqueInput
    create: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput>
  }

  export type SkillResultCreateManyUserInputEnvelope = {
    data: SkillResultCreateManyUserInput | SkillResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SkillAssessmentCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    createdAt?: Date | string
    questions?: SkillQuestionCreateNestedManyWithoutAssessmentInput
    results?: SkillResultCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    createdAt?: Date | string
    questions?: SkillQuestionUncheckedCreateNestedManyWithoutAssessmentInput
    results?: SkillResultUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentCreateOrConnectWithoutCreatorInput = {
    where: SkillAssessmentWhereUniqueInput
    create: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput>
  }

  export type SkillAssessmentCreateManyCreatorInputEnvelope = {
    data: SkillAssessmentCreateManyCreatorInput | SkillAssessmentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeCreateWithoutUserInput = {
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    id?: number
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GeneratedCVCreateWithoutUserInput = {
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type GeneratedCVUncheckedCreateWithoutUserInput = {
    id?: number
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type GeneratedCVCreateOrConnectWithoutUserInput = {
    where: GeneratedCVWhereUniqueInput
    create: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput>
  }

  export type GeneratedCVCreateManyUserInputEnvelope = {
    data: GeneratedCVCreateManyUserInput | GeneratedCVCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    payments?: PaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: number
    subscriptionPlanId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionCreateManyUserInputEnvelope = {
    data: SubscriptionCreateManyUserInput | SubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SavedJobCreateWithoutUserInput = {
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutSavedByInput
  }

  export type SavedJobUncheckedCreateWithoutUserInput = {
    id?: number
    jobId: number
    createdAt?: Date | string
  }

  export type SavedJobCreateOrConnectWithoutUserInput = {
    where: SavedJobWhereUniqueInput
    create: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput>
  }

  export type SavedJobCreateManyUserInputEnvelope = {
    data: SavedJobCreateManyUserInput | SavedJobCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JobShareCreateWithoutUserInput = {
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutSharesInput
  }

  export type JobShareUncheckedCreateWithoutUserInput = {
    id?: number
    jobId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type JobShareCreateOrConnectWithoutUserInput = {
    where: JobShareWhereUniqueInput
    create: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput>
  }

  export type JobShareCreateManyUserInputEnvelope = {
    data: JobShareCreateManyUserInput | JobShareCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProviderUpsertWithWhereUniqueWithoutUserInput = {
    where: UserProviderWhereUniqueInput
    update: XOR<UserProviderUpdateWithoutUserInput, UserProviderUncheckedUpdateWithoutUserInput>
    create: XOR<UserProviderCreateWithoutUserInput, UserProviderUncheckedCreateWithoutUserInput>
  }

  export type UserProviderUpdateWithWhereUniqueWithoutUserInput = {
    where: UserProviderWhereUniqueInput
    data: XOR<UserProviderUpdateWithoutUserInput, UserProviderUncheckedUpdateWithoutUserInput>
  }

  export type UserProviderUpdateManyWithWhereWithoutUserInput = {
    where: UserProviderScalarWhereInput
    data: XOR<UserProviderUpdateManyMutationInput, UserProviderUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProviderScalarWhereInput = {
    AND?: UserProviderScalarWhereInput | UserProviderScalarWhereInput[]
    OR?: UserProviderScalarWhereInput[]
    NOT?: UserProviderScalarWhereInput | UserProviderScalarWhereInput[]
    id?: IntFilter<"UserProvider"> | number
    userId?: IntFilter<"UserProvider"> | number
    provider?: EnumProviderTypeFilter<"UserProvider"> | $Enums.ProviderType
    providerId?: StringFilter<"UserProvider"> | string
    accessToken?: StringNullableFilter<"UserProvider"> | string | null
    refreshToken?: StringNullableFilter<"UserProvider"> | string | null
    createdAt?: DateTimeFilter<"UserProvider"> | Date | string
  }

  export type CompanyUpsertWithoutAdminInput = {
    update: XOR<CompanyUpdateWithoutAdminInput, CompanyUncheckedUpdateWithoutAdminInput>
    create: XOR<CompanyCreateWithoutAdminInput, CompanyUncheckedCreateWithoutAdminInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAdminInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAdminInput, CompanyUncheckedUpdateWithoutAdminInput>
  }

  export type CompanyUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    employments?: EmploymentUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EmploymentUpsertWithWhereUniqueWithoutUserInput = {
    where: EmploymentWhereUniqueInput
    update: XOR<EmploymentUpdateWithoutUserInput, EmploymentUncheckedUpdateWithoutUserInput>
    create: XOR<EmploymentCreateWithoutUserInput, EmploymentUncheckedCreateWithoutUserInput>
  }

  export type EmploymentUpdateWithWhereUniqueWithoutUserInput = {
    where: EmploymentWhereUniqueInput
    data: XOR<EmploymentUpdateWithoutUserInput, EmploymentUncheckedUpdateWithoutUserInput>
  }

  export type EmploymentUpdateManyWithWhereWithoutUserInput = {
    where: EmploymentScalarWhereInput
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyWithoutUserInput>
  }

  export type EmploymentScalarWhereInput = {
    AND?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
    OR?: EmploymentScalarWhereInput[]
    NOT?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
    id?: IntFilter<"Employment"> | number
    userId?: IntFilter<"Employment"> | number
    companyId?: IntNullableFilter<"Employment"> | number | null
    startDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Employment"> | Date | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutUserInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutUserInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: IntFilter<"Application"> | number
    userId?: IntFilter<"Application"> | number
    jobId?: IntFilter<"Application"> | number
    cvFile?: StringFilter<"Application"> | string
    expectedSalary?: IntNullableFilter<"Application"> | number | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    reviewNote?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
  }

  export type PreselectionResultUpsertWithWhereUniqueWithoutUserInput = {
    where: PreselectionResultWhereUniqueInput
    update: XOR<PreselectionResultUpdateWithoutUserInput, PreselectionResultUncheckedUpdateWithoutUserInput>
    create: XOR<PreselectionResultCreateWithoutUserInput, PreselectionResultUncheckedCreateWithoutUserInput>
  }

  export type PreselectionResultUpdateWithWhereUniqueWithoutUserInput = {
    where: PreselectionResultWhereUniqueInput
    data: XOR<PreselectionResultUpdateWithoutUserInput, PreselectionResultUncheckedUpdateWithoutUserInput>
  }

  export type PreselectionResultUpdateManyWithWhereWithoutUserInput = {
    where: PreselectionResultScalarWhereInput
    data: XOR<PreselectionResultUpdateManyMutationInput, PreselectionResultUncheckedUpdateManyWithoutUserInput>
  }

  export type PreselectionResultScalarWhereInput = {
    AND?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
    OR?: PreselectionResultScalarWhereInput[]
    NOT?: PreselectionResultScalarWhereInput | PreselectionResultScalarWhereInput[]
    id?: IntFilter<"PreselectionResult"> | number
    userId?: IntFilter<"PreselectionResult"> | number
    testId?: IntFilter<"PreselectionResult"> | number
    score?: IntFilter<"PreselectionResult"> | number
    createdAt?: DateTimeFilter<"PreselectionResult"> | Date | string
  }

  export type SkillResultUpsertWithWhereUniqueWithoutUserInput = {
    where: SkillResultWhereUniqueInput
    update: XOR<SkillResultUpdateWithoutUserInput, SkillResultUncheckedUpdateWithoutUserInput>
    create: XOR<SkillResultCreateWithoutUserInput, SkillResultUncheckedCreateWithoutUserInput>
  }

  export type SkillResultUpdateWithWhereUniqueWithoutUserInput = {
    where: SkillResultWhereUniqueInput
    data: XOR<SkillResultUpdateWithoutUserInput, SkillResultUncheckedUpdateWithoutUserInput>
  }

  export type SkillResultUpdateManyWithWhereWithoutUserInput = {
    where: SkillResultScalarWhereInput
    data: XOR<SkillResultUpdateManyMutationInput, SkillResultUncheckedUpdateManyWithoutUserInput>
  }

  export type SkillResultScalarWhereInput = {
    AND?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
    OR?: SkillResultScalarWhereInput[]
    NOT?: SkillResultScalarWhereInput | SkillResultScalarWhereInput[]
    id?: IntFilter<"SkillResult"> | number
    userId?: IntFilter<"SkillResult"> | number
    assessmentId?: IntFilter<"SkillResult"> | number
    score?: IntFilter<"SkillResult"> | number
    isPassed?: BoolFilter<"SkillResult"> | boolean
    certificateUrl?: StringNullableFilter<"SkillResult"> | string | null
    certificateCode?: StringNullableFilter<"SkillResult"> | string | null
    startedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    finishedAt?: DateTimeNullableFilter<"SkillResult"> | Date | string | null
    createdAt?: DateTimeFilter<"SkillResult"> | Date | string
  }

  export type SkillAssessmentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: SkillAssessmentWhereUniqueInput
    update: XOR<SkillAssessmentUpdateWithoutCreatorInput, SkillAssessmentUncheckedUpdateWithoutCreatorInput>
    create: XOR<SkillAssessmentCreateWithoutCreatorInput, SkillAssessmentUncheckedCreateWithoutCreatorInput>
  }

  export type SkillAssessmentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: SkillAssessmentWhereUniqueInput
    data: XOR<SkillAssessmentUpdateWithoutCreatorInput, SkillAssessmentUncheckedUpdateWithoutCreatorInput>
  }

  export type SkillAssessmentUpdateManyWithWhereWithoutCreatorInput = {
    where: SkillAssessmentScalarWhereInput
    data: XOR<SkillAssessmentUpdateManyMutationInput, SkillAssessmentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type SkillAssessmentScalarWhereInput = {
    AND?: SkillAssessmentScalarWhereInput | SkillAssessmentScalarWhereInput[]
    OR?: SkillAssessmentScalarWhereInput[]
    NOT?: SkillAssessmentScalarWhereInput | SkillAssessmentScalarWhereInput[]
    id?: IntFilter<"SkillAssessment"> | number
    title?: StringFilter<"SkillAssessment"> | string
    description?: StringNullableFilter<"SkillAssessment"> | string | null
    createdBy?: IntFilter<"SkillAssessment"> | number
    createdAt?: DateTimeFilter<"SkillAssessment"> | Date | string
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    id?: IntFilter<"UserBadge"> | number
    userId?: IntFilter<"UserBadge"> | number
    badgeName?: StringFilter<"UserBadge"> | string
    badgeIcon?: StringNullableFilter<"UserBadge"> | string | null
    awardedAt?: DateTimeFilter<"UserBadge"> | Date | string
  }

  export type GeneratedCVUpsertWithWhereUniqueWithoutUserInput = {
    where: GeneratedCVWhereUniqueInput
    update: XOR<GeneratedCVUpdateWithoutUserInput, GeneratedCVUncheckedUpdateWithoutUserInput>
    create: XOR<GeneratedCVCreateWithoutUserInput, GeneratedCVUncheckedCreateWithoutUserInput>
  }

  export type GeneratedCVUpdateWithWhereUniqueWithoutUserInput = {
    where: GeneratedCVWhereUniqueInput
    data: XOR<GeneratedCVUpdateWithoutUserInput, GeneratedCVUncheckedUpdateWithoutUserInput>
  }

  export type GeneratedCVUpdateManyWithWhereWithoutUserInput = {
    where: GeneratedCVScalarWhereInput
    data: XOR<GeneratedCVUpdateManyMutationInput, GeneratedCVUncheckedUpdateManyWithoutUserInput>
  }

  export type GeneratedCVScalarWhereInput = {
    AND?: GeneratedCVScalarWhereInput | GeneratedCVScalarWhereInput[]
    OR?: GeneratedCVScalarWhereInput[]
    NOT?: GeneratedCVScalarWhereInput | GeneratedCVScalarWhereInput[]
    id?: IntFilter<"GeneratedCV"> | number
    userId?: IntFilter<"GeneratedCV"> | number
    fileUrl?: StringFilter<"GeneratedCV"> | string
    templateUsed?: StringFilter<"GeneratedCV"> | string
    additionalInfo?: JsonNullableFilter<"GeneratedCV">
    createdAt?: DateTimeFilter<"GeneratedCV"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: IntFilter<"Subscription"> | number
    userId?: IntFilter<"Subscription"> | number
    subscriptionPlanId?: IntFilter<"Subscription"> | number
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    isActive?: BoolFilter<"Subscription"> | boolean
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type SavedJobUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedJobWhereUniqueInput
    update: XOR<SavedJobUpdateWithoutUserInput, SavedJobUncheckedUpdateWithoutUserInput>
    create: XOR<SavedJobCreateWithoutUserInput, SavedJobUncheckedCreateWithoutUserInput>
  }

  export type SavedJobUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedJobWhereUniqueInput
    data: XOR<SavedJobUpdateWithoutUserInput, SavedJobUncheckedUpdateWithoutUserInput>
  }

  export type SavedJobUpdateManyWithWhereWithoutUserInput = {
    where: SavedJobScalarWhereInput
    data: XOR<SavedJobUpdateManyMutationInput, SavedJobUncheckedUpdateManyWithoutUserInput>
  }

  export type SavedJobScalarWhereInput = {
    AND?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
    OR?: SavedJobScalarWhereInput[]
    NOT?: SavedJobScalarWhereInput | SavedJobScalarWhereInput[]
    id?: IntFilter<"SavedJob"> | number
    userId?: IntFilter<"SavedJob"> | number
    jobId?: IntFilter<"SavedJob"> | number
    createdAt?: DateTimeFilter<"SavedJob"> | Date | string
  }

  export type JobShareUpsertWithWhereUniqueWithoutUserInput = {
    where: JobShareWhereUniqueInput
    update: XOR<JobShareUpdateWithoutUserInput, JobShareUncheckedUpdateWithoutUserInput>
    create: XOR<JobShareCreateWithoutUserInput, JobShareUncheckedCreateWithoutUserInput>
  }

  export type JobShareUpdateWithWhereUniqueWithoutUserInput = {
    where: JobShareWhereUniqueInput
    data: XOR<JobShareUpdateWithoutUserInput, JobShareUncheckedUpdateWithoutUserInput>
  }

  export type JobShareUpdateManyWithWhereWithoutUserInput = {
    where: JobShareScalarWhereInput
    data: XOR<JobShareUpdateManyMutationInput, JobShareUncheckedUpdateManyWithoutUserInput>
  }

  export type JobShareScalarWhereInput = {
    AND?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
    OR?: JobShareScalarWhereInput[]
    NOT?: JobShareScalarWhereInput | JobShareScalarWhereInput[]
    id?: IntFilter<"JobShare"> | number
    userId?: IntFilter<"JobShare"> | number
    jobId?: IntFilter<"JobShare"> | number
    platform?: EnumSharePlatformFilter<"JobShare"> | $Enums.SharePlatform
    sharedUrl?: StringNullableFilter<"JobShare"> | string | null
    customMessage?: StringNullableFilter<"JobShare"> | string | null
    createdAt?: DateTimeFilter<"JobShare"> | Date | string
  }

  export type UserCreateWithoutProvidersInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProvidersInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProvidersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProvidersInput, UserUncheckedCreateWithoutProvidersInput>
  }

  export type UserUpsertWithoutProvidersInput = {
    update: XOR<UserUpdateWithoutProvidersInput, UserUncheckedUpdateWithoutProvidersInput>
    create: XOR<UserCreateWithoutProvidersInput, UserUncheckedCreateWithoutProvidersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProvidersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProvidersInput, UserUncheckedUpdateWithoutProvidersInput>
  }

  export type UserUpdateWithoutProvidersInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProvidersInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAdminOfInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminOfInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminOfInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminOfInput, UserUncheckedCreateWithoutAdminOfInput>
  }

  export type JobCreateWithoutCompanyInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestCreateNestedManyWithoutJobInput
    savedBy?: SavedJobCreateNestedManyWithoutJobInput
    shares?: JobShareCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCompanyInput = {
    id?: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestUncheckedCreateNestedManyWithoutJobInput
    savedBy?: SavedJobUncheckedCreateNestedManyWithoutJobInput
    shares?: JobShareUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCompanyInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobCreateManyCompanyInputEnvelope = {
    data: JobCreateManyCompanyInput | JobCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type EmploymentCreateWithoutCompanyInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmploymentsInput
    reviews?: CompanyReviewCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentUncheckedCreateWithoutCompanyInput = {
    id?: number
    userId: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    reviews?: CompanyReviewUncheckedCreateNestedManyWithoutEmploymentInput
  }

  export type EmploymentCreateOrConnectWithoutCompanyInput = {
    where: EmploymentWhereUniqueInput
    create: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput>
  }

  export type EmploymentCreateManyCompanyInputEnvelope = {
    data: EmploymentCreateManyCompanyInput | EmploymentCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAdminOfInput = {
    update: XOR<UserUpdateWithoutAdminOfInput, UserUncheckedUpdateWithoutAdminOfInput>
    create: XOR<UserCreateWithoutAdminOfInput, UserUncheckedCreateWithoutAdminOfInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminOfInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminOfInput, UserUncheckedUpdateWithoutAdminOfInput>
  }

  export type UserUpdateWithoutAdminOfInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
  }

  export type JobUpdateManyWithWhereWithoutCompanyInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: IntFilter<"Job"> | number
    companyId?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    category?: StringFilter<"Job"> | string
    city?: StringFilter<"Job"> | string
    salaryMin?: IntNullableFilter<"Job"> | number | null
    salaryMax?: IntNullableFilter<"Job"> | number | null
    tags?: StringNullableListFilter<"Job">
    banner?: StringNullableFilter<"Job"> | string | null
    deadline?: DateTimeNullableFilter<"Job"> | Date | string | null
    isPublished?: BoolFilter<"Job"> | boolean
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type EmploymentUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmploymentWhereUniqueInput
    update: XOR<EmploymentUpdateWithoutCompanyInput, EmploymentUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmploymentCreateWithoutCompanyInput, EmploymentUncheckedCreateWithoutCompanyInput>
  }

  export type EmploymentUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmploymentWhereUniqueInput
    data: XOR<EmploymentUpdateWithoutCompanyInput, EmploymentUncheckedUpdateWithoutCompanyInput>
  }

  export type EmploymentUpdateManyWithWhereWithoutCompanyInput = {
    where: EmploymentScalarWhereInput
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyCreateWithoutJobsInput = {
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: UserCreateNestedOneWithoutAdminOfInput
    employments?: EmploymentCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId?: number | null
    employments?: EmploymentUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
  }

  export type ApplicationCreateWithoutJobInput = {
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicationsInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutJobInput = {
    id?: number
    userId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationCreateManyJobInputEnvelope = {
    data: ApplicationCreateManyJobInput | ApplicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type PreselectionTestCreateWithoutJobInput = {
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    questions?: PreselectionQuestionCreateNestedManyWithoutTestInput
    results?: PreselectionResultCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestUncheckedCreateWithoutJobInput = {
    id?: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    questions?: PreselectionQuestionUncheckedCreateNestedManyWithoutTestInput
    results?: PreselectionResultUncheckedCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestCreateOrConnectWithoutJobInput = {
    where: PreselectionTestWhereUniqueInput
    create: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput>
  }

  export type PreselectionTestCreateManyJobInputEnvelope = {
    data: PreselectionTestCreateManyJobInput | PreselectionTestCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type SavedJobCreateWithoutJobInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSavedJobsInput
  }

  export type SavedJobUncheckedCreateWithoutJobInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type SavedJobCreateOrConnectWithoutJobInput = {
    where: SavedJobWhereUniqueInput
    create: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput>
  }

  export type SavedJobCreateManyJobInputEnvelope = {
    data: SavedJobCreateManyJobInput | SavedJobCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobShareCreateWithoutJobInput = {
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutJobSharesInput
  }

  export type JobShareUncheckedCreateWithoutJobInput = {
    id?: number
    userId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type JobShareCreateOrConnectWithoutJobInput = {
    where: JobShareWhereUniqueInput
    create: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput>
  }

  export type JobShareCreateManyJobInputEnvelope = {
    data: JobShareCreateManyJobInput | JobShareCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutJobsInput = {
    update: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type CompanyUpdateWithoutJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneWithoutAdminOfNestedInput
    employments?: EmploymentUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    employments?: EmploymentUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobInput>
  }

  export type PreselectionTestUpsertWithWhereUniqueWithoutJobInput = {
    where: PreselectionTestWhereUniqueInput
    update: XOR<PreselectionTestUpdateWithoutJobInput, PreselectionTestUncheckedUpdateWithoutJobInput>
    create: XOR<PreselectionTestCreateWithoutJobInput, PreselectionTestUncheckedCreateWithoutJobInput>
  }

  export type PreselectionTestUpdateWithWhereUniqueWithoutJobInput = {
    where: PreselectionTestWhereUniqueInput
    data: XOR<PreselectionTestUpdateWithoutJobInput, PreselectionTestUncheckedUpdateWithoutJobInput>
  }

  export type PreselectionTestUpdateManyWithWhereWithoutJobInput = {
    where: PreselectionTestScalarWhereInput
    data: XOR<PreselectionTestUpdateManyMutationInput, PreselectionTestUncheckedUpdateManyWithoutJobInput>
  }

  export type PreselectionTestScalarWhereInput = {
    AND?: PreselectionTestScalarWhereInput | PreselectionTestScalarWhereInput[]
    OR?: PreselectionTestScalarWhereInput[]
    NOT?: PreselectionTestScalarWhereInput | PreselectionTestScalarWhereInput[]
    id?: IntFilter<"PreselectionTest"> | number
    jobId?: IntFilter<"PreselectionTest"> | number
    isActive?: BoolFilter<"PreselectionTest"> | boolean
    passingScore?: IntNullableFilter<"PreselectionTest"> | number | null
    createdAt?: DateTimeFilter<"PreselectionTest"> | Date | string
  }

  export type SavedJobUpsertWithWhereUniqueWithoutJobInput = {
    where: SavedJobWhereUniqueInput
    update: XOR<SavedJobUpdateWithoutJobInput, SavedJobUncheckedUpdateWithoutJobInput>
    create: XOR<SavedJobCreateWithoutJobInput, SavedJobUncheckedCreateWithoutJobInput>
  }

  export type SavedJobUpdateWithWhereUniqueWithoutJobInput = {
    where: SavedJobWhereUniqueInput
    data: XOR<SavedJobUpdateWithoutJobInput, SavedJobUncheckedUpdateWithoutJobInput>
  }

  export type SavedJobUpdateManyWithWhereWithoutJobInput = {
    where: SavedJobScalarWhereInput
    data: XOR<SavedJobUpdateManyMutationInput, SavedJobUncheckedUpdateManyWithoutJobInput>
  }

  export type JobShareUpsertWithWhereUniqueWithoutJobInput = {
    where: JobShareWhereUniqueInput
    update: XOR<JobShareUpdateWithoutJobInput, JobShareUncheckedUpdateWithoutJobInput>
    create: XOR<JobShareCreateWithoutJobInput, JobShareUncheckedCreateWithoutJobInput>
  }

  export type JobShareUpdateWithWhereUniqueWithoutJobInput = {
    where: JobShareWhereUniqueInput
    data: XOR<JobShareUpdateWithoutJobInput, JobShareUncheckedUpdateWithoutJobInput>
  }

  export type JobShareUpdateManyWithWhereWithoutJobInput = {
    where: JobShareScalarWhereInput
    data: XOR<JobShareUpdateManyMutationInput, JobShareUncheckedUpdateManyWithoutJobInput>
  }

  export type UserCreateWithoutApplicationsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicationsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApplicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
  }

  export type JobCreateWithoutApplicationsInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    preselectionTests?: PreselectionTestCreateNestedManyWithoutJobInput
    savedBy?: SavedJobCreateNestedManyWithoutJobInput
    shares?: JobShareCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationsInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preselectionTests?: PreselectionTestUncheckedCreateNestedManyWithoutJobInput
    savedBy?: SavedJobUncheckedCreateNestedManyWithoutJobInput
    shares?: JobShareUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
  }

  export type InterviewCreateWithoutApplicationInput = {
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
  }

  export type InterviewUncheckedCreateWithoutApplicationInput = {
    id?: number
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
  }

  export type InterviewCreateOrConnectWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewCreateManyApplicationInputEnvelope = {
    data: InterviewCreateManyApplicationInput | InterviewCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutApplicationsInput = {
    update: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateWithoutApplicationsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithoutApplicationsInput = {
    update: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateWithoutApplicationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    preselectionTests?: PreselectionTestUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUpdateManyWithoutJobNestedInput
    shares?: JobShareUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preselectionTests?: PreselectionTestUncheckedUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUncheckedUpdateManyWithoutJobNestedInput
    shares?: JobShareUncheckedUpdateManyWithoutJobNestedInput
  }

  export type InterviewUpsertWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
  }

  export type InterviewUpdateManyWithWhereWithoutApplicationInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutApplicationInput>
  }

  export type InterviewScalarWhereInput = {
    AND?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    OR?: InterviewScalarWhereInput[]
    NOT?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    id?: IntFilter<"Interview"> | number
    applicationId?: IntFilter<"Interview"> | number
    scheduleDate?: DateTimeFilter<"Interview"> | Date | string
    locationOrLink?: StringNullableFilter<"Interview"> | string | null
    notes?: StringNullableFilter<"Interview"> | string | null
    status?: EnumInterviewStatusFilter<"Interview"> | $Enums.InterviewStatus
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    reminderSentAt?: DateTimeNullableFilter<"Interview"> | Date | string | null
  }

  export type UserCreateWithoutSavedJobsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedJobsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedJobsInput, UserUncheckedCreateWithoutSavedJobsInput>
  }

  export type JobCreateWithoutSavedByInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestCreateNestedManyWithoutJobInput
    shares?: JobShareCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutSavedByInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestUncheckedCreateNestedManyWithoutJobInput
    shares?: JobShareUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutSavedByInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutSavedByInput, JobUncheckedCreateWithoutSavedByInput>
  }

  export type UserUpsertWithoutSavedJobsInput = {
    update: XOR<UserUpdateWithoutSavedJobsInput, UserUncheckedUpdateWithoutSavedJobsInput>
    create: XOR<UserCreateWithoutSavedJobsInput, UserUncheckedCreateWithoutSavedJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSavedJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSavedJobsInput, UserUncheckedUpdateWithoutSavedJobsInput>
  }

  export type UserUpdateWithoutSavedJobsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithoutSavedByInput = {
    update: XOR<JobUpdateWithoutSavedByInput, JobUncheckedUpdateWithoutSavedByInput>
    create: XOR<JobCreateWithoutSavedByInput, JobUncheckedCreateWithoutSavedByInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutSavedByInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutSavedByInput, JobUncheckedUpdateWithoutSavedByInput>
  }

  export type JobUpdateWithoutSavedByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUpdateManyWithoutJobNestedInput
    shares?: JobShareUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutSavedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUncheckedUpdateManyWithoutJobNestedInput
    shares?: JobShareUncheckedUpdateManyWithoutJobNestedInput
  }

  export type ApplicationCreateWithoutInterviewsInput = {
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicationsInput
    job: JobCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutInterviewsInput = {
    id?: number
    userId: number
    jobId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationCreateOrConnectWithoutInterviewsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
  }

  export type ApplicationUpsertWithoutInterviewsInput = {
    update: XOR<ApplicationUpdateWithoutInterviewsInput, ApplicationUncheckedUpdateWithoutInterviewsInput>
    create: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutInterviewsInput, ApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type ApplicationUpdateWithoutInterviewsInput = {
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutInterviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateWithoutPreselectionTestsInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    savedBy?: SavedJobCreateNestedManyWithoutJobInput
    shares?: JobShareCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutPreselectionTestsInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    savedBy?: SavedJobUncheckedCreateNestedManyWithoutJobInput
    shares?: JobShareUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutPreselectionTestsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutPreselectionTestsInput, JobUncheckedCreateWithoutPreselectionTestsInput>
  }

  export type PreselectionQuestionCreateWithoutTestInput = {
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    answers?: ApplicantAnswerCreateNestedManyWithoutQuestionInput
  }

  export type PreselectionQuestionUncheckedCreateWithoutTestInput = {
    id?: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    answers?: ApplicantAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type PreselectionQuestionCreateOrConnectWithoutTestInput = {
    where: PreselectionQuestionWhereUniqueInput
    create: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput>
  }

  export type PreselectionQuestionCreateManyTestInputEnvelope = {
    data: PreselectionQuestionCreateManyTestInput | PreselectionQuestionCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type PreselectionResultCreateWithoutTestInput = {
    score: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPreselectionResultsInput
    answers?: ApplicantAnswerCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultUncheckedCreateWithoutTestInput = {
    id?: number
    userId: number
    score: number
    createdAt?: Date | string
    answers?: ApplicantAnswerUncheckedCreateNestedManyWithoutResultInput
  }

  export type PreselectionResultCreateOrConnectWithoutTestInput = {
    where: PreselectionResultWhereUniqueInput
    create: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput>
  }

  export type PreselectionResultCreateManyTestInputEnvelope = {
    data: PreselectionResultCreateManyTestInput | PreselectionResultCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutPreselectionTestsInput = {
    update: XOR<JobUpdateWithoutPreselectionTestsInput, JobUncheckedUpdateWithoutPreselectionTestsInput>
    create: XOR<JobCreateWithoutPreselectionTestsInput, JobUncheckedCreateWithoutPreselectionTestsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutPreselectionTestsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutPreselectionTestsInput, JobUncheckedUpdateWithoutPreselectionTestsInput>
  }

  export type JobUpdateWithoutPreselectionTestsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUpdateManyWithoutJobNestedInput
    shares?: JobShareUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutPreselectionTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUncheckedUpdateManyWithoutJobNestedInput
    shares?: JobShareUncheckedUpdateManyWithoutJobNestedInput
  }

  export type PreselectionQuestionUpsertWithWhereUniqueWithoutTestInput = {
    where: PreselectionQuestionWhereUniqueInput
    update: XOR<PreselectionQuestionUpdateWithoutTestInput, PreselectionQuestionUncheckedUpdateWithoutTestInput>
    create: XOR<PreselectionQuestionCreateWithoutTestInput, PreselectionQuestionUncheckedCreateWithoutTestInput>
  }

  export type PreselectionQuestionUpdateWithWhereUniqueWithoutTestInput = {
    where: PreselectionQuestionWhereUniqueInput
    data: XOR<PreselectionQuestionUpdateWithoutTestInput, PreselectionQuestionUncheckedUpdateWithoutTestInput>
  }

  export type PreselectionQuestionUpdateManyWithWhereWithoutTestInput = {
    where: PreselectionQuestionScalarWhereInput
    data: XOR<PreselectionQuestionUpdateManyMutationInput, PreselectionQuestionUncheckedUpdateManyWithoutTestInput>
  }

  export type PreselectionQuestionScalarWhereInput = {
    AND?: PreselectionQuestionScalarWhereInput | PreselectionQuestionScalarWhereInput[]
    OR?: PreselectionQuestionScalarWhereInput[]
    NOT?: PreselectionQuestionScalarWhereInput | PreselectionQuestionScalarWhereInput[]
    id?: IntFilter<"PreselectionQuestion"> | number
    testId?: IntFilter<"PreselectionQuestion"> | number
    question?: StringFilter<"PreselectionQuestion"> | string
    options?: JsonFilter<"PreselectionQuestion">
    answer?: StringFilter<"PreselectionQuestion"> | string
  }

  export type PreselectionResultUpsertWithWhereUniqueWithoutTestInput = {
    where: PreselectionResultWhereUniqueInput
    update: XOR<PreselectionResultUpdateWithoutTestInput, PreselectionResultUncheckedUpdateWithoutTestInput>
    create: XOR<PreselectionResultCreateWithoutTestInput, PreselectionResultUncheckedCreateWithoutTestInput>
  }

  export type PreselectionResultUpdateWithWhereUniqueWithoutTestInput = {
    where: PreselectionResultWhereUniqueInput
    data: XOR<PreselectionResultUpdateWithoutTestInput, PreselectionResultUncheckedUpdateWithoutTestInput>
  }

  export type PreselectionResultUpdateManyWithWhereWithoutTestInput = {
    where: PreselectionResultScalarWhereInput
    data: XOR<PreselectionResultUpdateManyMutationInput, PreselectionResultUncheckedUpdateManyWithoutTestInput>
  }

  export type PreselectionTestCreateWithoutQuestionsInput = {
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutPreselectionTestsInput
    results?: PreselectionResultCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestUncheckedCreateWithoutQuestionsInput = {
    id?: number
    jobId: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    results?: PreselectionResultUncheckedCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestCreateOrConnectWithoutQuestionsInput = {
    where: PreselectionTestWhereUniqueInput
    create: XOR<PreselectionTestCreateWithoutQuestionsInput, PreselectionTestUncheckedCreateWithoutQuestionsInput>
  }

  export type ApplicantAnswerCreateWithoutQuestionInput = {
    selected: string
    isCorrect: boolean
    result: PreselectionResultCreateNestedOneWithoutAnswersInput
  }

  export type ApplicantAnswerUncheckedCreateWithoutQuestionInput = {
    id?: number
    resultId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerCreateOrConnectWithoutQuestionInput = {
    where: ApplicantAnswerWhereUniqueInput
    create: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ApplicantAnswerCreateManyQuestionInputEnvelope = {
    data: ApplicantAnswerCreateManyQuestionInput | ApplicantAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type PreselectionTestUpsertWithoutQuestionsInput = {
    update: XOR<PreselectionTestUpdateWithoutQuestionsInput, PreselectionTestUncheckedUpdateWithoutQuestionsInput>
    create: XOR<PreselectionTestCreateWithoutQuestionsInput, PreselectionTestUncheckedCreateWithoutQuestionsInput>
    where?: PreselectionTestWhereInput
  }

  export type PreselectionTestUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: PreselectionTestWhereInput
    data: XOR<PreselectionTestUpdateWithoutQuestionsInput, PreselectionTestUncheckedUpdateWithoutQuestionsInput>
  }

  export type PreselectionTestUpdateWithoutQuestionsInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPreselectionTestsNestedInput
    results?: PreselectionResultUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: PreselectionResultUncheckedUpdateManyWithoutTestNestedInput
  }

  export type ApplicantAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: ApplicantAnswerWhereUniqueInput
    update: XOR<ApplicantAnswerUpdateWithoutQuestionInput, ApplicantAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<ApplicantAnswerCreateWithoutQuestionInput, ApplicantAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ApplicantAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: ApplicantAnswerWhereUniqueInput
    data: XOR<ApplicantAnswerUpdateWithoutQuestionInput, ApplicantAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type ApplicantAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: ApplicantAnswerScalarWhereInput
    data: XOR<ApplicantAnswerUpdateManyMutationInput, ApplicantAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type ApplicantAnswerScalarWhereInput = {
    AND?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
    OR?: ApplicantAnswerScalarWhereInput[]
    NOT?: ApplicantAnswerScalarWhereInput | ApplicantAnswerScalarWhereInput[]
    id?: IntFilter<"ApplicantAnswer"> | number
    resultId?: IntFilter<"ApplicantAnswer"> | number
    questionId?: IntFilter<"ApplicantAnswer"> | number
    selected?: StringFilter<"ApplicantAnswer"> | string
    isCorrect?: BoolFilter<"ApplicantAnswer"> | boolean
  }

  export type UserCreateWithoutPreselectionResultsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreselectionResultsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreselectionResultsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreselectionResultsInput, UserUncheckedCreateWithoutPreselectionResultsInput>
  }

  export type PreselectionTestCreateWithoutResultsInput = {
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutPreselectionTestsInput
    questions?: PreselectionQuestionCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestUncheckedCreateWithoutResultsInput = {
    id?: number
    jobId: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
    questions?: PreselectionQuestionUncheckedCreateNestedManyWithoutTestInput
  }

  export type PreselectionTestCreateOrConnectWithoutResultsInput = {
    where: PreselectionTestWhereUniqueInput
    create: XOR<PreselectionTestCreateWithoutResultsInput, PreselectionTestUncheckedCreateWithoutResultsInput>
  }

  export type ApplicantAnswerCreateWithoutResultInput = {
    selected: string
    isCorrect: boolean
    question: PreselectionQuestionCreateNestedOneWithoutAnswersInput
  }

  export type ApplicantAnswerUncheckedCreateWithoutResultInput = {
    id?: number
    questionId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerCreateOrConnectWithoutResultInput = {
    where: ApplicantAnswerWhereUniqueInput
    create: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput>
  }

  export type ApplicantAnswerCreateManyResultInputEnvelope = {
    data: ApplicantAnswerCreateManyResultInput | ApplicantAnswerCreateManyResultInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPreselectionResultsInput = {
    update: XOR<UserUpdateWithoutPreselectionResultsInput, UserUncheckedUpdateWithoutPreselectionResultsInput>
    create: XOR<UserCreateWithoutPreselectionResultsInput, UserUncheckedCreateWithoutPreselectionResultsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreselectionResultsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreselectionResultsInput, UserUncheckedUpdateWithoutPreselectionResultsInput>
  }

  export type UserUpdateWithoutPreselectionResultsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreselectionResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PreselectionTestUpsertWithoutResultsInput = {
    update: XOR<PreselectionTestUpdateWithoutResultsInput, PreselectionTestUncheckedUpdateWithoutResultsInput>
    create: XOR<PreselectionTestCreateWithoutResultsInput, PreselectionTestUncheckedCreateWithoutResultsInput>
    where?: PreselectionTestWhereInput
  }

  export type PreselectionTestUpdateToOneWithWhereWithoutResultsInput = {
    where?: PreselectionTestWhereInput
    data: XOR<PreselectionTestUpdateWithoutResultsInput, PreselectionTestUncheckedUpdateWithoutResultsInput>
  }

  export type PreselectionTestUpdateWithoutResultsInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutPreselectionTestsNestedInput
    questions?: PreselectionQuestionUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestUncheckedUpdateWithoutResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: PreselectionQuestionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type ApplicantAnswerUpsertWithWhereUniqueWithoutResultInput = {
    where: ApplicantAnswerWhereUniqueInput
    update: XOR<ApplicantAnswerUpdateWithoutResultInput, ApplicantAnswerUncheckedUpdateWithoutResultInput>
    create: XOR<ApplicantAnswerCreateWithoutResultInput, ApplicantAnswerUncheckedCreateWithoutResultInput>
  }

  export type ApplicantAnswerUpdateWithWhereUniqueWithoutResultInput = {
    where: ApplicantAnswerWhereUniqueInput
    data: XOR<ApplicantAnswerUpdateWithoutResultInput, ApplicantAnswerUncheckedUpdateWithoutResultInput>
  }

  export type ApplicantAnswerUpdateManyWithWhereWithoutResultInput = {
    where: ApplicantAnswerScalarWhereInput
    data: XOR<ApplicantAnswerUpdateManyMutationInput, ApplicantAnswerUncheckedUpdateManyWithoutResultInput>
  }

  export type PreselectionResultCreateWithoutAnswersInput = {
    score: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPreselectionResultsInput
    test: PreselectionTestCreateNestedOneWithoutResultsInput
  }

  export type PreselectionResultUncheckedCreateWithoutAnswersInput = {
    id?: number
    userId: number
    testId: number
    score: number
    createdAt?: Date | string
  }

  export type PreselectionResultCreateOrConnectWithoutAnswersInput = {
    where: PreselectionResultWhereUniqueInput
    create: XOR<PreselectionResultCreateWithoutAnswersInput, PreselectionResultUncheckedCreateWithoutAnswersInput>
  }

  export type PreselectionQuestionCreateWithoutAnswersInput = {
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    test: PreselectionTestCreateNestedOneWithoutQuestionsInput
  }

  export type PreselectionQuestionUncheckedCreateWithoutAnswersInput = {
    id?: number
    testId: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type PreselectionQuestionCreateOrConnectWithoutAnswersInput = {
    where: PreselectionQuestionWhereUniqueInput
    create: XOR<PreselectionQuestionCreateWithoutAnswersInput, PreselectionQuestionUncheckedCreateWithoutAnswersInput>
  }

  export type PreselectionResultUpsertWithoutAnswersInput = {
    update: XOR<PreselectionResultUpdateWithoutAnswersInput, PreselectionResultUncheckedUpdateWithoutAnswersInput>
    create: XOR<PreselectionResultCreateWithoutAnswersInput, PreselectionResultUncheckedCreateWithoutAnswersInput>
    where?: PreselectionResultWhereInput
  }

  export type PreselectionResultUpdateToOneWithWhereWithoutAnswersInput = {
    where?: PreselectionResultWhereInput
    data: XOR<PreselectionResultUpdateWithoutAnswersInput, PreselectionResultUncheckedUpdateWithoutAnswersInput>
  }

  export type PreselectionResultUpdateWithoutAnswersInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreselectionResultsNestedInput
    test?: PreselectionTestUpdateOneRequiredWithoutResultsNestedInput
  }

  export type PreselectionResultUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionQuestionUpsertWithoutAnswersInput = {
    update: XOR<PreselectionQuestionUpdateWithoutAnswersInput, PreselectionQuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<PreselectionQuestionCreateWithoutAnswersInput, PreselectionQuestionUncheckedCreateWithoutAnswersInput>
    where?: PreselectionQuestionWhereInput
  }

  export type PreselectionQuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: PreselectionQuestionWhereInput
    data: XOR<PreselectionQuestionUpdateWithoutAnswersInput, PreselectionQuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type PreselectionQuestionUpdateWithoutAnswersInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    test?: PreselectionTestUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type PreselectionQuestionUncheckedUpdateWithoutAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutCreatedAssessmentsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedAssessmentsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedAssessmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
  }

  export type SkillQuestionCreateWithoutAssessmentInput = {
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type SkillQuestionUncheckedCreateWithoutAssessmentInput = {
    id?: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type SkillQuestionCreateOrConnectWithoutAssessmentInput = {
    where: SkillQuestionWhereUniqueInput
    create: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput>
  }

  export type SkillQuestionCreateManyAssessmentInputEnvelope = {
    data: SkillQuestionCreateManyAssessmentInput | SkillQuestionCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type SkillResultCreateWithoutAssessmentInput = {
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSkillResultsInput
  }

  export type SkillResultUncheckedCreateWithoutAssessmentInput = {
    id?: number
    userId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillResultCreateOrConnectWithoutAssessmentInput = {
    where: SkillResultWhereUniqueInput
    create: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput>
  }

  export type SkillResultCreateManyAssessmentInputEnvelope = {
    data: SkillResultCreateManyAssessmentInput | SkillResultCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedAssessmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
    create: XOR<UserCreateWithoutCreatedAssessmentsInput, UserUncheckedCreateWithoutCreatedAssessmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAssessmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAssessmentsInput, UserUncheckedUpdateWithoutCreatedAssessmentsInput>
  }

  export type UserUpdateWithoutCreatedAssessmentsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SkillQuestionUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: SkillQuestionWhereUniqueInput
    update: XOR<SkillQuestionUpdateWithoutAssessmentInput, SkillQuestionUncheckedUpdateWithoutAssessmentInput>
    create: XOR<SkillQuestionCreateWithoutAssessmentInput, SkillQuestionUncheckedCreateWithoutAssessmentInput>
  }

  export type SkillQuestionUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: SkillQuestionWhereUniqueInput
    data: XOR<SkillQuestionUpdateWithoutAssessmentInput, SkillQuestionUncheckedUpdateWithoutAssessmentInput>
  }

  export type SkillQuestionUpdateManyWithWhereWithoutAssessmentInput = {
    where: SkillQuestionScalarWhereInput
    data: XOR<SkillQuestionUpdateManyMutationInput, SkillQuestionUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type SkillQuestionScalarWhereInput = {
    AND?: SkillQuestionScalarWhereInput | SkillQuestionScalarWhereInput[]
    OR?: SkillQuestionScalarWhereInput[]
    NOT?: SkillQuestionScalarWhereInput | SkillQuestionScalarWhereInput[]
    id?: IntFilter<"SkillQuestion"> | number
    assessmentId?: IntFilter<"SkillQuestion"> | number
    question?: StringFilter<"SkillQuestion"> | string
    options?: JsonFilter<"SkillQuestion">
    answer?: StringFilter<"SkillQuestion"> | string
  }

  export type SkillResultUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: SkillResultWhereUniqueInput
    update: XOR<SkillResultUpdateWithoutAssessmentInput, SkillResultUncheckedUpdateWithoutAssessmentInput>
    create: XOR<SkillResultCreateWithoutAssessmentInput, SkillResultUncheckedCreateWithoutAssessmentInput>
  }

  export type SkillResultUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: SkillResultWhereUniqueInput
    data: XOR<SkillResultUpdateWithoutAssessmentInput, SkillResultUncheckedUpdateWithoutAssessmentInput>
  }

  export type SkillResultUpdateManyWithWhereWithoutAssessmentInput = {
    where: SkillResultScalarWhereInput
    data: XOR<SkillResultUpdateManyMutationInput, SkillResultUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type SkillAssessmentCreateWithoutQuestionsInput = {
    title: string
    description?: string | null
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedAssessmentsInput
    results?: SkillResultCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentUncheckedCreateWithoutQuestionsInput = {
    id?: number
    title: string
    description?: string | null
    createdBy: number
    createdAt?: Date | string
    results?: SkillResultUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentCreateOrConnectWithoutQuestionsInput = {
    where: SkillAssessmentWhereUniqueInput
    create: XOR<SkillAssessmentCreateWithoutQuestionsInput, SkillAssessmentUncheckedCreateWithoutQuestionsInput>
  }

  export type SkillAssessmentUpsertWithoutQuestionsInput = {
    update: XOR<SkillAssessmentUpdateWithoutQuestionsInput, SkillAssessmentUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SkillAssessmentCreateWithoutQuestionsInput, SkillAssessmentUncheckedCreateWithoutQuestionsInput>
    where?: SkillAssessmentWhereInput
  }

  export type SkillAssessmentUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SkillAssessmentWhereInput
    data: XOR<SkillAssessmentUpdateWithoutQuestionsInput, SkillAssessmentUncheckedUpdateWithoutQuestionsInput>
  }

  export type SkillAssessmentUpdateWithoutQuestionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
    results?: SkillResultUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    results?: SkillResultUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type UserCreateWithoutSkillResultsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSkillResultsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSkillResultsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillResultsInput, UserUncheckedCreateWithoutSkillResultsInput>
  }

  export type SkillAssessmentCreateWithoutResultsInput = {
    title: string
    description?: string | null
    createdAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedAssessmentsInput
    questions?: SkillQuestionCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentUncheckedCreateWithoutResultsInput = {
    id?: number
    title: string
    description?: string | null
    createdBy: number
    createdAt?: Date | string
    questions?: SkillQuestionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type SkillAssessmentCreateOrConnectWithoutResultsInput = {
    where: SkillAssessmentWhereUniqueInput
    create: XOR<SkillAssessmentCreateWithoutResultsInput, SkillAssessmentUncheckedCreateWithoutResultsInput>
  }

  export type UserUpsertWithoutSkillResultsInput = {
    update: XOR<UserUpdateWithoutSkillResultsInput, UserUncheckedUpdateWithoutSkillResultsInput>
    create: XOR<UserCreateWithoutSkillResultsInput, UserUncheckedCreateWithoutSkillResultsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSkillResultsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSkillResultsInput, UserUncheckedUpdateWithoutSkillResultsInput>
  }

  export type UserUpdateWithoutSkillResultsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SkillAssessmentUpsertWithoutResultsInput = {
    update: XOR<SkillAssessmentUpdateWithoutResultsInput, SkillAssessmentUncheckedUpdateWithoutResultsInput>
    create: XOR<SkillAssessmentCreateWithoutResultsInput, SkillAssessmentUncheckedCreateWithoutResultsInput>
    where?: SkillAssessmentWhereInput
  }

  export type SkillAssessmentUpdateToOneWithWhereWithoutResultsInput = {
    where?: SkillAssessmentWhereInput
    data: XOR<SkillAssessmentUpdateWithoutResultsInput, SkillAssessmentUncheckedUpdateWithoutResultsInput>
  }

  export type SkillAssessmentUpdateWithoutResultsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedAssessmentsNestedInput
    questions?: SkillQuestionUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentUncheckedUpdateWithoutResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: SkillQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type UserCreateWithoutUserBadgesInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserBadgesInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
  }

  export type UserUpsertWithoutUserBadgesInput = {
    update: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserUpdateWithoutUserBadgesInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBadgesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutGeneratedCvsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGeneratedCvsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGeneratedCvsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGeneratedCvsInput, UserUncheckedCreateWithoutGeneratedCvsInput>
  }

  export type UserUpsertWithoutGeneratedCvsInput = {
    update: XOR<UserUpdateWithoutGeneratedCvsInput, UserUncheckedUpdateWithoutGeneratedCvsInput>
    create: XOR<UserCreateWithoutGeneratedCvsInput, UserUncheckedCreateWithoutGeneratedCvsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGeneratedCvsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGeneratedCvsInput, UserUncheckedUpdateWithoutGeneratedCvsInput>
  }

  export type UserUpdateWithoutGeneratedCvsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGeneratedCvsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubscriptionCreateWithoutPlanInput = {
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionsInput
    payments?: PaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutPlanInput = {
    id?: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionCreateManyPlanInputEnvelope = {
    data: SubscriptionCreateManyPlanInput | SubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type UserCreateWithoutSubscriptionsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanCreateWithoutSubscriptionsInput = {
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planDescription?: string | null
  }

  export type SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput = {
    id?: number
    planName: string
    planPrice: Decimal | DecimalJsLike | number | string
    planDescription?: string | null
  }

  export type SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput = {
    where: SubscriptionPlanWhereUniqueInput
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
  }

  export type PaymentCreateWithoutSubscriptionInput = {
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type PaymentUncheckedCreateWithoutSubscriptionInput = {
    id?: number
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type PaymentCreateOrConnectWithoutSubscriptionInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput>
  }

  export type PaymentCreateManySubscriptionInputEnvelope = {
    data: PaymentCreateManySubscriptionInput | PaymentCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubscriptionPlanUpsertWithoutSubscriptionsInput = {
    update: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    where?: SubscriptionPlanWhereInput
  }

  export type SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: SubscriptionPlanWhereInput
    data: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateWithoutSubscriptionsInput = {
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planDescription?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutSubscriptionInput, PaymentUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<PaymentCreateWithoutSubscriptionInput, PaymentUncheckedCreateWithoutSubscriptionInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutSubscriptionInput, PaymentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type PaymentUpdateManyWithWhereWithoutSubscriptionInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    subscriptionId?: IntFilter<"Payment"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentProof?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    approvedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    gatewayTransactionId?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    expiredAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
  }

  export type SubscriptionCreateWithoutPaymentsInput = {
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionsInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutPaymentsInput = {
    id?: number
    userId: number
    subscriptionPlanId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutPaymentsInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutPaymentsInput, SubscriptionUncheckedCreateWithoutPaymentsInput>
  }

  export type SubscriptionUpsertWithoutPaymentsInput = {
    update: XOR<SubscriptionUpdateWithoutPaymentsInput, SubscriptionUncheckedUpdateWithoutPaymentsInput>
    create: XOR<SubscriptionCreateWithoutPaymentsInput, SubscriptionUncheckedCreateWithoutPaymentsInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutPaymentsInput, SubscriptionUncheckedUpdateWithoutPaymentsInput>
  }

  export type SubscriptionUpdateWithoutPaymentsInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    subscriptionPlanId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutEmploymentsInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
    jobShares?: JobShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmploymentsInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
    jobShares?: JobShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmploymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmploymentsInput, UserUncheckedCreateWithoutEmploymentsInput>
  }

  export type CompanyCreateWithoutEmploymentsInput = {
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    admin?: UserCreateNestedOneWithoutAdminOfInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmploymentsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    location?: string | null
    description?: string | null
    website?: string | null
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId?: number | null
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmploymentsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmploymentsInput, CompanyUncheckedCreateWithoutEmploymentsInput>
  }

  export type CompanyReviewCreateWithoutEmploymentInput = {
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CompanyReviewUncheckedCreateWithoutEmploymentInput = {
    id?: number
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CompanyReviewCreateOrConnectWithoutEmploymentInput = {
    where: CompanyReviewWhereUniqueInput
    create: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput>
  }

  export type CompanyReviewCreateManyEmploymentInputEnvelope = {
    data: CompanyReviewCreateManyEmploymentInput | CompanyReviewCreateManyEmploymentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmploymentsInput = {
    update: XOR<UserUpdateWithoutEmploymentsInput, UserUncheckedUpdateWithoutEmploymentsInput>
    create: XOR<UserCreateWithoutEmploymentsInput, UserUncheckedCreateWithoutEmploymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmploymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmploymentsInput, UserUncheckedUpdateWithoutEmploymentsInput>
  }

  export type UserUpdateWithoutEmploymentsInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmploymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
    jobShares?: JobShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyUpsertWithoutEmploymentsInput = {
    update: XOR<CompanyUpdateWithoutEmploymentsInput, CompanyUncheckedUpdateWithoutEmploymentsInput>
    create: XOR<CompanyCreateWithoutEmploymentsInput, CompanyUncheckedCreateWithoutEmploymentsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmploymentsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmploymentsInput, CompanyUncheckedUpdateWithoutEmploymentsInput>
  }

  export type CompanyUpdateWithoutEmploymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: UserUpdateOneWithoutAdminOfNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmploymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyReviewUpsertWithWhereUniqueWithoutEmploymentInput = {
    where: CompanyReviewWhereUniqueInput
    update: XOR<CompanyReviewUpdateWithoutEmploymentInput, CompanyReviewUncheckedUpdateWithoutEmploymentInput>
    create: XOR<CompanyReviewCreateWithoutEmploymentInput, CompanyReviewUncheckedCreateWithoutEmploymentInput>
  }

  export type CompanyReviewUpdateWithWhereUniqueWithoutEmploymentInput = {
    where: CompanyReviewWhereUniqueInput
    data: XOR<CompanyReviewUpdateWithoutEmploymentInput, CompanyReviewUncheckedUpdateWithoutEmploymentInput>
  }

  export type CompanyReviewUpdateManyWithWhereWithoutEmploymentInput = {
    where: CompanyReviewScalarWhereInput
    data: XOR<CompanyReviewUpdateManyMutationInput, CompanyReviewUncheckedUpdateManyWithoutEmploymentInput>
  }

  export type CompanyReviewScalarWhereInput = {
    AND?: CompanyReviewScalarWhereInput | CompanyReviewScalarWhereInput[]
    OR?: CompanyReviewScalarWhereInput[]
    NOT?: CompanyReviewScalarWhereInput | CompanyReviewScalarWhereInput[]
    id?: IntFilter<"CompanyReview"> | number
    employmentId?: IntFilter<"CompanyReview"> | number
    position?: StringFilter<"CompanyReview"> | string
    salaryEstimate?: IntNullableFilter<"CompanyReview"> | number | null
    cultureRating?: IntFilter<"CompanyReview"> | number
    worklifeRating?: IntFilter<"CompanyReview"> | number
    facilityRating?: IntFilter<"CompanyReview"> | number
    careerRating?: IntFilter<"CompanyReview"> | number
    comment?: StringNullableFilter<"CompanyReview"> | string | null
    createdAt?: DateTimeFilter<"CompanyReview"> | Date | string
  }

  export type EmploymentCreateWithoutReviewsInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmploymentsInput
    company?: CompanyCreateNestedOneWithoutEmploymentsInput
  }

  export type EmploymentUncheckedCreateWithoutReviewsInput = {
    id?: number
    userId: number
    companyId?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type EmploymentCreateOrConnectWithoutReviewsInput = {
    where: EmploymentWhereUniqueInput
    create: XOR<EmploymentCreateWithoutReviewsInput, EmploymentUncheckedCreateWithoutReviewsInput>
  }

  export type EmploymentUpsertWithoutReviewsInput = {
    update: XOR<EmploymentUpdateWithoutReviewsInput, EmploymentUncheckedUpdateWithoutReviewsInput>
    create: XOR<EmploymentCreateWithoutReviewsInput, EmploymentUncheckedCreateWithoutReviewsInput>
    where?: EmploymentWhereInput
  }

  export type EmploymentUpdateToOneWithWhereWithoutReviewsInput = {
    where?: EmploymentWhereInput
    data: XOR<EmploymentUpdateWithoutReviewsInput, EmploymentUncheckedUpdateWithoutReviewsInput>
  }

  export type EmploymentUpdateWithoutReviewsInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmploymentsNestedInput
    company?: CompanyUpdateOneWithoutEmploymentsNestedInput
  }

  export type EmploymentUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutJobSharesInput = {
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderCreateNestedManyWithoutUserInput
    adminOf?: CompanyCreateNestedOneWithoutAdminInput
    employments?: EmploymentCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultCreateNestedManyWithoutUserInput
    skillResults?: SkillResultCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobSharesInput = {
    id?: number
    role?: $Enums.UserRole
    name: string
    email: string
    passwordHash?: string | null
    phone?: string | null
    gender?: string | null
    dob?: Date | string | null
    education?: string | null
    address?: string | null
    profilePicture?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: UserProviderUncheckedCreateNestedManyWithoutUserInput
    adminOf?: CompanyUncheckedCreateNestedOneWithoutAdminInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    preselectionResults?: PreselectionResultUncheckedCreateNestedManyWithoutUserInput
    skillResults?: SkillResultUncheckedCreateNestedManyWithoutUserInput
    createdAssessments?: SkillAssessmentUncheckedCreateNestedManyWithoutCreatorInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    generatedCvs?: GeneratedCVUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    savedJobs?: SavedJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobSharesInput, UserUncheckedCreateWithoutJobSharesInput>
  }

  export type JobCreateWithoutSharesInput = {
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestCreateNestedManyWithoutJobInput
    savedBy?: SavedJobCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutSharesInput = {
    id?: number
    companyId: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    preselectionTests?: PreselectionTestUncheckedCreateNestedManyWithoutJobInput
    savedBy?: SavedJobUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutSharesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutSharesInput, JobUncheckedCreateWithoutSharesInput>
  }

  export type UserUpsertWithoutJobSharesInput = {
    update: XOR<UserUpdateWithoutJobSharesInput, UserUncheckedUpdateWithoutJobSharesInput>
    create: XOR<UserCreateWithoutJobSharesInput, UserUncheckedCreateWithoutJobSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobSharesInput, UserUncheckedUpdateWithoutJobSharesInput>
  }

  export type UserUpdateWithoutJobSharesInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: UserProviderUncheckedUpdateManyWithoutUserNestedInput
    adminOf?: CompanyUncheckedUpdateOneWithoutAdminNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    preselectionResults?: PreselectionResultUncheckedUpdateManyWithoutUserNestedInput
    skillResults?: SkillResultUncheckedUpdateManyWithoutUserNestedInput
    createdAssessments?: SkillAssessmentUncheckedUpdateManyWithoutCreatorNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    generatedCvs?: GeneratedCVUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    savedJobs?: SavedJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithoutSharesInput = {
    update: XOR<JobUpdateWithoutSharesInput, JobUncheckedUpdateWithoutSharesInput>
    create: XOR<JobCreateWithoutSharesInput, JobUncheckedCreateWithoutSharesInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutSharesInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutSharesInput, JobUncheckedUpdateWithoutSharesInput>
  }

  export type JobUpdateWithoutSharesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUncheckedUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUncheckedUpdateManyWithoutJobNestedInput
  }

  export type UserProviderCreateManyUserInput = {
    id?: number
    provider: $Enums.ProviderType
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    createdAt?: Date | string
  }

  export type EmploymentCreateManyUserInput = {
    id?: number
    companyId?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type ApplicationCreateManyUserInput = {
    id?: number
    jobId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreselectionResultCreateManyUserInput = {
    id?: number
    testId: number
    score: number
    createdAt?: Date | string
  }

  export type SkillResultCreateManyUserInput = {
    id?: number
    assessmentId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillAssessmentCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    createdAt?: Date | string
  }

  export type UserBadgeCreateManyUserInput = {
    id?: number
    badgeName: string
    badgeIcon?: string | null
    awardedAt?: Date | string
  }

  export type GeneratedCVCreateManyUserInput = {
    id?: number
    fileUrl: string
    templateUsed: string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubscriptionCreateManyUserInput = {
    id?: number
    subscriptionPlanId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type SavedJobCreateManyUserInput = {
    id?: number
    jobId: number
    createdAt?: Date | string
  }

  export type JobShareCreateManyUserInput = {
    id?: number
    jobId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type UserProviderUpdateWithoutUserInput = {
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProviderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProviderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUpdateWithoutUserInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutEmploymentsNestedInput
    reviews?: CompanyReviewUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: CompanyReviewUncheckedUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpdateWithoutUserInput = {
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionResultUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: PreselectionTestUpdateOneRequiredWithoutResultsNestedInput
    answers?: ApplicantAnswerUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: ApplicantAnswerUncheckedUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillResultUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: SkillAssessmentUpdateOneRequiredWithoutResultsNestedInput
  }

  export type SkillResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    assessmentId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillAssessmentUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: SkillQuestionUpdateManyWithoutAssessmentNestedInput
    results?: SkillResultUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: SkillQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
    results?: SkillResultUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type SkillAssessmentUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    badgeName?: StringFieldUpdateOperationsInput | string
    badgeIcon?: NullableStringFieldUpdateOperationsInput | string | null
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVUpdateWithoutUserInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneratedCVUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    templateUsed?: StringFieldUpdateOperationsInput | string
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    payments?: PaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionPlanId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscriptionPlanId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedJobUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareUpdateWithoutUserInput = {
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutSharesNestedInput
  }

  export type JobShareUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyCompanyInput = {
    id?: number
    title: string
    description: string
    category: string
    city: string
    salaryMin?: number | null
    salaryMax?: number | null
    tags?: JobCreatetagsInput | string[]
    banner?: string | null
    deadline?: Date | string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentCreateManyCompanyInput = {
    id?: number
    userId: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type JobUpdateWithoutCompanyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUpdateManyWithoutJobNestedInput
    shares?: JobShareUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    preselectionTests?: PreselectionTestUncheckedUpdateManyWithoutJobNestedInput
    savedBy?: SavedJobUncheckedUpdateManyWithoutJobNestedInput
    shares?: JobShareUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    salaryMin?: NullableIntFieldUpdateOperationsInput | number | null
    salaryMax?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: JobUpdatetagsInput | string[]
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUpdateWithoutCompanyInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmploymentsNestedInput
    reviews?: CompanyReviewUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: CompanyReviewUncheckedUpdateManyWithoutEmploymentNestedInput
  }

  export type EmploymentUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateManyJobInput = {
    id?: number
    userId: number
    cvFile: string
    expectedSalary?: number | null
    status?: $Enums.ApplicationStatus
    reviewNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreselectionTestCreateManyJobInput = {
    id?: number
    isActive?: boolean
    passingScore?: number | null
    createdAt?: Date | string
  }

  export type SavedJobCreateManyJobInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type JobShareCreateManyJobInput = {
    id?: number
    userId: number
    platform: $Enums.SharePlatform
    sharedUrl?: string | null
    customMessage?: string | null
    createdAt?: Date | string
  }

  export type ApplicationUpdateWithoutJobInput = {
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cvFile?: StringFieldUpdateOperationsInput | string
    expectedSalary?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    reviewNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreselectionTestUpdateWithoutJobInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: PreselectionQuestionUpdateManyWithoutTestNestedInput
    results?: PreselectionResultUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: PreselectionQuestionUncheckedUpdateManyWithoutTestNestedInput
    results?: PreselectionResultUncheckedUpdateManyWithoutTestNestedInput
  }

  export type PreselectionTestUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    passingScore?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobUpdateWithoutJobInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedJobsNestedInput
  }

  export type SavedJobUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedJobUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareUpdateWithoutJobInput = {
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobSharesNestedInput
  }

  export type JobShareUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobShareUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    platform?: EnumSharePlatformFieldUpdateOperationsInput | $Enums.SharePlatform
    sharedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewCreateManyApplicationInput = {
    id?: number
    scheduleDate: Date | string
    locationOrLink?: string | null
    notes?: string | null
    status?: $Enums.InterviewStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    reminderSentAt?: Date | string | null
  }

  export type InterviewUpdateWithoutApplicationInput = {
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InterviewUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    locationOrLink?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumInterviewStatusFieldUpdateOperationsInput | $Enums.InterviewStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminderSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PreselectionQuestionCreateManyTestInput = {
    id?: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type PreselectionResultCreateManyTestInput = {
    id?: number
    userId: number
    score: number
    createdAt?: Date | string
  }

  export type PreselectionQuestionUpdateWithoutTestInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    answers?: ApplicantAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type PreselectionQuestionUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    answers?: ApplicantAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type PreselectionQuestionUncheckedUpdateManyWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type PreselectionResultUpdateWithoutTestInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreselectionResultsNestedInput
    answers?: ApplicantAnswerUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: ApplicantAnswerUncheckedUpdateManyWithoutResultNestedInput
  }

  export type PreselectionResultUncheckedUpdateManyWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantAnswerCreateManyQuestionInput = {
    id?: number
    resultId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerUpdateWithoutQuestionInput = {
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    result?: PreselectionResultUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ApplicantAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicantAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicantAnswerCreateManyResultInput = {
    id?: number
    questionId: number
    selected: string
    isCorrect: boolean
  }

  export type ApplicantAnswerUpdateWithoutResultInput = {
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    question?: PreselectionQuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ApplicantAnswerUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicantAnswerUncheckedUpdateManyWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    selected?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillQuestionCreateManyAssessmentInput = {
    id?: number
    question: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type SkillResultCreateManyAssessmentInput = {
    id?: number
    userId: number
    score: number
    isPassed?: boolean
    certificateUrl?: string | null
    certificateCode?: string | null
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SkillQuestionUpdateWithoutAssessmentInput = {
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillQuestionUncheckedUpdateWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillQuestionUncheckedUpdateManyWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type SkillResultUpdateWithoutAssessmentInput = {
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSkillResultsNestedInput
  }

  export type SkillResultUncheckedUpdateWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillResultUncheckedUpdateManyWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    isPassed?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    certificateCode?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyPlanInput = {
    id?: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type SubscriptionUpdateWithoutPlanInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    payments?: PaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManySubscriptionInput = {
    id?: number
    paymentMethod: $Enums.PaymentMethod
    paymentProof?: string | null
    status?: $Enums.PaymentStatus
    amount: Decimal | DecimalJsLike | number | string
    approvedAt?: Date | string | null
    gatewayTransactionId?: string | null
    createdAt?: Date | string
    expiredAt?: Date | string | null
  }

  export type PaymentUpdateWithoutSubscriptionInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateWithoutSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentProof?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gatewayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyReviewCreateManyEmploymentInput = {
    id?: number
    position: string
    salaryEstimate?: number | null
    cultureRating: number
    worklifeRating: number
    facilityRating: number
    careerRating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type CompanyReviewUpdateWithoutEmploymentInput = {
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyReviewUncheckedUpdateWithoutEmploymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyReviewUncheckedUpdateManyWithoutEmploymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    salaryEstimate?: NullableIntFieldUpdateOperationsInput | number | null
    cultureRating?: IntFieldUpdateOperationsInput | number
    worklifeRating?: IntFieldUpdateOperationsInput | number
    facilityRating?: IntFieldUpdateOperationsInput | number
    careerRating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}