"use strict";
// This file exports all modular controllers for easy import
// Each controller is now under 200 lines and focused on specific functionality
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillAssessmentModularController = exports.CertificateBadgeController = exports.AssessmentExecutionController = exports.AssessmentCreationController = void 0;
var assessmentCreation_controller_1 = require("./assessmentCreation.controller");
Object.defineProperty(exports, "AssessmentCreationController", { enumerable: true, get: function () { return assessmentCreation_controller_1.AssessmentCreationController; } });
var assessmentExecution_controller_1 = require("./assessmentExecution.controller");
Object.defineProperty(exports, "AssessmentExecutionController", { enumerable: true, get: function () { return assessmentExecution_controller_1.AssessmentExecutionController; } });
var certificateBadge_controller_1 = require("./certificateBadge.controller");
Object.defineProperty(exports, "CertificateBadgeController", { enumerable: true, get: function () { return certificateBadge_controller_1.CertificateBadgeController; } });
// export { BadgeTemplateRefactoredController } from "./badgeTemplateRefactored.controller"; // Commented out - file doesn't exist
// Re-export for backward compatibility
const assessmentCreation_controller_2 = require("./assessmentCreation.controller");
const assessmentExecution_controller_2 = require("./assessmentExecution.controller");
const certificateBadge_controller_2 = require("./certificateBadge.controller");
class SkillAssessmentModularController {
}
exports.SkillAssessmentModularController = SkillAssessmentModularController;
// Assessment Creation Methods (Developer Only)
SkillAssessmentModularController.createAssessment = assessmentCreation_controller_2.AssessmentCreationController.createAssessment;
SkillAssessmentModularController.getAssessmentsForManagement = assessmentCreation_controller_2.AssessmentCreationController.getAssessmentsForManagement;
SkillAssessmentModularController.getAssessmentForEditing = assessmentCreation_controller_2.AssessmentCreationController.getAssessmentForEditing;
SkillAssessmentModularController.updateAssessment = assessmentCreation_controller_2.AssessmentCreationController.updateAssessment;
SkillAssessmentModularController.deleteAssessment = assessmentCreation_controller_2.AssessmentCreationController.deleteAssessment;
SkillAssessmentModularController.getDeveloperAssessments = assessmentCreation_controller_2.AssessmentCreationController.getDeveloperAssessments;
SkillAssessmentModularController.searchAssessments = assessmentCreation_controller_2.AssessmentCreationController.searchAssessments;
SkillAssessmentModularController.getAssessmentStatistics = assessmentCreation_controller_2.AssessmentCreationController.getAssessmentStatistics;
SkillAssessmentModularController.duplicateAssessment = assessmentCreation_controller_2.AssessmentCreationController.duplicateAssessment;
// Assessment Execution Methods (User with Subscription)
SkillAssessmentModularController.getAssessmentsForDiscovery = assessmentExecution_controller_2.AssessmentExecutionController.getAssessmentsForDiscovery;
SkillAssessmentModularController.getAssessmentForTaking = assessmentExecution_controller_2.AssessmentExecutionController.getAssessmentForTaking;
SkillAssessmentModularController.submitAssessment = assessmentExecution_controller_2.AssessmentExecutionController.submitAssessment;
SkillAssessmentModularController.getUserAssessmentResults = assessmentExecution_controller_2.AssessmentExecutionController.getUserAssessmentResults;
SkillAssessmentModularController.getAssessmentResult = assessmentExecution_controller_2.AssessmentExecutionController.getUserAssessmentResults;
SkillAssessmentModularController.getAssessmentLeaderboard = assessmentExecution_controller_2.AssessmentExecutionController.getAssessmentLeaderboard;
SkillAssessmentModularController.getAssessmentStats = assessmentExecution_controller_2.AssessmentExecutionController.getAssessmentStats;
SkillAssessmentModularController.retakeAssessment = assessmentExecution_controller_2.AssessmentExecutionController.canRetakeAssessment;
SkillAssessmentModularController.canRetakeAssessment = assessmentExecution_controller_2.AssessmentExecutionController.canRetakeAssessment;
SkillAssessmentModularController.getTimeRemaining = assessmentExecution_controller_2.AssessmentExecutionController.getTimeRemaining;
// static saveAssessmentProgress = AssessmentExecutionController.saveAssessmentProgress; // Method doesn't exist
// Certificate and Badge Methods
SkillAssessmentModularController.verifyCertificate = certificateBadge_controller_2.CertificateBadgeController.verifyCertificate;
SkillAssessmentModularController.downloadCertificate = certificateBadge_controller_2.CertificateBadgeController.downloadCertificate;
SkillAssessmentModularController.getUserCertificates = certificateBadge_controller_2.CertificateBadgeController.getUserCertificates;
SkillAssessmentModularController.shareCertificate = certificateBadge_controller_2.CertificateBadgeController.shareCertificate;
SkillAssessmentModularController.getCertificateAnalytics = certificateBadge_controller_2.CertificateBadgeController.getCertificateAnalytics;
SkillAssessmentModularController.getUserBadges = certificateBadge_controller_2.CertificateBadgeController.getUserBadges;
SkillAssessmentModularController.getBadgeDetails = certificateBadge_controller_2.CertificateBadgeController.getBadgeDetails;
SkillAssessmentModularController.verifyBadge = certificateBadge_controller_2.CertificateBadgeController.verifyBadge;
SkillAssessmentModularController.getBadgeAnalytics = certificateBadge_controller_2.CertificateBadgeController.getBadgeAnalytics;
SkillAssessmentModularController.getBadgeLeaderboard = certificateBadge_controller_2.CertificateBadgeController.getBadgeLeaderboard;
SkillAssessmentModularController.getUserBadgeProgress = certificateBadge_controller_2.CertificateBadgeController.getUserBadgeProgress;
SkillAssessmentModularController.shareBadge = certificateBadge_controller_2.CertificateBadgeController.shareBadge;
// Default export for backward compatibility
exports.default = SkillAssessmentModularController;
//# sourceMappingURL=skillAssessmentModular.controller.js.map