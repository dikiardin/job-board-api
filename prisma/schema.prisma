generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  role                  UserRole             @default(USER)
  name                  String
  email                 String               @unique
  passwordHash          String?
  phone                 String?
  gender                String?
  dob                   DateTime?
  education             String?
  address               String?
  profilePicture        String?
  isVerified            Boolean              @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  city                  String?
  applications          Application[]
  createdBadgeTemplates BadgeTemplate[]      @relation("BadgeTemplateCreator")
  adminOf               Company?             @relation("CompanyAdmin")
  employments           Employment[]
  generatedCvs          GeneratedCV[]
  jobShares             JobShare[]
  preselectionResults   PreselectionResult[]
  savedJobs             SavedJob[]
  createdAssessments    SkillAssessment[]    @relation("SkillAssessmentCreator")
  skillResults          SkillResult[]
  subscriptions         Subscription[]
  userBadges            UserBadge[]
  providers             UserProvider[]
}

model UserProvider {
  id           Int          @id @default(autoincrement())
  userId       Int
  provider     ProviderType
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Company {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  email       String?
  phone       String?
  location    String?
  description String?
  website     String?
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  adminId     Int?         @unique
  city        String?
  admin       User?        @relation("CompanyAdmin", fields: [adminId], references: [id])
  employments Employment[]
  jobs        Job[]
}

model Job {
  id                String            @id @default(uuid()) @db.Uuid
  companyId         String            @db.Uuid
  title             String
  description       String
  category          String
  city              String
  salaryMin         Int?
  salaryMax         Int?
  tags              String[]
  banner            String?
  deadline          DateTime?
  isPublished       Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  applications      Application[]
  company           Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shares            JobShare[]
  preselectionTests PreselectionTest?
  savedBy           SavedJob[]

  @@index([companyId])
}

model Application {
  id             Int               @id @default(autoincrement())
  userId         Int
  jobId          String            @db.Uuid
  cvFile         String
  expectedSalary Int?
  status         ApplicationStatus @default(SUBMITTED)
  reviewNote     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  job            Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews     Interview[]

  @@unique([userId, jobId])
  @@index([jobId])
}

model SavedJob {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     String   @db.Uuid
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Interview {
  id             Int             @id @default(autoincrement())
  applicationId  Int
  scheduleDate   DateTime
  locationOrLink String?
  status         InterviewStatus @default(SCHEDULED)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notes          String?
  reminderSentAt DateTime?
  application    Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model PreselectionTest {
  id           Int                    @id @default(autoincrement())
  jobId        String                 @unique @db.Uuid
  createdAt    DateTime               @default(now())
  isActive     Boolean                @default(true)
  passingScore Int?
  questions    PreselectionQuestion[]
  results      PreselectionResult[]
  job          Job                    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model PreselectionQuestion {
  id       Int               @id @default(autoincrement())
  testId   Int
  question String
  options  Json
  answer   String
  answers  ApplicantAnswer[]
  test     PreselectionTest  @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model PreselectionResult {
  id        Int               @id @default(autoincrement())
  userId    Int
  testId    Int
  score     Int
  createdAt DateTime          @default(now())
  answers   ApplicantAnswer[]
  test      PreselectionTest  @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, testId])
  @@index([testId])
}

model ApplicantAnswer {
  id         Int                  @id @default(autoincrement())
  resultId   Int
  questionId Int
  selected   String
  isCorrect  Boolean
  question   PreselectionQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  result     PreselectionResult   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, questionId])
  @@index([questionId])
}

model SkillAssessment {
  id              Int             @id @default(autoincrement())
  title           String
  description     String?
  createdBy       Int
  createdAt       DateTime        @default(now())
  badgeTemplateId Int?
  badgeTemplate   BadgeTemplate?  @relation(fields: [badgeTemplateId], references: [id])
  creator         User            @relation("SkillAssessmentCreator", fields: [createdBy], references: [id])
  questions       SkillQuestion[]
  results         SkillResult[]
  userBadges      UserBadge[]
}

model SkillQuestion {
  id           Int             @id @default(autoincrement())
  assessmentId Int
  question     String
  options      Json
  answer       String
  assessment   SkillAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
}

model SkillResult {
  id              Int             @id @default(autoincrement())
  userId          Int
  assessmentId    Int
  score           Int
  isPassed        Boolean         @default(false)
  certificateUrl  String?
  certificateCode String?
  startedAt       DateTime?
  finishedAt      DateTime?
  createdAt       DateTime        @default(now())
  assessment      SkillAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, assessmentId])
  @@index([assessmentId])
}

model BadgeTemplate {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  icon        String?
  description String?
  category    String?
  createdBy   Int
  createdAt   DateTime          @default(now())
  creator     User              @relation("BadgeTemplateCreator", fields: [createdBy], references: [id])
  assessments SkillAssessment[]
  userBadges  UserBadge[]
}

model UserBadge {
  id              Int              @id @default(autoincrement())
  userId          Int
  badgeName       String
  badgeIcon       String?
  awardedAt       DateTime         @default(now())
  assessmentId    Int?
  badgeTemplateId Int?
  badgeType       String           @default("skill")
  assessment      SkillAssessment? @relation(fields: [assessmentId], references: [id])
  badgeTemplate   BadgeTemplate?   @relation(fields: [badgeTemplateId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedCV {
  id             Int      @id @default(autoincrement())
  userId         Int
  fileUrl        String
  templateUsed   String
  additionalInfo Json?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id              Int            @id @default(autoincrement())
  planName        String
  planPrice       Decimal        @db.Decimal(12, 2)
  planDescription String?
  subscriptions   Subscription[]
}

model Subscription {
  id                 Int              @id @default(autoincrement())
  userId             Int
  subscriptionPlanId Int
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean          @default(false)
  createdAt          DateTime         @default(now())
  payments           Payment[]
  plan               SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionPlanId])
}

model Payment {
  id                   Int           @id @default(autoincrement())
  subscriptionId       Int
  paymentMethod        PaymentMethod
  paymentProof         String?
  status               PaymentStatus @default(PENDING)
  amount               Decimal       @db.Decimal(12, 2)
  approvedAt           DateTime?
  gatewayTransactionId String?
  createdAt            DateTime      @default(now())
  expiredAt            DateTime?
  subscription         Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model Employment {
  id        Int            @id @default(autoincrement())
  userId    Int
  companyId String?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime       @default(now())
  reviews   CompanyReview?
  company   Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model CompanyReview {
  id             Int        @id @default(autoincrement())
  employmentId   Int        @unique
  position       String
  salaryEstimate Int?
  cultureRating  Decimal?   @db.Decimal(3, 2)
  worklifeRating Decimal?   @db.Decimal(3, 2)
  facilityRating Decimal?   @db.Decimal(3, 2)
  careerRating   Decimal?   @db.Decimal(3, 2)
  comment        String?
  createdAt      DateTime   @default(now())
  companyRating  Decimal?   @db.Decimal(3, 2)
  employment     Employment @relation(fields: [employmentId], references: [id], onDelete: Cascade)
}

model JobShare {
  id            Int           @id @default(autoincrement())
  userId        Int
  jobId         String        @db.Uuid
  platform      SharePlatform
  sharedUrl     String?
  customMessage String?
  createdAt     DateTime      @default(now())
  job           Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

enum ApplicationStatus {
  SUBMITTED
  IN_REVIEW
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum PaymentMethod {
  TRANSFER
  GATEWAY
}

enum SharePlatform {
  LINKEDIN
  FACEBOOK
  TWITTER
  WHATSAPP
}

enum ProviderType {
  GOOGLE
}
