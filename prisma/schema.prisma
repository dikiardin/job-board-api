// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================= Enums =========================

enum UserRole {
  USER
  ADMIN // company admin
  DEVELOPER
}

enum ApplicationStatus {
  SUBMITTED
  IN_REVIEW
  INTERVIEW
  ACCEPTED
  REJECTED
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum PaymentMethod {
  TRANSFER
  GATEWAY
}

enum SharePlatform {
  LINKEDIN
  FACEBOOK
  TWITTER
  WHATSAPP
}

enum ProviderType {
  GOOGLE
  FACEBOOK
  TWITTER
  GITHUB
}

// ========================= Models =========================

model User {
  id             Int       @id @default(autoincrement())
  role           UserRole  @default(USER)
  name           String
  email          String    @unique
  passwordHash   String
  phone          String?
  gender         String?
  dob            DateTime?
  education      String?
  address        String?
  profilePicture String?
  isVerified     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  providers           UserProvider[]
  companyAdmins       CompanyAdmin[]
  employments         Employment[]
  applications        Application[]
  preselectionResults PreselectionResult[]
  skillResults        SkillResult[]
  skillAssessments    SkillAssessment[]
  userBadges          UserBadge[]
  generatedCvs        GeneratedCV[]
  subscriptions       Subscription[]
  savedJobs           SavedJob[]
  jobShares           JobShare[]
}

model UserProvider {
  id           Int          @id @default(autoincrement())
  userId       Int
  provider     ProviderType
  providerId   String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  location    String?
  description String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admins      CompanyAdmin[]
  jobs        Job[]
  employments Employment[]
}

model CompanyAdmin {
  id        Int      @id @default(autoincrement())
  companyId Int
  userId    Int
  adminRole String?
  createdAt DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId])
  @@index([userId])
}

model Job {
  id          Int       @id @default(autoincrement())
  companyId   Int
  title       String
  description String
  category    String
  city        String
  salaryMin   Int?
  salaryMax   Int?
  tags        String[]
  banner      String?
  deadline    DateTime?
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications      Application[]
  preselectionTests PreselectionTest[]
  savedBy           SavedJob[]
  shares            JobShare[]

  @@index([companyId])
}

model Application {
  id             Int               @id @default(autoincrement())
  userId         Int
  jobId          Int
  cvFile         String
  expectedSalary Int?
  status         ApplicationStatus @default(SUBMITTED)
  reviewNote     String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  job        Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviews Interview[]

  @@unique([userId, jobId])
  @@index([jobId])
}

model SavedJob {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Interview {
  id             Int             @id @default(autoincrement())
  applicationId  Int
  scheduleDate   DateTime
  locationOrLink String?
  status         InterviewStatus @default(SCHEDULED)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

model PreselectionTest {
  id        Int      @id @default(autoincrement())
  jobId     Int      @unique
  createdAt DateTime @default(now())

  job       Job                    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  questions PreselectionQuestion[]
  results   PreselectionResult[]
}

model PreselectionQuestion {
  id       Int    @id @default(autoincrement())
  testId   Int
  question String
  options  Json
  answer   String

  test PreselectionTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
}

model PreselectionResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  testId    Int
  score     Int
  createdAt DateTime @default(now())

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  test PreselectionTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([userId, testId])
  @@index([testId])
}

model SkillAssessment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdBy   Int
  createdAt   DateTime @default(now())

  creator   User            @relation(fields: [createdBy], references: [id], onDelete: Restrict)
  questions SkillQuestion[]
  results   SkillResult[]
}

model SkillQuestion {
  id           Int    @id @default(autoincrement())
  assessmentId Int
  question     String
  options      Json
  answer       String

  assessment SkillAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
}

model SkillResult {
  id              Int       @id @default(autoincrement())
  userId          Int
  assessmentId    Int
  score           Int
  isPassed        Boolean   @default(false)
  certificateUrl  String?
  certificateCode String?
  startedAt       DateTime?
  finishedAt      DateTime?
  createdAt       DateTime  @default(now())

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment SkillAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assessmentId])
  @@index([assessmentId])
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  badgeName String
  badgeIcon String?
  awardedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedCV {
  id             Int      @id @default(autoincrement())
  userId         Int
  fileUrl        String
  templateUsed   String
  additionalInfo Json?
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id              Int     @id @default(autoincrement())
  planName        String
  planPrice       Decimal @db.Decimal(12, 2)
  planDescription String?

  subscriptions Subscription[]
}

model Subscription {
  id                 Int      @id @default(autoincrement())
  userId             Int
  subscriptionPlanId Int
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean  @default(false)
  createdAt          DateTime @default(now())

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id], onDelete: Restrict)
  payments Payment[]

  @@index([userId])
  @@index([subscriptionPlanId])
}

model Payment {
  id                   Int           @id @default(autoincrement())
  subscriptionId       Int
  paymentMethod        PaymentMethod
  paymentProof         String?
  status               PaymentStatus @default(PENDING)
  amount               Decimal       @db.Decimal(12, 2)
  approvedAt           DateTime?
  gatewayTransactionId String?
  createdAt            DateTime      @default(now())
  expiredAt            DateTime?

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model Employment {
  id         Int       @id @default(autoincrement())
  userId     Int
  companyId  Int
  isVerified Boolean   @default(false)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reviews CompanyReview[]

  @@unique([userId, companyId])
}

model CompanyReview {
  id             Int      @id @default(autoincrement())
  employmentId   Int      @unique
  position       String
  salaryEstimate Int?
  cultureRating  Int
  worklifeRating Int
  facilityRating Int
  careerRating   Int
  comment        String?
  createdAt      DateTime @default(now())

  employment Employment @relation(fields: [employmentId], references: [id], onDelete: Cascade)
}

model JobShare {
  id            Int           @id @default(autoincrement())
  userId        Int
  jobId         Int
  platform      SharePlatform
  sharedUrl     String?
  customMessage String?
  createdAt     DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
}
